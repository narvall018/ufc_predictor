# PARTIE 1 

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import plotly.express as px
import os
import pickle
import joblib
import datetime
import warnings
import requests
from bs4 import BeautifulSoup
import re
import time
import random
warnings.filterwarnings('ignore')

# Configuration de la page avec un th√®me plus moderne
st.set_page_config(
    page_title="UFC Fight Predictor",
    page_icon="ü•ä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√© am√©lior√© avec une palette de couleurs coh√©rente
# AM√âLIORATION UI: Palette de couleurs harmonis√©e et variables CSS pour faciliter la modification
st.markdown("""
<style>
    /* Variables CSS pour une palette de couleurs coh√©rente */
    :root {
        --primary-red: #E53935;
        --primary-blue: #1E88E5;
        --primary-dark: #212121;
        --primary-light: #F5F5F5;
        --primary-accent: #FF9800;
        --success-color: #4CAF50;
        --warning-color: #FFC107;
        --error-color: #F44336;
        --card-bg: rgba(255, 255, 255, 0.08);
        --card-border: rgba(255, 255, 255, 0.1);
        --elevation-1: 0 2px 5px rgba(0, 0, 0, 0.1);
        --elevation-2: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    /* Styles globaux et typographie am√©lior√©s */
    body {
        font-family: 'Inter', 'Segoe UI', -apple-system, sans-serif;
        line-height: 1.6;
    }
    
    h1, h2, h3, h4, h5 {
        font-weight: 600;
        letter-spacing: -0.02em;
    }
    
    /* Composants de base */
    .main-title {
        text-align: center;
        font-size: 2.8rem;
        font-weight: 800;
        color: var(--primary-red);
        margin-bottom: 10px;
        text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.2);
    }
    
    .sub-title {
        text-align: center;
        font-size: 1.3rem;
        margin-bottom: 30px;
        color: rgba(255, 255, 255, 0.8);
    }
    
    /* AM√âLIORATION UI: Design syst√®me de cartes */
    .card {
        background-color: var(--card-bg);
        border-radius: 12px;
        border: 1px solid var(--card-border);
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: var(--elevation-1);
        transition: all 0.2s ease;
    }
    
    .card:hover {
        box-shadow: var(--elevation-2);
        border-color: rgba(255, 255, 255, 0.2);
    }
    
    .card-title {
        font-size: 1.3rem;
        font-weight: 600;
        margin-bottom: 15px;
        color: white;
    }
    
    /* Pr√©diction */
    .prediction-box {
        background-color: var(--card-bg);
        padding: 25px;
        border-radius: 12px;
        box-shadow: var(--elevation-1);
        margin-bottom: 20px;
        border: 1px solid var(--card-border);
    }
    
    .red-fighter {
        color: var(--primary-red);
        font-weight: bold;
    }
    
    .blue-fighter {
        color: var(--primary-blue);
        font-weight: bold;
    }
    
    .winner {
        font-size: 1.5rem;
        font-weight: bold;
    }
    
    /* AM√âLIORATION UI: M√©triques et KPIs */
    [data-testid="stMetric"] {
        background-color: rgba(255, 255, 255, 0.05);
        padding: 16px;
        border-radius: 10px;
        transition: all 0.2s ease;
    }
    
    [data-testid="stMetric"]:hover {
        background-color: rgba(255, 255, 255, 0.1);
    }
    
    [data-testid="stMetric"] > div {
        width: 100%;
    }
    
    [data-testid="stMetricLabel"] {
        display: flex;
        justify-content: center;
        font-weight: 500;
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.7);
    }
    
    [data-testid="stMetricValue"] {
        display: flex;
        justify-content: center;
        font-weight: 700;
        font-size: 1.5rem;
    }
    
    [data-testid="stMetricDelta"] {
        display: flex;
        justify-content: center;
    }
    
    /* Compatibilit√© th√®me sombre pour les cartes */
    .stTabs [data-baseweb="tab-panel"] {
        background-color: rgba(255, 255, 255, 0.03);
        border-radius: 12px;
        padding: 20px;
        border: 1px solid rgba(255, 255, 255, 0.05);
    }
    
    /* AM√âLIORATION UI: Badges et labels plus modernes */
    .badge {
        display: inline-block;
        padding: 4px 10px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.03em;
    }
    
    .ml-badge {
        background-color: var(--success-color);
        color: white;
        padding: 5px 10px;
        border-radius: 20px;
        font-weight: 600;
        font-size: 0.75rem;
        margin-left: 10px;
    }
    
    .classic-badge {
        background-color: var(--primary-blue);
        color: white;
        padding: 5px 10px;
        border-radius: 20px;
        font-weight: 600;
        font-size: 0.75rem;
        margin-left: 10px;
    }
    
    /* AM√âLIORATION UI: Bo√Ætes d'information */
    .info-box {
        background-color: rgba(255, 193, 7, 0.1);
        padding: 15px;
        border-radius: 8px;
        margin: 15px 0;
        border-left: 3px solid var(--warning-color);
    }
    
    /* Divider pour les sections */
    .divider {
        border-top: 1px solid rgba(200, 200, 200, 0.15);
        margin: 25px 0;
    }
    
    /* AM√âLIORATION UI: Cartes de paris */
    .betting-card {
        padding: 20px;
        border-radius: 12px;
        margin-bottom: 20px;
        transition: transform 0.2s;
    }
    
    .betting-card:hover {
        transform: translateY(-2px);
    }
    
    .betting-card-red {
        background: linear-gradient(135deg, rgba(229, 57, 53, 0.1) 0%, rgba(229, 57, 53, 0.05) 100%);
        border: 1px solid rgba(229, 57, 53, 0.2);
    }
    
    .betting-card-blue {
        background: linear-gradient(135deg, rgba(30, 136, 229, 0.1) 0%, rgba(30, 136, 229, 0.05) 100%);
        border: 1px solid rgba(30, 136, 229, 0.2);
    }
    
    /* AM√âLIORATION UI: Statuts et indicateurs */
    .favorable {
        color: var(--success-color);
        font-weight: bold;
    }
    
    .neutral {
        color: var(--warning-color);
        font-weight: bold;
    }
    
    .unfavorable {
        color: var(--error-color);
        font-weight: bold;
    }
    
    /* AM√âLIORATION UI: Boutons d'action modernis√©s */
    .action-button {
        padding: 8px 16px;
        border-radius: 8px;
        font-weight: 600;
        font-size: 0.9rem;
        border: none;
        cursor: pointer;
        transition: all 0.2s;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }
    
    .action-button:hover {
        transform: translateY(-1px);
        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
    }
    
    .delete-button {
        background-color: var(--error-color);
        color: white;
    }
    
    .update-button {
        background-color: var(--success-color);
        color: white;
    }

    /* AM√âLIORATION UI: Gestion de paris am√©lior√©e */
    .bet-management-container {
        background-color: rgba(255, 255, 255, 0.03);
        padding: 20px;
        border-radius: 12px;
        margin-bottom: 25px;
        border: 1px solid rgba(255, 255, 255, 0.08);
    }
    
    /* Kelly Table */
    .kelly-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        border-radius: 8px;
        overflow: hidden;
    }
    
    .kelly-table th {
        background-color: rgba(255, 255, 255, 0.1);
        padding: 12px;
        text-align: left;
        font-weight: 600;
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.9);
    }
    
    .kelly-table td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        font-size: 0.9rem;
    }
    
    .kelly-table tr:last-child td {
        border-bottom: none;
    }
    
    .kelly-table tr:hover {
        background-color: rgba(255, 255, 255, 0.05);
    }
    
    .kelly-highlight {
        background-color: rgba(76, 175, 80, 0.1);
    }
    
    /* Style pour les √©v√©nements √† venir */
    .upcoming-event {
        background: linear-gradient(145deg, rgba(40, 42, 54, 0.8) 0%, rgba(30, 31, 38, 0.8) 100%);
        padding: 20px;
        border-radius: 12px;
        margin-bottom: 20px;
        border: 1px solid rgba(255, 255, 255, 0.07);
        box-shadow: var(--elevation-1);
    }
    
    .upcoming-fight {
        background-color: rgba(248, 249, 250, 0.03);
        padding: 20px;
        border-radius: 10px;
        margin-bottom: 15px;
        border: 1px solid rgba(255, 255, 255, 0.05);
    }
    
    /* AM√âLIORATION UI: Loading state */
    .loading-spinner {
        text-align: center;
        margin: 25px 0;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
    }
    
    .loading-spinner::after {
        content: "";
        width: 30px;
        height: 30px;
        border: 3px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: white;
        animation: spinner 1s ease-in-out infinite;
    }
    
    @keyframes spinner {
        to { transform: rotate(360deg); }
    }
    
    /* AM√âLIORATION UI: Combat cards plus modernes */
    .fight-card {
        background: linear-gradient(145deg, rgba(48, 51, 66, 0.7) 0%, rgba(33, 36, 46, 0.7) 100%);
        padding: 25px;
        border-radius: 12px;
        margin-bottom: 20px;
        box-shadow: var(--elevation-1);
        border: 1px solid rgba(255, 255, 255, 0.05);
        transition: all 0.3s ease;
    }
    
    .fight-card:hover {
        box-shadow: var(--elevation-2);
        border-color: rgba(255, 255, 255, 0.1);
        transform: translateY(-2px);
    }
    
    .fight-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }
    
    /* AM√âLIORATION UI: Sections d'√©v√©nements */
    .event-section {
        background-color: rgba(38, 39, 48, 0.8);
        border-radius: 15px;
        padding: 25px;
        margin-bottom: 30px;
        box-shadow: var(--elevation-2);
        border: 1px solid rgba(255, 255, 255, 0.07);
    }
    
    .event-title {
        background: linear-gradient(135deg, var(--primary-red) 0%, #E63946 100%);
        color: white;
        padding: 10px 20px;
        border-radius: 8px;
        text-align: center;
        margin-bottom: 20px;
        font-size: 1.5rem;
        font-weight: bold;
        box-shadow: 0 2px 10px rgba(230, 57, 70, 0.3);
    }
    
    /* AM√âLIORATION UI: Combat cards modernis√©es */
    .fight-card-improved {
        background: linear-gradient(145deg, rgba(48, 51, 66, 0.5) 0%, rgba(33, 36, 46, 0.5) 100%);
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 15px;
        box-shadow: var(--elevation-1);
        border: 1px solid rgba(255, 255, 255, 0.05);
        transition: all 0.2s ease;
    }
    
    .fight-card-improved:hover {
        transform: translateY(-2px);
        box-shadow: var(--elevation-2);
        border-color: rgba(255, 255, 255, 0.1);
    }
    
    .fighters-banner {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }
    
    .fighter-name-red {
        color: var(--primary-red);
        font-weight: bold;
        font-size: 1.3rem;
        flex: 1;
        text-align: left;
    }
    
    .fighter-name-blue {
        color: var(--primary-blue);
        font-weight: bold;
        font-size: 1.3rem;
        flex: 1;
        text-align: right;
    }
    
    .vs-badge {
        background-color: rgba(0, 0, 0, 0.6);
        color: white;
        padding: 6px 12px;
        border-radius: 20px;
        margin: 0 10px;
        font-size: 0.8rem;
        font-weight: 600;
    }
</style>
""", unsafe_allow_html=True)

# Suite du CSS am√©lior√©
st.markdown("""
<style>
    /* AM√âLIORATION UI: Barres de probabilit√© plus intuitives */
    .probability-container {
        margin: 15px 0;
    }
    
    .probability-bar {
        height: 30px;
        width: 100%;
        background-color: rgba(255, 255, 255, 0.1);
        border-radius: 15px;
        position: relative;
        overflow: hidden;
        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2);
    }
    
    .probability-bar-red {
        height: 100%;
        background: linear-gradient(90deg, #E53935 0%, #F44336 100%);
        float: left;
        text-align: center;
        line-height: 30px;
        color: white;
        font-weight: bold;
        border-radius: 15px 0 0 15px;
    }
    
    .probability-bar-blue {
        height: 100%;
        background: linear-gradient(90deg, #1E88E5 0%, #2196F3 100%);
        float: right;
        text-align: center;
        line-height: 30px;
        color: white;
        font-weight: bold;
        border-radius: 0 15px 15px 0;
    }
    
    /* AM√âLIORATION UI: Badges et √©tiquettes */
    .prediction-badge {
        display: inline-block;
        padding: 5px 10px;
        border-radius: 20px;
        font-weight: 600;
        font-size: 0.8rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        margin-top: 10px;
    }
    
    .prediction-badge-red {
        background-color: var(--primary-red);
        color: white;
    }
    
    .prediction-badge-blue {
        background-color: var(--primary-blue);
        color: white;
    }
    
    .prediction-summary {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 10px;
    }
    
    .prediction-method {
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.6);
    }
    
    .confidence-badge {
        padding: 4px 8px;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 600;
    }
    
    .confidence-high {
        background-color: rgba(76, 175, 80, 0.2);
        color: #81c784;
        border: 1px solid rgba(76, 175, 80, 0.3);
    }
    
    .confidence-moderate {
        background-color: rgba(255, 193, 7, 0.2);
        color: #ffd54f;
        border: 1px solid rgba(255, 193, 7, 0.3);
    }
    
    /* AM√âLIORATION UI: Section d'accueil totalement repens√©e */
    .welcome-header {
        text-align: center;
        padding: 50px 0;
        background: linear-gradient(135deg, rgba(229, 57, 53, 0.8) 0%, rgba(30, 136, 229, 0.8) 100%);
        border-radius: 15px;
        margin-bottom: 40px;
        color: white;
        box-shadow: var(--elevation-2);
    }
    
    .welcome-title {
        font-size: 3.5rem;
        font-weight: 800;
        margin-bottom: 15px;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        letter-spacing: -0.02em;
    }
    
    .welcome-subtitle {
        font-size: 1.5rem;
        margin-bottom: 20px;
        max-width: 700px;
        margin-left: auto;
        margin-right: auto;
        color: rgba(255, 255, 255, 0.9);
    }
    
    /* AM√âLIORATION UI: Feature cards plus visuelles */
    .home-card {
        background: linear-gradient(145deg, rgba(48, 51, 66, 0.7) 0%, rgba(33, 36, 46, 0.7) 100%);
        border-radius: 12px;
        padding: 30px;
        margin-bottom: 25px;
        box-shadow: var(--elevation-1);
        border: 1px solid rgba(255, 255, 255, 0.05);
        transition: all 0.3s ease;
        height: 100%;
        display: flex;
        flex-direction: column;
    }
    
    .home-card:hover {
        transform: translateY(-5px);
        box-shadow: var(--elevation-2);
        border-color: rgba(255, 255, 255, 0.1);
    }
    
    .feature-icon {
        font-size: 2.8rem;
        margin-bottom: 20px;
        text-align: center;
        color: var(--primary-accent);
    }
    
    .feature-title {
        font-size: 1.4rem;
        font-weight: 700;
        margin-bottom: 15px;
        text-align: center;
        color: white;
    }
    
    .feature-description {
        text-align: center;
        font-size: 1rem;
        color: rgba(255, 255, 255, 0.8);
        flex-grow: 1;
    }
    
    /* AM√âLIORATION UI: Strat√©gie kelly */
    .kelly-box {
        background: linear-gradient(145deg, rgba(40, 124, 70, 0.1) 0%, rgba(30, 100, 60, 0.1) 100%);
        border-radius: 12px;
        padding: 20px;
        margin: 20px 0;
        border-left: 3px solid var(--success-color);
        box-shadow: var(--elevation-1);
    }
    
    .kelly-title {
        color: var(--success-color);
        font-weight: bold;
        margin-bottom: 15px;
        font-size: 1.2rem;
    }
    
    /* AM√âLIORATION UI: Placement de paris */
    .bet-placement-box {
        background: linear-gradient(145deg, rgba(25, 70, 186, 0.1) 0%, rgba(20, 60, 150, 0.1) 100%);
        border-radius: 12px;
        padding: 20px;
        margin: 20px 0;
        border-left: 3px solid var(--primary-blue);
        box-shadow: var(--elevation-1);
    }
    
    .bet-placement-title {
        color: var(--primary-blue);
        font-weight: bold;
        margin-bottom: 15px;
        font-size: 1.2rem;
    }
    
    /* AM√âLIORATION UI: Strat√©gie de paris */
    .betting-strategy-box {
        background: linear-gradient(145deg, rgba(76, 175, 80, 0.1) 0%, rgba(56, 142, 60, 0.1) 100%);
        border-radius: 12px;
        padding: 25px;
        margin: 20px 0;
        border-left: 3px solid var(--success-color);
        box-shadow: var(--elevation-1);
    }
    
    .strategy-title {
        color: var(--success-color);
        font-weight: bold;
        margin-bottom: 15px;
        font-size: 1.3rem;
    }
    
    .strategy-summary {
        background-color: rgba(76, 175, 80, 0.05);
        padding: 15px;
        border-radius: 10px;
        margin-top: 15px;
        border: 1px solid rgba(76, 175, 80, 0.1);
    }
    
    .value-betting-positive {
        color: var(--success-color);
        font-weight: bold;
    }
    
    .value-betting-negative {
        color: var(--error-color);
        font-weight: bold;
    }

    /* NOUVELLE SECTION UI: Responsive design */
    @media (max-width: 768px) {
        .welcome-title {
            font-size: 2.5rem;
        }
        
        .welcome-subtitle {
            font-size: 1.2rem;
        }
        
        .feature-icon {
            font-size: 2.2rem;
        }
        
        .main-title {
            font-size: 2.2rem;
        }
        
        .fight-card, .prediction-box, .kelly-box, .bet-placement-box {
            padding: 15px;
        }
        
        .fighter-name-red, .fighter-name-blue {
            font-size: 1.1rem;
        }
        
        /* Adaptation des tableaux */
        .kelly-table th, .kelly-table td {
            padding: 8px 5px;
            font-size: 0.8rem;
        }
    }

    /* NOUVELLE SECTION UI: Animations subtiles */
    .section-fade-in {
        animation: fadeIn 0.5s ease-in-out;
    }
    
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    /* NOUVELLE SECTION UI: Am√©liorations des formulaires */
    input[type="number"], input[type="text"], input[type="date"], select {
        background-color: rgba(255, 255, 255, 0.08) !important;
        border: 1px solid rgba(255, 255, 255, 0.2) !important;
        border-radius: 8px !important;
        color: white !important;
        transition: all 0.2s !important;
    }
    
    input[type="number"]:focus, input[type="text"]:focus, 
    input[type="date"]:focus, select:focus {
        border-color: var(--primary-blue) !important;
        box-shadow: 0 0 0 1px var(--primary-blue) !important;
    }
    
    /* Adaptation des contr√¥les Streamlit */
    div.stButton > button {
        border-radius: 8px;
        font-weight: 600;
        padding: 0.5em 1em;
        transition: all 0.2s;
    }
    
    div.stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
    }
    
    /* Correction des styles pour recommandations */
    .recommendation-box {
        margin-top: 15px;
    }
    
    .recommendation-label {
        margin-bottom: 5px;
        font-weight: 500;
    }
    
    .recommendation-value {
        display: inline-block;
        padding: 5px 12px;
        border-radius: 20px;
        font-weight: 600;
        font-size: 0.9rem;
    }
    
    .recommendation-favorable {
        background-color: rgba(76, 175, 80, 0.2);
        color: #4CAF50;
        border: 1px solid rgba(76, 175, 80, 0.5);
    }
    
    .recommendation-neutral {
        background-color: rgba(255, 193, 7, 0.2);
        color: #FFC107;
        border: 1px solid rgba(255, 193, 7, 0.5);
    }
    
    .recommendation-unfavorable {
        background-color: rgba(244, 67, 54, 0.2);
        color: #F44336;
        border: 1px solid rgba(244, 67, 54, 0.5);
    }
</style>
""", unsafe_allow_html=True)

# CONFIGURATION POUR LES REQU√äTES WEB
HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
    'Accept-Language': 'en-US,en;q=0.9,fr;q=0.8'
}

# Cache pour les requ√™tes
request_cache = {}



@st.cache_resource(ttl=3600*24)
def load_app_data():
    """Version optimis√©e du chargement des donn√©es avec retour visuel am√©lior√©"""
    data = {
        "ml_model": None,
        "scaler": None,
        "feature_names": None,
        "fighters": [],
        "fighters_dict": {},
        "fighter_names": [],
        "current_bankroll": 1000
    }
    
    # AM√âLIORATION UI: Utilisation d'un placeholder pour afficher les √©tapes de chargement
    loading_status = st.empty()
    
    # Charger le mod√®le ML avec gestion d'erreur am√©lior√©e
    loading_status.info("Chargement du mod√®le ML...")
    try:
        model_files = ["ufc_prediction_model.joblib", "ufc_prediction_model.pkl"]
        for model_file in model_files:
            if os.path.exists(model_file):
                if model_file.endswith('.joblib'):
                    model_data = joblib.load(model_file)
                else:
                    with open(model_file, 'rb') as file:
                        model_data = pickle.load(file)
                
                if model_data:
                    data["ml_model"] = model_data.get('model')
                    data["scaler"] = model_data.get('scaler')
                    data["feature_names"] = model_data.get('feature_names')
                    break
    except Exception as e:
        loading_status.error(f"Erreur lors du chargement du mod√®le ML: {e}")
    
    # Optimisation du chargement des stats des combattants
    loading_status.info("Chargement des donn√©es des combattants...")
    fighter_stats_path = 'fighters_stats.txt'
    if os.path.exists(fighter_stats_path):
        fighters = load_fighters_stats(fighter_stats_path)
        fighters = deduplicate_fighters(fighters)
        data["fighters"] = fighters
        
        # Cr√©ation optimis√©e du dictionnaire
        data["fighters_dict"] = {fighter['name']: fighter for fighter in fighters}
        data["fighter_names"] = sorted([fighter['name'] for fighter in fighters])
    
    # Initialiser/Charger la bankroll
    loading_status.info("Initialisation de la bankroll...")
    data["current_bankroll"] = init_bankroll()
    init_bets_file()
    
    # Effacer les messages de statut apr√®s le chargement
    loading_status.empty()
    
    return data

@st.cache_data(ttl=86400, show_spinner=False)
def make_request(url, max_retries=3, delay_range=(0.5, 1.5)):
    """Requ√™te HTTP avec cache intelligent et gestion des erreurs am√©lior√©e"""
    # V√©rifier d'abord dans le cache
    if url in request_cache:
        return request_cache[url]
    
    # AM√âLIORATION: Affichage d'une erreur plus informative en cas d'√©chec
    error_message = None
    
    # Strat√©gie de backoff exponentiel
    for attempt in range(max_retries):
        try:
            # Ajouter un d√©lai pour √©viter de surcharger les serveurs
            backoff_time = delay_range[0] * (2 ** attempt) if attempt > 0 else delay_range[0]
            actual_delay = min(backoff_time, delay_range[1] * 3)
            time.sleep(actual_delay)
            
            response = requests.get(url, headers=HEADERS, timeout=20)
            
            if response.status_code == 200:
                request_cache[url] = response
                return response
            
            # D√©lai sp√©cial pour les erreurs de limitation
            if response.status_code in [403, 429]:
                error_message = f"Erreur d'acc√®s: Limite de requ√™tes atteinte (Code {response.status_code})"
                time.sleep(5 * (attempt + 1))
            else:
                error_message = f"Erreur serveur: Code {response.status_code}"
        except requests.RequestException as e:
            error_message = f"Erreur de connexion: {str(e)}"
        except Exception as e:
            error_message = f"Erreur inattendue: {str(e)}"
    
    # Si toutes les tentatives √©chouent, retourner None avec une erreur informative
    if error_message:
        st.warning(f"√âchec de la requ√™te √† {url}: {error_message}")
        
    return None


# PARTIE 2 

def split_fighter_names(text):
    """S√©pare automatiquement les noms concat√©n√©s des combattants"""
    if not text or "vs" in text:
        return None, None
    
    # Nettoyer le texte d'abord
    text = text.strip()
    
    # M√©thode 1: Rechercher une lettre minuscule suivie d'une majuscule
    matches = list(re.finditer(r'([a-z])([A-Z])', text))
    
    if matches:
        # Trouver la derni√®re occurrence
        match = matches[-1]
        split_pos = match.start() + 1
        
        # S√©parer les noms
        first_fighter = text[:split_pos].strip()
        second_fighter = text[split_pos:].strip()
        
        return first_fighter, second_fighter
    
    # M√©thode 2: Si un seul espace est pr√©sent, s√©parer √† cet espace
    if text.count(' ') == 1:
        parts = text.split(' ')
        return parts[0], parts[1]
    
    # Si aucune s√©paration claire n'est trouv√©e
    return None, None

@st.cache_data(ttl=86400, show_spinner=False)  # Augmentation du TTL √† 24h
def get_upcoming_events(max_events=3):
    """R√©cup√®re les √©v√©nements UFC √† venir avec une UI am√©lior√©e pour les √©checs"""
    # AM√âLIORATION UI: Placeholder pour les messages de progression
    progress_message = st.empty()
    progress_message.info("Recherche des √©v√©nements UFC √† venir...")
    
    # URL pour les √©v√©nements √† venir
    urls = [
        "http://ufcstats.com/statistics/events/upcoming",
        "http://ufcstats.com/statistics/events/completed"  # Fallback pour les √©v√©nements r√©cents
    ]
    
    events = []
    
    for url in urls:
        progress_message.info(f"Tentative de r√©cup√©ration depuis {url}...")
        response = make_request(url)
        if not response:
            continue
        
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # M√©thode 1: Rechercher dans la table des √©v√©nements
        events_table = soup.find('table', class_='b-statistics__table-events')
        
        if events_table:
            rows = events_table.find_all('tr')[1:]  # Ignorer l'en-t√™te
            
            for row in rows[:max_events]:  # Prendre les N premiers √©v√©nements
                cells = row.find_all('td')
                if len(cells) >= 1:
                    event_link = cells[0].find('a')
                    if event_link:
                        event_url = event_link.get('href')
                        event_name = event_link.text.strip()
                        
                        events.append({
                            'name': event_name,
                            'url': event_url
                        })
        
        # M√©thode 2: Chercher les liens directement
        if len(events) < max_events:
            event_links = soup.find_all('a', href=lambda href: href and 'event-details' in href)
            
            for link in event_links[:max_events]:
                event_url = link.get('href')
                event_name = link.text.strip()
                
                if event_url and event_name:
                    # V√©rifier si cet √©v√©nement est d√©j√† dans la liste
                    if not any(e['url'] == event_url for e in events):
                        events.append({
                            'name': event_name,
                            'url': event_url
                        })
                        
                        # Si on a assez d'√©v√©nements, on s'arr√™te
                        if len(events) >= max_events:
                            break
        
        # Si on a trouv√© assez d'√©v√©nements, on peut passer √† l'URL suivante
        if len(events) >= max_events:
            break
    
    # Effacer le message de progression
    progress_message.empty()
    
    # AM√âLIORATION UI: Retourner aussi un statut pour une meilleure exp√©rience utilisateur
    result = {
        'events': events[:max_events],
        'status': 'success' if events else 'error',
        'message': f"{len(events)} √©v√©nements trouv√©s" if events else "Aucun √©v√©nement trouv√©"
    }
    
    return result

@st.cache_data(ttl=86400, show_spinner=False)  # Augmentation du TTL √† 24h
def extract_upcoming_fights(event_url):
    """R√©cup√®re les combats √† venir avec une meilleure gestion des erreurs"""
    # AM√âLIORATION UI: Placeholder pour message de progression
    progress_message = st.empty()
    progress_message.info(f"R√©cup√©ration des combats depuis {event_url}...")
    
    resp = make_request(event_url)
    if not resp:
        progress_message.empty()
        return {'fights': [], 'status': 'error', 'message': 'Impossible de r√©cup√©rer les donn√©es'}

    soup = BeautifulSoup(resp.text, "html.parser")
    table = soup.find("table", class_="b-fight-details__table")
    fights = []

    if table:
        rows = table.select("tbody > tr")[0:]   # on saute la ligne d'en-t√™te
        for row in rows:
            links = row.select("td:nth-child(2) a")  # les 2 balises <a> avec les noms
            if len(links) >= 2:
                fights.append({
                    "red_fighter": links[0].text.strip(),
                    "blue_fighter": links[1].text.strip()
                })

    # Effacer le message de progression
    progress_message.empty()
    
    # AM√âLIORATION UI: Retourner aussi un statut
    result = {
        'fights': fights,
        'status': 'success' if fights else 'warning',
        'message': f"{len(fights)} combats trouv√©s" if fights else "Aucun combat trouv√© pour cet √©v√©nement"
    }
    
    return result


def find_best_match(name, fighters_dict):
    """Recherche le meilleur match pour un nom de combattant dans les stats avec feedback am√©lior√©"""
    if not name:
        return None
    
    # Nettoyage du nom
    name = name.strip()
    
    # Recherche exacte
    if name in fighters_dict:
        return name
    
    # Recherche insensible √† la casse
    name_lower = name.lower()
    for fighter_name in fighters_dict:
        if fighter_name.lower() == name_lower:
            return fighter_name
    
    # AM√âLIORATION: Recherche floue plus robuste
    best_match = None
    best_score = 0
    
    for fighter_name in fighters_dict:
        # Calculer un score de correspondance simple
        score = 0
        fighter_lower = fighter_name.lower()
        
        # Si l'un contient l'autre compl√®tement
        if name_lower in fighter_lower or fighter_lower in name_lower:
            score += 5
        
        # Correspondance partielle de mots
        name_words = name_lower.split()
        fighter_words = fighter_lower.split()
        
        for word in name_words:
            if word in fighter_words:
                score += 2
            # Consid√©rer les matchs partiels (ex: "Mcgregor" vs "McGregor")
            for fighter_word in fighter_words:
                # Match de pr√©fixe (plus fort)
                if fighter_word.startswith(word) or word.startswith(fighter_word):
                    score += 1.5
                # Match partiel
                elif word in fighter_word or fighter_word in word:
                    score += 1
        
        # Bonus pour les noms de longueur similaire
        length_diff = abs(len(name) - len(fighter_name))
        if length_diff <= 3:
            score += 1
        
        if score > best_score:
            best_score = score
            best_match = fighter_name
    
    # Seulement retourner s'il y a une correspondance raisonnable
    if best_score >= 3:
        return best_match
    
    return None

# FONCTIONS POUR LE MOD√àLE ML

def get_float_value(stats_dict, key, default=0.0):
    """
    R√©cup√®re une valeur du dictionnaire et la convertit en float.
    """
    if key not in stats_dict:
        return default
        
    value = stats_dict[key]
    
    if isinstance(value, (int, float)):
        return float(value)
    
    try:
        return float(value)
    except (ValueError, TypeError):
        return default

# OPTIMISATION 3: MISE EN CACHE STRAT√âGIQUE
@st.cache_data(ttl=3600, show_spinner=False)
def create_ml_features(r_stats, b_stats):
    """
    Cr√©e les features n√©cessaires pour le mod√®le ML
    """
    features = {}
    
    # Liste des statistiques num√©riques que nous utiliserons
    numeric_stats = ['wins', 'losses', 'height', 'weight', 'reach', 'age', 
                     'SLpM', 'sig_str_acc', 'SApM', 'str_def', 
                     'td_avg', 'td_acc', 'td_def', 'sub_avg']
    
    # Extraire et convertir les statistiques num√©riques
    for stat in numeric_stats:
        r_value = get_float_value(r_stats, stat, 0.0)
        b_value = get_float_value(b_stats, stat, 0.0)
        
        features[f'r_{stat}'] = r_value
        features[f'b_{stat}'] = b_value
        features[f'diff_{stat}'] = r_value - b_value
        
        if b_value != 0:
            features[f'ratio_{stat}'] = r_value / b_value
        else:
            features[f'ratio_{stat}'] = 0.0
    
    # Features avanc√©es
    
    # 1. Win ratio et exp√©rience
    r_wins = get_float_value(r_stats, 'wins', 0)
    r_losses = get_float_value(r_stats, 'losses', 0)
    b_wins = get_float_value(b_stats, 'wins', 0)
    b_losses = get_float_value(b_stats, 'losses', 0)
    
    # Nombre total de combats (exp√©rience)
    features['r_total_fights'] = r_wins + r_losses
    features['b_total_fights'] = b_wins + b_losses
    features['diff_total_fights'] = features['r_total_fights'] - features['b_total_fights']
    
    # Win ratio
    if r_wins + r_losses > 0:
        features['r_win_ratio'] = r_wins / (r_wins + r_losses)
    else:
        features['r_win_ratio'] = 0
    
    if b_wins + b_losses > 0:
        features['b_win_ratio'] = b_wins / (b_wins + b_losses)
    else:
        features['b_win_ratio'] = 0
        
    features['diff_win_ratio'] = features['r_win_ratio'] - features['b_win_ratio']
    
    # 2. Striking efficiency
    r_slpm = get_float_value(r_stats, 'SLpM', 0)
    r_sapm = get_float_value(r_stats, 'SApM', 0)
    b_slpm = get_float_value(b_stats, 'SLpM', 0)
    b_sapm = get_float_value(b_stats, 'SApM', 0)
    
    # Efficacit√© de frappe
    features['r_striking_efficiency'] = r_slpm - r_sapm
    features['b_striking_efficiency'] = b_slpm - b_sapm
    features['diff_striking_efficiency'] = features['r_striking_efficiency'] - features['b_striking_efficiency']
    
    # Ratio frappe/d√©fense
    if r_sapm > 0:
        features['r_strike_defense_ratio'] = r_slpm / r_sapm
    else:
        features['r_strike_defense_ratio'] = r_slpm if r_slpm > 0 else 1.0
        
    if b_sapm > 0:
        features['b_strike_defense_ratio'] = b_slpm / b_sapm
    else:
        features['b_strike_defense_ratio'] = b_slpm if b_slpm > 0 else 1.0
        
    features['diff_strike_defense_ratio'] = features['r_strike_defense_ratio'] - features['b_strike_defense_ratio']
    
    # 3. Diff√©rences physiques 
    r_height = get_float_value(r_stats, 'height', 0)
    r_weight = get_float_value(r_stats, 'weight', 0)
    r_reach = get_float_value(r_stats, 'reach', 0)
    b_height = get_float_value(b_stats, 'height', 0)
    b_weight = get_float_value(b_stats, 'weight', 0)
    b_reach = get_float_value(b_stats, 'reach', 0)
    
    # Rapport taille/poids
    if r_weight > 0:
        features['r_height_weight_ratio'] = r_height / r_weight
    else:
        features['r_height_weight_ratio'] = 0
        
    if b_weight > 0:
        features['b_height_weight_ratio'] = b_height / b_weight
    else:
        features['b_height_weight_ratio'] = 0
        
    features['diff_height_weight_ratio'] = features['r_height_weight_ratio'] - features['b_height_weight_ratio']
    
    # Avantage d'allonge normalis√© par la taille
    if r_height > 0:
        features['r_reach_height_ratio'] = r_reach / r_height
    else:
        features['r_reach_height_ratio'] = 0
        
    if b_height > 0:
        features['b_reach_height_ratio'] = b_reach / b_height
    else:
        features['b_reach_height_ratio'] = 0
        
    features['diff_reach_height_ratio'] = features['r_reach_height_ratio'] - features['b_reach_height_ratio']
    
    # 4. Indicateurs de style de combat
    r_td_avg = get_float_value(r_stats, 'td_avg', 0)
    r_sub_avg = get_float_value(r_stats, 'sub_avg', 0)
    r_str_def = get_float_value(r_stats, 'str_def', 0)
    r_td_def = get_float_value(r_stats, 'td_def', 0)
    b_td_avg = get_float_value(b_stats, 'td_avg', 0)
    b_sub_avg = get_float_value(b_stats, 'sub_avg', 0)
    b_str_def = get_float_value(b_stats, 'str_def', 0)
    b_td_def = get_float_value(b_stats, 'td_def', 0)
    
    # Sp√©cialiste de striking vs grappling
    if r_td_avg > 0:
        features['r_striking_grappling_ratio'] = r_slpm / r_td_avg
    else:
        features['r_striking_grappling_ratio'] = r_slpm if r_slpm > 0 else 0
        
    if b_td_avg > 0:
        features['b_striking_grappling_ratio'] = b_slpm / b_td_avg
    else:
        features['b_striking_grappling_ratio'] = b_slpm if b_slpm > 0 else 0
        
    # Offensive vs d√©fensive (plus le ratio est √©lev√©, plus le combattant est offensif)
    features['r_offensive_rating'] = r_slpm * r_td_avg * (1 + r_sub_avg)
    features['b_offensive_rating'] = b_slpm * b_td_avg * (1 + b_sub_avg)
    features['diff_offensive_rating'] = features['r_offensive_rating'] - features['b_offensive_rating']
    
    features['r_defensive_rating'] = r_str_def * r_td_def
    features['b_defensive_rating'] = b_str_def * b_td_def
    features['diff_defensive_rating'] = features['r_defensive_rating'] - features['b_defensive_rating']
    
    # 5. Variables composites
    # Performance globale = win_ratio * offensive_rating * defensive_rating
    features['r_overall_performance'] = features['r_win_ratio'] * features['r_offensive_rating'] * features['r_defensive_rating']
    features['b_overall_performance'] = features['b_win_ratio'] * features['b_offensive_rating'] * features['b_defensive_rating']
    features['diff_overall_performance'] = features['r_overall_performance'] - features['b_overall_performance']
    
    # Avantage physique combin√© (taille, poids, allonge)
    features['r_physical_advantage'] = features['r_reach_height_ratio'] * features['r_height_weight_ratio']
    features['b_physical_advantage'] = features['b_reach_height_ratio'] * features['b_height_weight_ratio']
    features['diff_physical_advantage'] = features['r_physical_advantage'] - features['b_physical_advantage']
    
    # 6. Style matching
    if 'stance' in r_stats and 'stance' in b_stats:
        features['same_stance'] = 1 if r_stats['stance'] == b_stats['stance'] else 0
        
        # One-hot encoding des stances
        r_stance = r_stats.get('stance', '').lower()
        b_stance = b_stats.get('stance', '').lower()
        
        stances = ['orthodox', 'southpaw', 'switch', 'open stance']
        for stance in stances:
            features[f'r_stance_{stance}'] = 1 if r_stance == stance else 0
            features[f'b_stance_{stance}'] = 1 if b_stance == stance else 0
    
    return features

def predict_with_ml(r_stats, b_stats, model, scaler, feature_names):
    """
    Pr√©dit l'issue d'un combat avec le mod√®le ML avec une meilleure gestion des erreurs
    """
    # Si le mod√®le n'est pas charg√©, retourner None
    if model is None or scaler is None or feature_names is None:
        return None
    
    try:
        # Cr√©er les features
        features = create_ml_features(r_stats, b_stats)
        
        # Convertir en DataFrame
        features_df = pd.DataFrame([features])
        
        # S'assurer que toutes les colonnes n√©cessaires sont pr√©sentes
        for col in feature_names:
            if col not in features_df.columns:
                features_df[col] = 0
        
        # Ne garder que les colonnes utilis√©es par le mod√®le
        features_df = features_df[feature_names]
        
        # Remplacer les valeurs infinies et NaN
        features_df.replace([np.inf, -np.inf], np.nan, inplace=True)
        features_df.fillna(0, inplace=True)
        
        # Normaliser
        X_scaled = scaler.transform(features_df)
        
        # Pr√©dire
        if hasattr(model, "predict_proba"):
            red_prob = model.predict_proba(X_scaled)[0][1]
        else:
            red_prob = float(model.predict(X_scaled)[0])
        
        blue_prob = 1 - red_prob
        
        # Cr√©er le r√©sultat
        result = {
            'prediction': 'Red' if red_prob > blue_prob else 'Blue',
            'red_probability': red_prob,
            'blue_probability': blue_prob,
            'confidence': '√âlev√©' if abs(red_prob - blue_prob) > 0.2 else 'Mod√©r√©'
        }
        
        return result
    except Exception as e:
        st.error(f"Erreur lors de la pr√©diction ML: {e}")
        return None

@st.cache_data(ttl=86400, show_spinner=False)  # Augmentation du TTL √† 24h
def load_fighters_stats(file_path):
    """
    Charge les statistiques des combattants depuis un fichier texte
    """
    fighters = []
    current_fighter = {}
    
    try:
        with open(file_path, 'r') as file:
            for line in file:
                line = line.strip()
                if not line:  # Ligne vide, s√©parateur entre combattants
                    if current_fighter and 'name' in current_fighter:
                        fighters.append(current_fighter)
                        current_fighter = {}
                elif ':' in line:
                    key, value = line.split(':', 1)
                    key = key.strip()
                    value = value.strip()
                    
                    # Gestion des valeurs manquantes
                    if value.lower() in ['none', 'nan', '', 'null']:
                        if key in ['wins', 'losses', 'age']:
                            value = 0
                        elif key in ['height', 'weight', 'reach', 'SLpM', 'sig_str_acc', 
                                   'SApM', 'str_def', 'td_avg', 'td_acc', 'td_def', 'sub_avg']:
                            value = 0.0
                        else:
                            value = 'Unknown'
                    else:
                        # Conversion des types
                        try:
                            if key in ['wins', 'losses', 'age']:
                                value = int(value)
                            elif key in ['height', 'weight', 'reach', 'SLpM', 'sig_str_acc', 
                                       'SApM', 'str_def', 'td_avg', 'td_acc', 'td_def', 'sub_avg']:
                                value = float(value)
                        except ValueError:
                            if key in ['wins', 'losses', 'age']:
                                value = 0
                            elif key in ['height', 'weight', 'reach', 'SLpM', 'sig_str_acc', 
                                       'SApM', 'str_def', 'td_avg', 'td_acc', 'td_def', 'sub_avg']:
                                value = 0.0
                    
                    current_fighter[key] = value
        
        # Ajouter le dernier combattant
        if current_fighter and 'name' in current_fighter:
            fighters.append(current_fighter)
            
        return fighters
        
    except Exception as e:
        st.error(f"Erreur lors du chargement: {e}")
        return []

# √âliminer les doublons en gardant le meilleur combattant de chaque nom
def deduplicate_fighters(fighters_list):
    """
    Supprime les doublons de noms en gardant le combattant le plus performant
    """
    fighters_by_name = {}
    
    for fighter in fighters_list:
        name = fighter['name']
        
        # Calculer un score de performance
        wins = fighter.get('wins', 0)
        losses = fighter.get('losses', 0)
        win_ratio = wins / max(wins + losses, 1)
        
        # Score combin√© (ratio de victoires + √¢ge inverse + nombre de combats)
        performance = win_ratio + (1/max(fighter.get('age', 30), 1)) + (wins + losses)/10
        
        # Garder seulement le combattant avec le meilleur score
        if name not in fighters_by_name or performance > fighters_by_name[name]['performance']:
            fighters_by_name[name] = {
                'fighter': fighter,
                'performance': performance
            }
    
    # Extraire les meilleurs combattants uniques
    unique_fighters = [info['fighter'] for info in fighters_by_name.values()]
    
    return unique_fighters

# Fonction pour pr√©dire l'issue d'un combat (m√©thode originale bas√©e sur les statistiques)
def predict_fight_classic(fighter_a, fighter_b, odds_a=0, odds_b=0):
    """
    Pr√©dit l'issue d'un combat avec analyse de paris (m√©thode classique)
    """
    # Calcul des scores de base
    a_score = (
        fighter_a['wins'] / max(fighter_a['wins'] + fighter_a['losses'], 1) * 2 + 
        fighter_a['SLpM'] * fighter_a['sig_str_acc'] - 
        fighter_a['SApM'] * (1 - fighter_a['str_def']) + 
        fighter_a['td_avg'] * fighter_a['td_acc'] + 
        fighter_a['sub_avg']
    )
    
    b_score = (
        fighter_b['wins'] / max(fighter_b['wins'] + fighter_b['losses'], 1) * 2 + 
        fighter_b['SLpM'] * fighter_b['sig_str_acc'] - 
        fighter_b['SApM'] * (1 - fighter_b['str_def']) + 
        fighter_b['td_avg'] * fighter_b['td_acc'] + 
        fighter_b['sub_avg']
    )
    
    # Normaliser pour obtenir des probabilit√©s
    total = a_score + b_score
    red_prob = a_score / total if total > 0 else 0.5
    blue_prob = b_score / total if total > 0 else 0.5
    
    # R√©sultat de base
    result = {
        'prediction': 'Red' if red_prob > blue_prob else 'Blue',
        'winner_name': fighter_a['name'] if red_prob > blue_prob else fighter_b['name'],
        'loser_name': fighter_b['name'] if red_prob > blue_prob else fighter_a['name'],
        'red_probability': red_prob,
        'blue_probability': blue_prob,
        'confidence': '√âlev√©' if abs(red_prob - blue_prob) > 0.2 else 'Mod√©r√©'
    }
    
    # Ajouter l'analyse des paris si des cotes sont fournies
    if odds_a > 0 and odds_b > 0:
        # Probabilit√© implicite selon les bookmakers
        implied_prob_a = 1 / odds_a
        implied_prob_b = 1 / odds_b
        
        # Normaliser pour √©liminer la marge du bookmaker
        total_implied = implied_prob_a + implied_prob_b
        implied_prob_a_norm = implied_prob_a / total_implied
        implied_prob_b_norm = implied_prob_b / total_implied
        
        # Valeur esp√©r√©e (Expected Value)
        ev_a = (red_prob * odds_a) - 1
        ev_b = (blue_prob * odds_b) - 1
        
        # Recommandation de pari
        bet_recommendation_a = "Favorable" if ev_a > 0.1 else "Neutre" if ev_a > -0.1 else "D√©favorable"
        bet_recommendation_b = "Favorable" if ev_b > 0.1 else "Neutre" if ev_b > -0.1 else "D√©favorable"
        
        result['betting'] = {
            'odds_red': odds_a,
            'odds_blue': odds_b,
            'implied_prob_red': implied_prob_a_norm,
            'implied_prob_blue': implied_prob_b_norm,
            'ev_red': ev_a,
            'ev_blue': ev_b,
            'recommendation_red': bet_recommendation_a,
            'recommendation_blue': bet_recommendation_b,
            'edge_red': red_prob - implied_prob_a_norm,
            'edge_blue': blue_prob - implied_prob_b_norm
        }
    
    return result

# Fonction de pr√©diction am√©lior√©e qui retourne les r√©sultats des deux m√©thodes
def predict_both_methods(fighter_a, fighter_b, odds_a=0, odds_b=0, model=None, scaler=None, feature_names=None):
    """
    Pr√©dit l'issue d'un combat en utilisant les deux m√©thodes (ML et classique)
    et retourne les deux pr√©dictions
    """
    # Pr√©diction avec la m√©thode classique
    classic_prediction = predict_fight_classic(fighter_a, fighter_b, odds_a, odds_b)
    classic_prediction['method'] = 'classic'
    
    # Pr√©diction avec ML si disponible
    ml_prediction = None
    
    if model is not None:
        ml_result = predict_with_ml(fighter_a, fighter_b, model, scaler, feature_names)
        
        if ml_result is not None:
            ml_prediction = ml_result
            ml_prediction['winner_name'] = fighter_a['name'] if ml_prediction['prediction'] == 'Red' else fighter_b['name']
            ml_prediction['loser_name'] = fighter_b['name'] if ml_prediction['prediction'] == 'Red' else fighter_a['name']
            ml_prediction['method'] = 'ml'
            
            # Ajouter l'analyse des paris si des cotes sont fournies
            if odds_a > 0 and odds_b > 0:
                red_prob = ml_prediction['red_probability']
                blue_prob = ml_prediction['blue_probability']
                
                # Probabilit√© implicite selon les bookmakers
                implied_prob_a = 1 / odds_a
                implied_prob_b = 1 / odds_b
                
                # Normaliser pour √©liminer la marge du bookmaker
                total_implied = implied_prob_a + implied_prob_b
                implied_prob_a_norm = implied_prob_a / total_implied
                implied_prob_b_norm = implied_prob_b / total_implied
                
                # Valeur esp√©r√©e (Expected Value)
                ev_a = (red_prob * odds_a) - 1
                ev_b = (blue_prob * odds_b) - 1
                
                # Recommandation de pari
                bet_recommendation_a = "Favorable" if ev_a > 0.1 else "Neutre" if ev_a > -0.1 else "D√©favorable"
                bet_recommendation_b = "Favorable" if ev_b > 0.1 else "Neutre" if ev_b > -0.1 else "D√©favorable"
                
                ml_prediction['betting'] = {
                    'odds_red': odds_a,
                    'odds_blue': odds_b,
                    'implied_prob_red': implied_prob_a_norm,
                    'implied_prob_blue': implied_prob_b_norm,
                    'ev_red': ev_a,
                    'ev_blue': ev_b,
                    'recommendation_red': bet_recommendation_a,
                    'recommendation_blue': bet_recommendation_b,
                    'edge_red': red_prob - implied_prob_a_norm,
                    'edge_blue': blue_prob - implied_prob_b_norm
                }
    
    return classic_prediction, ml_prediction

# PARTIE 3 

# FONCTIONS DE VISUALISATION AM√âLIOR√âES
@st.cache_data(ttl=3600)
def create_radar_chart(fighter_a, fighter_b):
    """Cr√©e un graphique radar comparant les attributs des combattants avec une meilleure esth√©tique"""
    categories = ['Win Ratio', 'Striking', 'Defense', 'Ground', 'Experience']
    
    # Calculer les valeurs pour chaque cat√©gorie
    a_values = [
        fighter_a['wins']/(fighter_a['wins']+fighter_a['losses']) if fighter_a['wins']+fighter_a['losses'] > 0 else 0,
        fighter_a['SLpM'] * fighter_a['sig_str_acc'],
        fighter_a['str_def'],
        fighter_a['td_avg'] * fighter_a['td_acc'] + fighter_a['sub_avg'],
        fighter_a['wins'] + fighter_a['losses']
    ]
    
    b_values = [
        fighter_b['wins']/(fighter_b['wins']+fighter_b['losses']) if fighter_b['wins']+fighter_b['losses'] > 0 else 0,
        fighter_b['SLpM'] * fighter_b['sig_str_acc'],
        fighter_b['str_def'],
        fighter_b['td_avg'] * fighter_b['td_acc'] + fighter_b['sub_avg'],
        fighter_b['wins'] + fighter_b['losses']
    ]
    
    # Normaliser les valeurs
    max_values = [max(a, b) for a, b in zip(a_values, b_values)]
    a_values_norm = [a/m if m > 0 else 0 for a, m in zip(a_values, max_values)]
    b_values_norm = [b/m if m > 0 else 0 for b, m in zip(b_values, max_values)]
    
    # AM√âLIORATION UI: Utiliser Plotly avec des couleurs et un design moderne
    fig = go.Figure()
    
    # Ajouter les traces pour chaque combattant avec des couleurs am√©lior√©es et plus de transparence
    fig.add_trace(go.Scatterpolar(
        r=a_values_norm + [a_values_norm[0]],  # Fermer le polygone
        theta=categories + [categories[0]],
        fill='toself',
        name=fighter_a['name'],
        line_color='#E53935',
        fillcolor='rgba(229, 57, 53, 0.3)',
        line=dict(width=2)
    ))
    
    fig.add_trace(go.Scatterpolar(
        r=b_values_norm + [b_values_norm[0]],  # Fermer le polygone
        theta=categories + [categories[0]],
        fill='toself',
        name=fighter_b['name'],
        line_color='#1E88E5',
        fillcolor='rgba(30, 136, 229, 0.3)',
        line=dict(width=2)
    ))
    
    # Configurer la mise en page moderne
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 1.2],
                showticklabels=False,
                gridcolor='rgba(255, 255, 255, 0.1)',
                linecolor='rgba(255, 255, 255, 0.1)'
            ),
            angularaxis=dict(
                gridcolor='rgba(255, 255, 255, 0.1)',
                linecolor='rgba(255, 255, 255, 0.1)'
            ),
            bgcolor='rgba(0, 0, 0, 0)'
        ),
        title={
            'text': "Comparaison des attributs",
            'y':0.95,
            'x':0.5,
            'xanchor': 'center',
            'yanchor': 'top',
            'font': dict(size=18, color='white')
        },
        height=500,
        margin=dict(l=80, r=80, t=100, b=80),
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)',
        font=dict(color='white'),
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="center",
            x=0.5
        )
    )
    
    return fig

@st.cache_data(ttl=3600)
def create_strengths_weaknesses_chart(fighter_a, fighter_b):
    """Cr√©e un graphique des forces et faiblesses des combattants avec un design am√©lior√©"""
    attributes = ['Striking', 'Ground Game', 'Defense', 'Endurance', 'Experience']
    
    # Calcul des scores pour chaque attribut
    a_striking = fighter_a['SLpM'] * fighter_a['sig_str_acc']
    a_ground = fighter_a['td_avg'] * fighter_a['td_acc'] + fighter_a['sub_avg']
    a_defense = fighter_a['str_def'] * 0.7 + fighter_a['td_def'] * 0.3
    a_endurance = 1 / (fighter_a['SApM'] + 0.1)  # Inverse des coups re√ßus
    a_experience = fighter_a['wins'] + fighter_a['losses']
    
    b_striking = fighter_b['SLpM'] * fighter_b['sig_str_acc']
    b_ground = fighter_b['td_avg'] * fighter_b['td_acc'] + fighter_b['sub_avg']
    b_defense = fighter_b['str_def'] * 0.7 + fighter_b['td_def'] * 0.3
    b_endurance = 1 / (fighter_b['SApM'] + 0.1)
    b_experience = fighter_b['wins'] + fighter_b['losses']
    
    a_scores = [a_striking, a_ground, a_defense, a_endurance, a_experience]
    b_scores = [b_striking, b_ground, b_defense, b_endurance, b_experience]
    
    # Normalisation
    max_scores = [max(a, b) for a, b in zip(a_scores, b_scores)]
    a_norm = [a/m if m > 0 else 0 for a, m in zip(a_scores, max_scores)]
    b_norm = [b/m if m > 0 else 0 for b, m in zip(b_scores, max_scores)]
    
    # Cr√©er le dataframe pour Plotly
    df = pd.DataFrame({
        'Attribute': attributes + attributes,
        'Value': a_norm + b_norm,
        'Fighter': [fighter_a['name']] * 5 + [fighter_b['name']] * 5
    })
    
    # AM√âLIORATION UI: Graphique avec des couleurs et styles modernes
    fig = px.bar(
        df, 
        x='Attribute', 
        y='Value', 
        color='Fighter',
        barmode='group',
        color_discrete_map={fighter_a['name']: '#E53935', fighter_b['name']: '#1E88E5'},
        title="Forces et faiblesses comparatives"
    )
    
    fig.update_layout(
        yaxis_title="Score normalis√©",
        xaxis_title="",
        legend_title="Combattant",
        height=500,
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)',
        font=dict(color='white'),
        xaxis=dict(
            showgrid=True,
            gridcolor='rgba(255, 255, 255, 0.1)',
            zeroline=False
        ),
        yaxis=dict(
            showgrid=True,
            gridcolor='rgba(255, 255, 255, 0.1)',
            zeroline=False,
            range=[0, 1.05]
        ),
        bargap=0.2,
        bargroupgap=0.1,
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="center",
            x=0.5
        )
    )
    
    # Style moderne pour les barres
    fig.update_traces(
        marker_line_width=0, 
        opacity=0.8,
        hovertemplate='<b>%{x}</b><br>Score: %{y:.2f}<extra></extra>'
    )
    
    return fig

@st.cache_data(ttl=3600)
def create_style_analysis_chart(fighter_a, fighter_b):
    """Cr√©e un graphique d'analyse des styles de combat avec un design moderne"""
    # Calculer des indicateurs de style
    a_striking = fighter_a['SLpM'] * fighter_a['sig_str_acc']
    a_ground = fighter_a['td_avg'] * fighter_a['td_acc'] + fighter_a['sub_avg']
    a_striker_grappler = a_striking / (a_ground + 0.1)  # > 1 = striker, < 1 = grappler
    a_aggressive_defensive = fighter_a['SLpM'] / (fighter_a['str_def'] + 0.1)  # > 1 = agressif
    
    b_striking = fighter_b['SLpM'] * fighter_b['sig_str_acc']
    b_ground = fighter_b['td_avg'] * fighter_b['td_acc'] + fighter_b['sub_avg']
    b_striker_grappler = b_striking / (b_ground + 0.1)
    b_aggressive_defensive = fighter_b['SLpM'] / (fighter_b['str_def'] + 0.1)
    
    # Normalisation pour le graphique
    max_sg = max(a_striker_grappler, b_striker_grappler)
    max_ad = max(a_aggressive_defensive, b_aggressive_defensive)
    
    a_sg_norm = a_striker_grappler / max_sg if max_sg > 0 else 0
    a_ad_norm = a_aggressive_defensive / max_ad if max_ad > 0 else 0
    
    b_sg_norm = b_striker_grappler / max_sg if max_sg > 0 else 0
    b_ad_norm = b_aggressive_defensive / max_ad if max_ad > 0 else 0
    
    # AM√âLIORATION UI: Graphique modernis√©
    fig = go.Figure()
    
    # Ajouter un arri√®re-plan de quadrant
    fig.add_shape(
        type="rect", xref="paper", yref="paper",
        x0=0, y0=0, x1=1, y1=1,
        line=dict(color="rgba(255, 255, 255, 0.1)", width=1)
    )
    
    # Ajouter des lignes de quadrant avec style am√©lior√©
    fig.add_shape(
        type="line", xref="paper", yref="paper",
        x0=0.5, y0=0, x1=0.5, y1=1,
        line=dict(color="rgba(255, 255, 255, 0.2)", width=1, dash="dot")
    )
    
    fig.add_shape(
        type="line", xref="paper", yref="paper",
        x0=0, y0=0.5, x1=1, y1=0.5,
        line=dict(color="rgba(255, 255, 255, 0.2)", width=1, dash="dot")
    )
    
    # Ajouter les points pour chaque combattant avec style am√©lior√©
    fig.add_trace(go.Scatter(
        x=[a_sg_norm],
        y=[a_ad_norm],
        mode='markers+text',
        marker=dict(
            size=20, 
            color='#E53935',
            line=dict(width=2, color='white')
        ),
        text=fighter_a['name'],
        textposition="top center",
        name=fighter_a['name'],
        hovertemplate=f'<b>{fighter_a["name"]}</b><br>Style: %{{x:.2f}}<br>Approche: %{{y:.2f}}<extra></extra>'
    ))
    
    fig.add_trace(go.Scatter(
        x=[b_sg_norm],
        y=[b_ad_norm],
        mode='markers+text',
        marker=dict(
            size=20, 
            color='#1E88E5',
            line=dict(width=2, color='white')
        ),
        text=fighter_b['name'],
        textposition="top center",
        name=fighter_b['name'],
        hovertemplate=f'<b>{fighter_b["name"]}</b><br>Style: %{{x:.2f}}<br>Approche: %{{y:.2f}}<extra></extra>'
    ))
    
    # Ajouter des annotations pour les quadrants avec style am√©lior√©
    fig.add_annotation(
        x=0.25, y=0.75, 
        text="Grappler Agressif",
        showarrow=False,
        font=dict(color="rgba(255, 255, 255, 0.7)", size=12)
    )
    fig.add_annotation(
        x=0.75, y=0.75, 
        text="Striker Agressif",
        showarrow=False,
        font=dict(color="rgba(255, 255, 255, 0.7)", size=12)
    )
    fig.add_annotation(
        x=0.25, y=0.25, 
        text="Grappler D√©fensif",
        showarrow=False,
        font=dict(color="rgba(255, 255, 255, 0.7)", size=12)
    )
    fig.add_annotation(
        x=0.75, y=0.25, 
        text="Striker D√©fensif",
        showarrow=False,
        font=dict(color="rgba(255, 255, 255, 0.7)", size=12)
    )
    
    # Configurer la mise en page moderne
    fig.update_layout(
        title={
            'text': "Analyse de style de combat",
            'y': 0.95,
            'x': 0.5,
            'xanchor': 'center',
            'yanchor': 'top',
            'font': dict(size=18, color='white')
        },
        xaxis_title="Style de combat (Grappler ‚Üê ‚Üí Striker)",
        yaxis_title="Approche (D√©fensif ‚Üê ‚Üí Agressif)",
        xaxis=dict(
            range=[0, 1.1],
            showgrid=False,
            zeroline=False,
            showticklabels=False
        ),
        yaxis=dict(
            range=[0, 1.1],
            showgrid=False,
            zeroline=False,
            showticklabels=False
        ),
        height=600,
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)',
        font=dict(color='white'),
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="center",
            x=0.5
        ),
        margin=dict(l=50, r=50, t=100, b=50)
    )
    
    return fig

# Fonction pour cr√©er un DataFrame des statistiques comparatives
def create_stats_comparison_df(fighter_a, fighter_b):
    stats_to_compare = [
        ('Victoires', 'wins', False), 
        ('D√©faites', 'losses', True),  # True = une valeur plus basse est meilleure
        ('Ratio V/D', lambda f: f['wins']/(f['wins']+f['losses']) if f['wins']+f['losses'] > 0 else 0, False),
        ('√Çge', 'age', True),
        ('Taille (cm)', 'height', False),
        ('Poids (kg)', 'weight', False),
        ('Allonge (cm)', 'reach', False),
        ('Frappes/min', 'SLpM', False),
        ('Pr√©cision frappes', 'sig_str_acc', False),
        ('Frappes re√ßues/min', 'SApM', True),
        ('D√©fense frappes', 'str_def', False),
        ('Takedowns/combat', 'td_avg', False),
        ('Pr√©cision takedowns', 'td_acc', False),
        ('D√©fense takedowns', 'td_def', False),
        ('Soumissions/combat', 'sub_avg', False)
    ]
    
    data = []
    
    for stat_name, stat_key, lower_better in stats_to_compare:
        if callable(stat_key):
            a_value = stat_key(fighter_a)
            b_value = stat_key(fighter_b)
        else:
            a_value = fighter_a.get(stat_key, 0)
            b_value = fighter_b.get(stat_key, 0)
        
        # D√©terminer qui a l'avantage
        if isinstance(a_value, (int, float)) and isinstance(b_value, (int, float)):
            if lower_better:
                advantage = fighter_a['name'] if a_value < b_value else fighter_b['name'] if b_value < a_value else "√âgal"
            else:
                advantage = fighter_a['name'] if a_value > b_value else fighter_b['name'] if b_value > a_value else "√âgal"
        else:
            advantage = "√âgal"
        
        # Formatage pour l'affichage
        if isinstance(a_value, float) and isinstance(b_value, float):
            a_display = f"{a_value:.2f}"
            b_display = f"{b_value:.2f}"
        else:
            a_display = str(a_value)
            b_display = str(b_value)
        
        data.append({
            'Statistique': stat_name,
            fighter_a['name']: a_display,
            fighter_b['name']: b_display,
            'Avantage': advantage
        })
    
    return pd.DataFrame(data)

# FONCTIONS POUR LA GESTION DE BANKROLL ET PARIS

def init_bankroll():
    """
    Initialise ou charge la bankroll depuis le fichier avec une gestion d'erreurs am√©lior√©e
    """
    bets_dir = "bets"
    bankroll_file = os.path.join(bets_dir, "bankroll.csv")
    
    try:
        # Cr√©er le dossier s'il n'existe pas
        if not os.path.exists(bets_dir):
            os.makedirs(bets_dir)
        
        # Charger la bankroll si le fichier existe
        if os.path.exists(bankroll_file):
            bankroll_df = pd.read_csv(bankroll_file)
            if not bankroll_df.empty:
                return bankroll_df.iloc[-1]["amount"]
        
        # Sinon, initialiser le fichier avec une valeur par d√©faut
        bankroll_df = pd.DataFrame({
            "date": [datetime.datetime.now().strftime("%Y-%m-%d")],
            "amount": [1000],  # Valeur par d√©faut
            "action": ["initial"],
            "note": ["Bankroll initiale"]
        })
        
        # Sauvegarder le fichier
        bankroll_df.to_csv(bankroll_file, index=False)
        st.success("Bankroll initialis√©e avec succ√®s √† 1000‚Ç¨")
        return 1000
    
    except Exception as e:
        st.error(f"Erreur lors de l'initialisation de la bankroll: {e}")
        # Valeur par d√©faut en cas d'erreur
        return 1000

def init_bets_file():
    """
    Initialise le fichier de paris s'il n'existe pas avec une gestion d'erreurs am√©lior√©e
    """
    bets_dir = "bets"
    bets_file = os.path.join(bets_dir, "bets.csv")
    
    try:
        # Cr√©er le dossier s'il n'existe pas
        if not os.path.exists(bets_dir):
            os.makedirs(bets_dir)
        
        # Cr√©er le fichier s'il n'existe pas
        if not os.path.exists(bets_file):
            columns = ["bet_id", "date_placed", "event_name", "event_date", 
                    "fighter_red", "fighter_blue", "pick", "odds", 
                    "stake", "kelly_fraction", "model_probability", 
                    "status", "result", "profit", "roi"]
            
            empty_df = pd.DataFrame(columns=columns)
            empty_df.to_csv(bets_file, index=False)
            st.success("Fichier de paris initialis√© avec succ√®s")
    
    except Exception as e:
        st.error(f"Erreur lors de l'initialisation du fichier de paris: {e}")


def calculate_kelly(prob, odds, bankroll, fraction=1):
    """
    Calcule la mise optimale selon le crit√®re de Kelly fractionn√©
    
    Args:
        prob: probabilit√© de gain selon le mod√®le ML
        odds: cote d√©cimale (europ√©enne)
        bankroll: montant total disponible
        fraction: diviseur Kelly (ex: 4 pour Kelly/4)
    
    Returns:
        Montant recommand√© √† parier
    """
    b = odds - 1  # gain net par unit√© mis√©e
    q = 1 - prob  # probabilit√© de perte
    
    # Formule de Kelly: (p*b - q) / b
    kelly_percentage = (prob * b - q) / b
    
    # Si Kelly est n√©gatif, ne pas parier
    if kelly_percentage <= 0:
        return 0
    
    # Appliquer la fraction Kelly
    fractional_kelly = kelly_percentage / fraction
    
    # Calculer la mise recommand√©e
    recommended_stake = bankroll * fractional_kelly
    
    return round(recommended_stake, 2)

def update_bet_result(bet_id, result, current_bankroll):
    """
    Met √† jour le r√©sultat d'un pari existant et ajuste la bankroll avec une gestion d'erreurs am√©lior√©e
    
    Args:
        bet_id: Identifiant du pari √† mettre √† jour
        result: R√©sultat du pari ('win', 'loss', 'void')
        current_bankroll: Bankroll actuelle
        
    Returns:
        Nouveau solde de la bankroll apr√®s la mise √† jour
    """
    bets_dir = "bets"
    bets_file = os.path.join(bets_dir, "bets.csv")
    bankroll_file = os.path.join(bets_dir, "bankroll.csv")
    
    try:
        if not os.path.exists(bets_file):
            st.error("Fichier de paris introuvable.")
            return current_bankroll
        
        # Charger les fichiers
        bets_df = pd.read_csv(bets_file)
        if os.path.exists(bankroll_file):
            bankroll_df = pd.read_csv(bankroll_file)
        else:
            # Cr√©er un nouveau fichier bankroll si n√©cessaire
            bankroll_df = pd.DataFrame(columns=["date", "amount", "action", "note"])
        
        # V√©rifier si le pari existe
        if bet_id not in bets_df["bet_id"].values:
            st.error(f"Pari #{bet_id} introuvable.")
            return current_bankroll
        
        # R√©cup√©rer les informations du pari
        bet_row = bets_df[bets_df["bet_id"] == bet_id].iloc[0]
        stake = float(bet_row["stake"])
        odds = float(bet_row["odds"])
        
        # V√©rifier si le pari est d√©j√† ferm√©
        if bet_row["status"] == "closed":
            st.warning(f"Le pari #{bet_id} est d√©j√† ferm√© avec le r√©sultat: {bet_row['result']}")
            return current_bankroll
        
        # Calculer le profit
        if result == "win":
            profit = stake * (odds - 1)
            roi = (profit / stake) * 100
        elif result == "loss":
            profit = -stake
            roi = -100
        else:  # void
            profit = 0
            roi = 0
        
        # Mettre √† jour le pari
        bets_df.loc[bets_df["bet_id"] == bet_id, "status"] = "closed"
        bets_df.loc[bets_df["bet_id"] == bet_id, "result"] = result
        bets_df.loc[bets_df["bet_id"] == bet_id, "profit"] = profit
        bets_df.loc[bets_df["bet_id"] == bet_id, "roi"] = roi
        bets_df.to_csv(bets_file, index=False)
        
        # Mettre √† jour la bankroll
        new_bankroll = current_bankroll + profit
        new_entry = pd.DataFrame({
            "date": [datetime.datetime.now().strftime("%Y-%m-%d")],
            "amount": [new_bankroll],
            "action": ["update"],
            "note": [f"R√©sultat pari #{bet_id}: {result}"]
        })
        bankroll_df = pd.concat([bankroll_df, new_entry], ignore_index=True)
        bankroll_df.to_csv(bankroll_file, index=False)
        
        # Feedback √† l'utilisateur
        if result == "win":
            st.success(f"Victoire! Gain de {profit:.2f}‚Ç¨ - Nouvelle bankroll: {new_bankroll:.2f}‚Ç¨")
        elif result == "loss":
            st.warning(f"Perte de {stake:.2f}‚Ç¨ - Nouvelle bankroll: {new_bankroll:.2f}‚Ç¨")
        else:
            st.info(f"Pari annul√© - Bankroll inchang√©e: {new_bankroll:.2f}‚Ç¨")
        
        return new_bankroll
    
    except Exception as e:
        st.error(f"Erreur lors de la mise √† jour du pari: {e}")
        return current_bankroll

def delete_bet(bet_id):
    """
    Supprime un pari du fichier historique avec une gestion d'erreurs am√©lior√©e
    
    Args:
        bet_id: Identifiant du pari √† supprimer
    
    Returns:
        True si la suppression a r√©ussi, False sinon
    """
    bets_dir = "bets"
    bets_file = os.path.join(bets_dir, "bets.csv")
    
    try:
        if not os.path.exists(bets_file):
            st.error("Fichier de paris introuvable.")
            return False
        
        # Charger le fichier
        bets_df = pd.read_csv(bets_file)
        
        # V√©rifier si le pari existe
        if bet_id not in bets_df["bet_id"].values:
            st.error(f"Pari #{bet_id} introuvable.")
            return False
        
        # V√©rifier si c'est un pari "ferm√©" (on ne peut pas supprimer des paris d√©j√† r√©gl√©s)
        bet_row = bets_df[bets_df["bet_id"] == bet_id].iloc[0]
        if bet_row["status"] == "closed":
            st.error("Impossible de supprimer un pari d√©j√† r√©gl√©.")
            return False
        
        # R√©cup√©rer les infos du pari pour le message de confirmation
        bet_info = f"{bet_row['pick']} @ {bet_row['odds']} (Mise: {bet_row['stake']}‚Ç¨)"
        
        # Supprimer le pari
        bets_df = bets_df[bets_df["bet_id"] != bet_id]
        bets_df.to_csv(bets_file, index=False)
        
        st.success(f"Pari #{bet_id} ({bet_info}) supprim√© avec succ√®s.")
        return True
    
    except Exception as e:
        st.error(f"Erreur lors de la suppression du pari: {e}")
        return False

def add_manual_bet(event_name, event_date, fighter_red, fighter_blue, pick, odds, stake, model_probability=None, kelly_fraction=None):
    """
    Ajoute un pari manuellement √† l'historique avec une gestion d'erreurs am√©lior√©e
    
    Args:
        event_name: Nom de l'√©v√©nement
        event_date: Date de l'√©v√©nement
        fighter_red: Nom du combattant rouge
        fighter_blue: Nom du combattant bleu
        pick: Combattant sur lequel le pari est plac√©
        odds: Cote du pari
        stake: Montant mis√©
        model_probability: Probabilit√© pr√©dite par le mod√®le (optionnel)
        kelly_fraction: Fraction Kelly utilis√©e (optionnel)
        
    Returns:
        True si l'ajout a r√©ussi, False sinon
    """
    bets_dir = "bets"
    bets_file = os.path.join(bets_dir, "bets.csv")
    
    try:
        # Cr√©er le dossier et le fichier s'ils n'existent pas
        if not os.path.exists(bets_dir):
            os.makedirs(bets_dir)
        
        # Validation des donn√©es
        if not event_name or not fighter_red or not fighter_blue or not pick:
            st.error("Tous les champs texte doivent √™tre remplis.")
            return False
        
        if odds < 1.01:
            st.error("La cote doit √™tre sup√©rieure √† 1.01.")
            return False
        
        if stake <= 0:
            st.error("La mise doit √™tre sup√©rieure √† 0.")
            return False
        
        # Charger le fichier des paris ou en cr√©er un nouveau
        if os.path.exists(bets_file):
            bets_df = pd.read_csv(bets_file)
            # G√©n√©rer un nouveau bet_id
            new_id = 1 if bets_df.empty else bets_df["bet_id"].max() + 1
        else:
            columns = ["bet_id", "date_placed", "event_name", "event_date", 
                    "fighter_red", "fighter_blue", "pick", "odds", 
                    "stake", "kelly_fraction", "model_probability", 
                    "status", "result", "profit", "roi"]
            bets_df = pd.DataFrame(columns=columns)
            new_id = 1
        
        # Formater la date
        if isinstance(event_date, str):
            event_date_str = event_date
        else:
            event_date_str = event_date.strftime("%Y-%m-%d")
        
        # Cr√©er le nouveau pari
        new_bet = pd.DataFrame({
            "bet_id": [new_id],
            "date_placed": [datetime.datetime.now().strftime("%Y-%m-%d")],
            "event_name": [event_name],
            "event_date": [event_date_str],
            "fighter_red": [fighter_red],
            "fighter_blue": [fighter_blue],
            "pick": [pick],
            "odds": [odds],
            "stake": [stake],
            "kelly_fraction": [kelly_fraction if kelly_fraction is not None else "N/A"],
            "model_probability": [model_probability if model_probability is not None else "N/A"],
            "status": ["open"],
            "result": [""],
            "profit": [0],
            "roi": [0]
        })
        
        # Ajouter le pari
        bets_df = pd.concat([bets_df, new_bet], ignore_index=True)
        bets_df.to_csv(bets_file, index=False)
        
        return True
    
    except Exception as e:
        st.error(f"Erreur lors de l'ajout du pari: {e}")
        return False

def get_betting_summary(bets_df):
    """
    G√©n√®re un r√©sum√© des statistiques de paris avec des m√©triques suppl√©mentaires
    
    Args:
        bets_df: DataFrame contenant l'historique des paris
        
    Returns:
        Un dictionnaire avec les statistiques r√©sum√©es
    """
    if bets_df.empty:
        return {
            "total_bets": 0,
            "open_bets": 0,
            "closed_bets": 0,
            "wins": 0,
            "losses": 0,
            "voids": 0,
            "win_rate": 0,
            "total_staked": 0,
            "total_profit": 0,
            "roi": 0,
            "avg_odds": 0,
            "avg_stake": 0,
            "biggest_win": 0,
            "biggest_loss": 0,
            "current_streak": 0,
            "longest_win_streak": 0,
            "current_streak_type": "none"
        }
    
    # Filtrer les paris ferm√©s
    closed_bets = bets_df[bets_df["status"] == "closed"]
    open_bets = bets_df[bets_df["status"] == "open"]
    
    # Nombre de paris
    total_bets = len(bets_df)
    open_bets_count = len(open_bets)
    closed_bets_count = len(closed_bets)
    
    # AM√âLIORATION: V√©rifier si nous avons des paris ferm√©s avant de calculer les m√©triques
    if closed_bets_count == 0:
        return {
            "total_bets": total_bets,
            "open_bets": open_bets_count,
            "closed_bets": 0,
            "wins": 0,
            "losses": 0,
            "voids": 0,
            "win_rate": 0,
            "total_staked": open_bets["stake"].sum() if not open_bets.empty else 0,
            "total_profit": 0,
            "roi": 0,
            "avg_odds": open_bets["odds"].mean() if not open_bets.empty else 0,
            "avg_stake": open_bets["stake"].mean() if not open_bets.empty else 0,
            "biggest_win": 0,
            "biggest_loss": 0,
            "current_streak": 0,
            "longest_win_streak": 0,
            "current_streak_type": "none"
        }
    
    # R√©sultats des paris ferm√©s
    wins = len(closed_bets[closed_bets["result"] == "win"])
    losses = len(closed_bets[closed_bets["result"] == "loss"])
    voids = len(closed_bets[closed_bets["result"] == "void"])
    
    # Taux de r√©ussite
    win_rate = wins / max(wins + losses, 1) * 100
    
    # Montants financiers
    total_staked_closed = closed_bets["stake"].sum()
    total_staked_open = open_bets["stake"].sum() if not open_bets.empty else 0
    total_staked = total_staked_closed + total_staked_open
    total_profit = closed_bets["profit"].sum()
    
    # ROI global
    roi = total_profit / max(total_staked_closed, 1) * 100
    
    # AM√âLIORATION: Nouvelles m√©triques
    avg_odds = closed_bets["odds"].mean()
    avg_stake = closed_bets["stake"].mean()
    
    # Plus gros gain et perte
    biggest_win = closed_bets["profit"].max() if not closed_bets.empty else 0
    biggest_loss = closed_bets["profit"].min() if not closed_bets.empty else 0
    
    # AM√âLIORATION: S√©rie de victoires/d√©faites actuelles
    if not closed_bets.empty:
        # Trier par date pour obtenir les paris dans l'ordre chronologique
        sorted_bets = closed_bets.sort_values(by=["date_placed", "bet_id"])
        results = sorted_bets[sorted_bets["result"].isin(["win", "loss"])]["result"].tolist()
        
        current_streak = 0
        longest_win_streak = 0
        current_streak_type = "none"
        
        if results:
            current_type = results[-1]
            current_streak_type = current_type
            
            # Calculer la s√©rie actuelle
            for result in reversed(results):
                if result == current_type:
                    current_streak += 1
                else:
                    break
            
            # Calculer la plus longue s√©rie de victoires
            temp_streak = 0
            for result in results:
                if result == "win":
                    temp_streak += 1
                    longest_win_streak = max(longest_win_streak, temp_streak)
                else:
                    temp_streak = 0
    else:
        current_streak = 0
        longest_win_streak = 0
        current_streak_type = "none"
    
    return {
        "total_bets": total_bets,
        "open_bets": open_bets_count,
        "closed_bets": closed_bets_count,
        "wins": wins,
        "losses": losses,
        "voids": voids,
        "win_rate": win_rate,
        "total_staked": total_staked,
        "total_profit": total_profit,
        "roi": roi,
        "avg_odds": avg_odds,
        "avg_stake": avg_stake,
        "biggest_win": biggest_win,
        "biggest_loss": biggest_loss,
        "current_streak": current_streak,
        "longest_win_streak": longest_win_streak,
        "current_streak_type": current_streak_type
    }

# PARTIE 4 

# Initialiser l'√©tat de session pour √©viter le rechargement de page
if 'prediction_result' not in st.session_state:
    st.session_state.prediction_result = None
    
if 'upcoming_events' not in st.session_state:
    st.session_state.upcoming_events = None
    
if 'upcoming_events_timestamp' not in st.session_state:
    st.session_state.upcoming_events_timestamp = None
    
if 'upcoming_fights' not in st.session_state:
    st.session_state.upcoming_fights = {}
    
if 'current_tab' not in st.session_state:
    st.session_state.current_tab = "Accueil"

if 'kelly_strategy' not in st.session_state:
    st.session_state.kelly_strategy = "Kelly/4"

# Au d√©but du script, apr√®s les autres initialisations de session_state
if 'saved_bet_events' not in st.session_state:
    st.session_state.saved_bet_events = {}
    
if 'betting_recommendations' not in st.session_state:
    st.session_state.betting_recommendations = {}

# AM√âLIORATION UI: Session state pour l'interface utilisateur
if 'theme_mode' not in st.session_state:
    st.session_state.theme_mode = "dark"

if 'show_loading_welcome' not in st.session_state:
    st.session_state.show_loading_welcome = True

# Au d√©but du script, apr√®s les autres initialisations de session_state
if 'odds_dicts' not in st.session_state:
    st.session_state.odds_dicts = {}

if 'saved_bet_events' not in st.session_state:
    st.session_state.saved_bet_events = {}
    
if 'betting_recommendations' not in st.session_state:
    st.session_state.betting_recommendations = {}

# Charger les donn√©es une seule fois au d√©marrage
# AM√âLIORATION UI: Fonction de chargement avec indicateur de progression
with st.spinner("Chargement des donn√©es de l'application..."):
    app_data = load_app_data()
    if st.session_state.show_loading_welcome:
        # st.balloons()
        st.session_state.show_loading_welcome = False

# FONCTION PRINCIPALE

def main():
    # AM√âLIORATION UI: Titre principal avec effet shadow et animation
    st.markdown('<div class="main-title section-fade-in">ü•ä Pr√©dicteur de Combats UFC ü•ä</div>', unsafe_allow_html=True)
    st.markdown('<div class="sub-title">Analysez et pr√©disez l\'issue des affrontements avec intelligence</div>', unsafe_allow_html=True)
    
    # AM√âLIORATION UI: Tabs modernis√©s avec ic√¥nes
    tabs = st.tabs([
        "üè† Accueil", 
        "üéØ Pr√©diction", 
        "üóìÔ∏è √âv√©nements √† venir", 
        "üí∞ Gestion de Bankroll", 
        "üìä Historique & Performance"
    ])
    
    # Onglet d'accueil
    with tabs[0]:
        show_welcome_page()
    
    # Onglet de pr√©diction
    with tabs[1]:
        show_prediction_page()
    
    # Onglet des √©v√©nements √† venir
    with tabs[2]:
        show_upcoming_events_page()
    
    # Onglet de gestion de bankroll
    with tabs[3]:
        show_bankroll_page()
    
    # Onglet historique et performance
    with tabs[4]:
        show_history_page()

# PARTIE 5 

def show_welcome_page():
    """Affiche la page d'accueil avec un design moderne et attrayant"""
    
    # AM√âLIORATION UI: En-t√™te de bienvenue anim√© et moderne
    st.markdown("""
    <div class="welcome-header section-fade-in">
        <h1 class="welcome-title">ü•ä UFC Fight Predictor ü•ä</h1>
        <p class="welcome-subtitle">Pr√©disez les r√©sultats des combats UFC avec intelligence artificielle</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Introduction avec un style am√©lior√©
    st.write("""
    L'UFC Fight Predictor est un outil avanc√© qui combine l'analyse statistique et le machine learning 
    pour pr√©dire les r√©sultats des combats de l'UFC. Que vous soyez un fan passionn√© cherchant 
    √† anticiper les r√©sultats ou un parieur √† la recherche d'un avantage analytique, cette application 
    vous fournit des pr√©dictions d√©taill√©es bas√©es sur l'historique et les statistiques des combattants.
    """)
    
    # AM√âLIORATION UI: Fonctionnalit√©s principales avec des cards anim√©es
    st.markdown("## Principales fonctionnalit√©s")
    
    # Afficher les fonctionnalit√©s dans une mise en page √† trois colonnes modernis√©e
    cols = st.columns(3)
    
    with cols[0]:
        st.markdown("""
        <div class="home-card section-fade-in">
            <div class="feature-icon">üéØ</div>
            <h3 class="feature-title">Pr√©dictions pr√©cises</h3>
            <p class="feature-description">Obtenez des pr√©dictions bas√©es sur deux m√©thodes compl√©mentaires: analyse statistique classique et mod√®le de machine learning avanc√©.</p>
        </div>
        """, unsafe_allow_html=True)
    
    with cols[1]:
        st.markdown("""
        <div class="home-card section-fade-in">
            <div class="feature-icon">üìä</div>
            <h3 class="feature-title">Analyses d√©taill√©es</h3>
            <p class="feature-description">Visualisez les forces et faiblesses de chaque combattant avec des graphiques comparatifs et des statistiques pertinentes.</p>
        </div>
        """, unsafe_allow_html=True)
    
    with cols[2]:
        st.markdown("""
        <div class="home-card section-fade-in">
            <div class="feature-icon">üí∞</div>
            <h3 class="feature-title">Conseils de paris</h3>
            <p class="feature-description">Recevez des recommandations de paris bas√©es sur l'analyse des cotes et la gestion optimale de votre bankroll avec la m√©thode Kelly.</p>
        </div>
        """, unsafe_allow_html=True)
    
    # AM√âLIORATION UI: Instructions d'utilisation modernis√©es
    st.markdown("## Comment utiliser l'application")
    
    # AM√âLIORATION UI: Utiliser des colonnes pour une meilleure organisation
    how_to_cols = st.columns(2)
    
    with how_to_cols[0]:
        st.markdown("""
        ### √âtapes essentielles
        
        1. **Onglet Pr√©diction**: S√©lectionnez deux combattants pour obtenir une analyse compl√®te et une pr√©diction du r√©sultat du combat
        
        2. **Onglet √âv√©nements √† venir**: Consultez les prochains combats UFC avec des pr√©dictions automatiques
        
        3. **Onglet Gestion de Bankroll**: Suivez vos paris et g√©rez votre bankroll pour optimiser vos gains
        
        4. **Onglet Historique & Performance**: Analysez vos performances de paris pass√©s
        """)
        
    with how_to_cols[1]:
        # AM√âLIORATION UI: Statut du mod√®le ML
        ml_available = app_data["ml_model"] is not None
        
        if ml_available:
            st.markdown("""
            <div style="background: linear-gradient(145deg, rgba(76, 175, 80, 0.1) 0%, rgba(56, 142, 60, 0.1) 100%); 
                        padding: 20px; border-radius: 12px; margin: 15px 0; border-left: 3px solid #4CAF50;">
                <h3 style="color: #4CAF50; margin-top: 0;">‚úÖ Mod√®le ML op√©rationnel</h3>
                <p>Le mod√®le de machine learning a √©t√© correctement charg√© et est pr√™t √† √™tre utilis√© pour des pr√©dictions de haute pr√©cision.</p>
                <p><i>Les pr√©dictions ML sont g√©n√©ralement plus pr√©cises que les pr√©dictions statistiques classiques.</i></p>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown("""
            <div style="background: linear-gradient(145deg, rgba(244, 67, 54, 0.1) 0%, rgba(211, 47, 47, 0.1) 100%); 
                        padding: 20px; border-radius: 12px; margin: 15px 0; border-left: 3px solid #F44336;">
                <h3 style="color: #F44336; margin-top: 0;">‚ö†Ô∏è Mod√®le ML non d√©tect√©</h3>
                <p>Le mod√®le de machine learning n'a pas √©t√© trouv√©. L'application fonctionnera avec la m√©thode de pr√©diction statistique uniquement.</p>
                <p>Pour activer les pr√©dictions par machine learning, assurez-vous que <code>ufc_prediction_model.joblib</code> ou <code>ufc_prediction_model.pkl</code> est pr√©sent dans le r√©pertoire de l'application.</p>
            </div>
            """, unsafe_allow_html=True)
    
    # AM√âLIORATION UI: Disclaimer avec un style moderne
    st.markdown("""
    <div style="background: linear-gradient(145deg, rgba(255, 193, 7, 0.1) 0%, rgba(255, 160, 0, 0.1) 100%);
                padding: 20px; border-radius: 12px; margin-top: 40px; border-left: 3px solid #FFC107;">
        <h3 style="color: #FFC107; margin-top: 0;">‚ö†Ô∏è Avertissement</h3>
        <p>Les pr√©dictions fournies par cette application sont bas√©es sur des mod√®les statistiques et d'apprentissage automatique, mais ne garantissent pas les r√©sultats des combats. Les paris sportifs comportent des risques, et cette application ne doit √™tre utilis√©e qu'√† titre informatif. Pariez de mani√®re responsable.</p>
    </div>
    """, unsafe_allow_html=True)

    # AM√âLIORATION UI: Section des derni√®res mises √† jour
    st.markdown("""
    <div class="divider"></div>
    <h3 style="margin-top: 30px;">üÜï Derni√®res mises √† jour</h3>
    """, unsafe_allow_html=True)
    
    updates = [
        {"date": "Mai 2025", "title": "Interface utilisateur repens√©e", "desc": "Design moderne, navigation am√©lior√©e et meilleure visualisation des donn√©es"},
        {"date": "Avril 2025", "title": "Strat√©gie de paris Kelly optimis√©e", "desc": "Recommandations de paris intelligentes bas√©es sur la m√©thode Kelly"},
        {"date": "Mars 2025", "title": "Suivi des performances", "desc": "Nouvelles m√©triques et graphiques pour analyser vos r√©sultats de paris"}
    ]
    
    for update in updates:
        st.markdown(f"""
        <div style="display: flex; margin-bottom: 15px; align-items: flex-start;">
            <div style="min-width: 100px; font-weight: 500; color: #888;">{update['date']}</div>
            <div>
                <div style="font-weight: 600; margin-bottom: 5px;">{update['title']}</div>
                <div style="color: #aaa; font-size: 0.9rem;">{update['desc']}</div>
            </div>
        </div>
        """, unsafe_allow_html=True)
# PARTIE 6




def show_prediction_page():
    """Interface de pr√©diction am√©lior√©e avec une meilleure organisation"""
    # Section titre 
    st.title("üéØ Pr√©dicteur de Combat")
    st.write("S√©lectionnez deux combattants et obtenez des pr√©dictions pr√©cises")
    
    # Layout √† deux colonnes
    main_cols = st.columns([1, 3])
    
    with main_cols[0]:
        # S√©lection des combattants
        st.subheader("S√©lection des combattants")
        
        # Message d'avertissement sur l'importance de l'ordre des combattants
        st.warning("‚ö†Ô∏è Important : L'ordre des combattants (Rouge/Bleu) influence les pr√©dictions. Traditionnellement, le combattant mieux class√© ou favori est plac√© dans le coin rouge.")
        
        # S√©lection du combattant rouge
        st.subheader("üî¥ Combattant Rouge")
        fighter_a_name = st.selectbox(
            "S√©lectionner combattant rouge",
            options=app_data["fighter_names"],
            key="fighter_a_selectbox"
        )
        
        # S√©lection du combattant bleu (en excluant le combattant rouge)
        st.subheader("üîµ Combattant Bleu")
        fighter_b_options = [name for name in app_data["fighter_names"] if name != fighter_a_name]
        fighter_b_name = st.selectbox(
            "S√©lectionner combattant bleu",
            options=fighter_b_options,
            key="fighter_b_selectbox"
        )
        
        # Options de paris
        st.subheader("Options de paris")

        # Mode de saisie des cotes (manuel ou slider)
        cote_input_mode = st.radio(
            "Mode de saisie des cotes",
            options=["Manuel", "Slider"],
            index=0,  # Manuel par d√©faut
            key="cote_input_mode"
        )
        
        if cote_input_mode == "Manuel":
            odds_a = st.number_input("Cote Rouge", min_value=1.01, value=2.0, step=0.01, format="%.2f", key="odds_a_input_manual")
            odds_b = st.number_input("Cote Bleu", min_value=1.01, value=1.8, step=0.01, format="%.2f", key="odds_b_input_manual")
        else:
            odds_a = st.slider("Cote Rouge", min_value=1.01, max_value=10.0, value=2.0, step=0.05, format="%.2f", key="odds_a_input_slider")
            odds_b = st.slider("Cote Bleu", min_value=1.01, max_value=10.0, value=1.8, step=0.05, format="%.2f", key="odds_b_input_slider")
        
        # Strat√©gie Kelly
        st.subheader("üìà Crit√®res Kelly")
        kelly_strategy = st.selectbox(
            "Strat√©gie Kelly",
            options=["Kelly pur", "Kelly/2", "Kelly/3", "Kelly/4", "Kelly/5", "Kelly/10"],
            index=3,  # Kelly/4 par d√©faut
            key="kelly_strategy_select"
        )
        st.session_state.kelly_strategy = kelly_strategy
        
        # Bankroll actuelle
        st.subheader("üíº Bankroll actuelle")
        st.metric(
            "",
            f"{app_data['current_bankroll']:.2f} ‚Ç¨", 
            delta=None
        )
        
        # Bouton de pr√©diction
        predict_btn = st.button(
            "üîÆ Pr√©dire le combat", 
            type="primary", 
            key="predict_btn", 
            use_container_width=True
        )
    
    with main_cols[1]:
        # R√©cup√©rer les statistiques des combattants s√©lectionn√©s
        fighter_a = app_data["fighters_dict"].get(fighter_a_name)
        fighter_b = app_data["fighters_dict"].get(fighter_b_name)
        
        # V√©rifier si on peut faire une pr√©diction
        if predict_btn and fighter_a and fighter_b:
            if fighter_a_name == fighter_b_name:
                st.error("Veuillez s√©lectionner deux combattants diff√©rents.")
            else:
                # Afficher un spinner pendant le calcul
                with st.spinner("Analyse en cours..."):
                    # Faire les pr√©dictions avec les deux m√©thodes
                    classic_prediction, ml_prediction = predict_both_methods(
                        fighter_a, 
                        fighter_b,
                        odds_a=odds_a,
                        odds_b=odds_b,
                        model=app_data["ml_model"],
                        scaler=app_data["scaler"],
                        feature_names=app_data["feature_names"]
                    )
                    
                    # Stocker les r√©sultats dans la session
                    st.session_state.prediction_result = {
                        'fighter_a': fighter_a,
                        'fighter_b': fighter_b,
                        'classic_prediction': classic_prediction,
                        'ml_prediction': ml_prediction,
                        'odds_a': odds_a,
                        'odds_b': odds_b
                    }
        
        # Afficher les r√©sultats de pr√©diction
        if st.session_state.prediction_result:
            result = st.session_state.prediction_result
            fighter_a = result['fighter_a']
            fighter_b = result['fighter_b']
            classic_prediction = result['classic_prediction']
            ml_prediction = result['ml_prediction']
            odds_a = result['odds_a']
            odds_b = result['odds_b']
            
            # Afficher une vue en t√™te-√†-t√™te des combattants
            st.subheader("Combat")
            col1, col2, col3 = st.columns([2, 1, 2])
            with col1:
                st.write(f"### üî¥ {fighter_a['name']}")
                st.write(f"Record: {fighter_a['wins']}-{fighter_a['losses']}")
            with col2:
                st.write("## VS")
            with col3:
                st.write(f"### üîµ {fighter_b['name']}")
                st.write(f"Record: {fighter_b['wins']}-{fighter_b['losses']}")
            
            # Afficher les r√©sultats des deux pr√©dictions
            st.subheader("üîÆ Pr√©dictions du combat")
            
            # Cr√©er le graphique comparatif des probabilit√©s pour les deux m√©thodes en un seul
            if ml_prediction:
                # Cr√©er un DataFrame pour le graphique comparatif
                proba_data = pd.DataFrame({
                    'Combattant': [fighter_a['name'], fighter_b['name']],
                    'Statistique': [classic_prediction['red_probability'], classic_prediction['blue_probability']],
                    'Machine Learning': [ml_prediction['red_probability'], ml_prediction['blue_probability']]
                })
                
                # Graphique modernis√©
                fig = go.Figure()
                
                # Ajouter les barres pour chaque m√©thode avec un style am√©lior√©
                fig.add_trace(go.Bar(
                    x=proba_data['Combattant'],
                    y=proba_data['Statistique'],
                    name='Pr√©diction Statistique',
                    marker_color='#2196F3',
                    text=[f"{proba:.0%}" for proba in proba_data['Statistique']],
                    textposition='auto',
                    hovertemplate='<b>%{x}</b><br>Probabilit√©: %{y:.1%}<extra></extra>'
                ))
                
                fig.add_trace(go.Bar(
                    x=proba_data['Combattant'],
                    y=proba_data['Machine Learning'],
                    name='Pr√©diction ML',
                    marker_color='#4CAF50',
                    text=[f"{proba:.0%}" for proba in proba_data['Machine Learning']],
                    textposition='auto',
                    hovertemplate='<b>%{x}</b><br>Probabilit√©: %{y:.1%}<extra></extra>'
                ))
                
                # Configurer la mise en page
                fig.update_layout(
                    title=None,
                    xaxis_title=None,
                    yaxis_title="Probabilit√© de victoire",
                    yaxis=dict(
                        range=[0, 1],
                        tickformat='.0%',
                        gridcolor='rgba(255,255,255,0.1)',
                        showgrid=True
                    ),
                    xaxis=dict(
                        gridcolor='rgba(255,255,255,0.1)',
                    ),
                    legend_title=None,
                    height=400,
                    barmode='group',
                    bargap=0.30,
                    bargroupgap=0.1,
                    paper_bgcolor='rgba(0,0,0,0)',
                    plot_bgcolor='rgba(0,0,0,0)',
                    font=dict(color='white'),
                    legend=dict(
                        orientation="h",
                        yanchor="bottom",
                        y=1.02,
                        xanchor="center",
                        x=0.5
                    ),
                    margin=dict(t=50, b=50)
                )
                
                st.plotly_chart(fig, use_container_width=True)
            else:
                # Si seulement la m√©thode statistique est disponible
                # Graphique modernis√© pour la m√©thode unique
                fig = go.Figure()
                fig.add_trace(go.Bar(
                    x=[fighter_a['name'], fighter_b['name']],
                    y=[classic_prediction['red_probability'], classic_prediction['blue_probability']],
                    marker_color=['#E53935', '#1E88E5'],
                    text=[f"{classic_prediction['red_probability']:.0%}", f"{classic_prediction['blue_probability']:.0%}"],
                    textposition='auto',
                    hovertemplate='<b>%{x}</b><br>Probabilit√©: %{y:.1%}<extra></extra>'
                ))
                
                fig.update_layout(
                    title=None,
                    xaxis_title=None,
                    yaxis_title="Probabilit√© de victoire",
                    yaxis=dict(
                        range=[0, 1],
                        tickformat='.0%',
                        gridcolor='rgba(255,255,255,0.1)',
                        showgrid=True
                    ),
                    xaxis=dict(
                        gridcolor='rgba(255,255,255,0.1)',
                    ),
                    height=400,
                    paper_bgcolor='rgba(0,0,0,0)',
                    plot_bgcolor='rgba(0,0,0,0)',
                    font=dict(color='white'),
                    margin=dict(t=50, b=50)
                )
                
                st.plotly_chart(fig, use_container_width=True)
            
            # NOUVELLE SECTION: Affichage am√©lior√© des pr√©dictions
            st.subheader("üìä R√©sultats des pr√©dictions")
            
            # Conteneurs pour les pr√©dictions
            pred_cols = st.columns(2 if ml_prediction else 1)
            
            # Afficher la pr√©diction statistique
            with pred_cols[0]:
                # Cr√©er un conteneur avec bordure pour la pr√©diction statistique
                stat_container = st.container()
                
                with stat_container:
                    st.subheader("Pr√©diction Statistique")
                    
                    # M√©triques pour une meilleure visualisation
                    red_prob = classic_prediction['red_probability']
                    blue_prob = classic_prediction['blue_probability']
                    
                    # Afficher le vainqueur pr√©dit en grand
                    winner_name = classic_prediction['winner_name']
                    st.markdown(f"### Vainqueur pr√©dit: {winner_name}")
                    
                    # Cr√©er deux colonnes pour les probabilit√©s
                    prob_cols = st.columns(2)
                    
                    with prob_cols[0]:
                        # M√©trique pour le combattant rouge
                        st.metric(
                            f"üî¥ {fighter_a['name']}",
                            f"{red_prob:.0%}",
                            delta=None
                        )
                        
                    with prob_cols[1]:
                        # M√©trique pour le combattant bleu
                        st.metric(
                            f"üîµ {fighter_b['name']}",
                            f"{blue_prob:.0%}",
                            delta=None
                        )
                    
                    # Barre de progression pour visualiser les probabilit√©s
                    st.progress(red_prob)
                    
                    # Afficher la confiance
                    confidence = classic_prediction['confidence']
                    if confidence == "√âlev√©":
                        st.success(f"Confiance: {confidence}")
                    else:
                        st.warning(f"Confiance: {confidence}")

            # Afficher la pr√©diction ML si disponible
            if ml_prediction:
                with pred_cols[1]:
                    # Cr√©er un conteneur avec bordure pour la pr√©diction ML
                    ml_container = st.container()
                    
                    with ml_container:
                        st.subheader("Pr√©diction Machine Learning")
                        
                        # M√©triques pour une meilleure visualisation
                        red_prob_ml = ml_prediction['red_probability']
                        blue_prob_ml = ml_prediction['blue_probability']
                        
                        # Afficher le vainqueur pr√©dit en grand
                        winner_name_ml = ml_prediction['winner_name']
                        st.markdown(f"### Vainqueur pr√©dit: {winner_name_ml}")
                        
                        # Cr√©er deux colonnes pour les probabilit√©s
                        prob_cols_ml = st.columns(2)
                        
                        with prob_cols_ml[0]:
                            # M√©trique pour le combattant rouge
                            st.metric(
                                f"üî¥ {fighter_a['name']}",
                                f"{red_prob_ml:.0%}",
                                delta=None
                            )
                            
                        with prob_cols_ml[1]:
                            # M√©trique pour le combattant bleu
                            st.metric(
                                f"üîµ {fighter_b['name']}",
                                f"{blue_prob_ml:.0%}",
                                delta=None
                            )
                        
                        # Barre de progression pour visualiser les probabilit√©s
                        st.progress(red_prob_ml)
                        
                        # Afficher la confiance
                        confidence_ml = ml_prediction['confidence']
                        if confidence_ml == "√âlev√©":
                            st.success(f"Confiance: {confidence_ml}")
                        else:
                            st.warning(f"Confiance: {confidence_ml}")

            # Message de convergence/divergence si les deux m√©thodes sont disponibles
            if ml_prediction:
                same_prediction = classic_prediction['prediction'] == ml_prediction['prediction']
                if same_prediction:
                    st.success("‚úÖ Les deux m√©thodes pr√©disent le m√™me vainqueur!")
                else:
                    st.warning("‚ö†Ô∏è Les m√©thodes pr√©disent des vainqueurs diff√©rents!")
                
            # PARTIE 7: Analyse Kelly et recommandations de paris
            if ml_prediction:
                st.divider()
                st.subheader("üìä Analyse Kelly et recommandations de paris")
                
                # Obtenir la fraction Kelly s√©lectionn√©e
                kelly_fractions = {
                    "Kelly pur": 1,
                    "Kelly/2": 2,
                    "Kelly/3": 3, 
                    "Kelly/4": 4,
                    "Kelly/5": 5,
                    "Kelly/10": 10
                }
                selected_fraction = kelly_fractions[st.session_state.kelly_strategy]
                
                # D√©termine le combattant qui a la plus forte valeur attendue
                if ml_prediction['prediction'] == 'Red':
                    best_fighter = fighter_a['name']
                    best_odds = odds_a
                    best_prob = ml_prediction['red_probability']
                else:
                    best_fighter = fighter_b['name']
                    best_odds = odds_b
                    best_prob = ml_prediction['blue_probability']
                
                # Calculer les recommandations Kelly pour le combattant favori selon le ML
                kelly_amount = calculate_kelly(best_prob, best_odds, app_data["current_bankroll"], selected_fraction)
                
                # Section Kelly modernis√©e avec composants Streamlit natifs
                st.write("### Recommandation de mise avec la m√©thode " + st.session_state.kelly_strategy)
                st.write("Pour maximiser votre ROI sur le long terme, la m√©thode Kelly recommande:")
                
                # Cr√©er un DataFrame au lieu d'une table HTML
                kelly_data = pd.DataFrame({
                    "Combattant": [best_fighter],
                    "Probabilit√© ML": [f"{best_prob:.0%}"],
                    "Cote": [f"{best_odds:.2f}"],
                    "Mise recommand√©e": [f"{kelly_amount:.2f} ‚Ç¨"],
                    "% de bankroll": [f"{(kelly_amount/app_data['current_bankroll']*100):.1f}%"],
                    "Gain potentiel": [f"{kelly_amount * (best_odds-1):.2f} ‚Ç¨"]
                })
                
                # Afficher le DataFrame avec style
                st.dataframe(kelly_data, use_container_width=True, hide_index=True)
                
                st.caption("Le crit√®re de Kelly d√©termine la mise optimale en fonction de votre avantage et de votre bankroll totale.")
                
                # Section pour placer un pari modernis√©e
                st.subheader(f"Placer un pari sur {best_fighter}")
                
                # Colonnes pour les informations du pari
                bet_cols = st.columns(2)
                
                with bet_cols[0]:
                    # Nom de l'√©v√©nement
                    event_name = st.text_input("Nom de l'√©v√©nement", value="UFC Fight Night", key="event_name_input")
                    
                    # Date de l'√©v√©nement
                    event_date = st.date_input("Date de l'√©v√©nement", value=datetime.datetime.now(), key="event_date_input")
                
                with bet_cols[1]:
                    # Montant √† miser
                    bet_amount = st.number_input(
                        "Montant √† miser (‚Ç¨)",
                        min_value=0.0,
                        max_value=float(app_data["current_bankroll"]),
                        value=float(kelly_amount),
                        step=5.0,
                        format="%.2f",
                        key="bet_amount_input"
                    )
                    
                    # Utiliser la mise Kelly recommand√©e
                    use_kelly = st.checkbox("Utiliser la mise Kelly recommand√©e", value=True, key="use_kelly_checkbox")
                    if use_kelly:
                        bet_amount = kelly_amount
                
                # Afficher les d√©tails du pari avec un design attractif
                pot_gain = bet_amount * (best_odds-1)
                roi_pct = (pot_gain / bet_amount) * 100 if bet_amount > 0 else 0
                
                # Cr√©er 3 colonnes pour les m√©triques
                bet_metrics_cols = st.columns(3)
                with bet_metrics_cols[0]:
                    st.metric("Mise", f"{bet_amount:.2f}‚Ç¨")
                with bet_metrics_cols[1]:
                    st.metric("Gain potentiel", f"{pot_gain:.2f}‚Ç¨")
                with bet_metrics_cols[2]:
                    st.metric("ROI", f"{roi_pct:.1f}%")
                
                # Bouton pour placer le pari
                if st.button("üí∞ Placer ce pari", type="primary", key="place_bet_btn", use_container_width=True):
                    if bet_amount > app_data["current_bankroll"]:
                        st.error(f"Montant du pari ({bet_amount:.2f}‚Ç¨) sup√©rieur √† votre bankroll actuelle ({app_data['current_bankroll']:.2f}‚Ç¨)")
                    elif bet_amount <= 0:
                        st.error("Le montant du pari doit √™tre sup√©rieur √† 0‚Ç¨")
                    else:
                        # Animation de chargement
                        with st.spinner("Enregistrement du pari..."):
                            # Ajouter le pari √† l'historique
                            if add_manual_bet(
                                event_name=event_name,
                                event_date=event_date,
                                fighter_red=fighter_a['name'],
                                fighter_blue=fighter_b['name'],
                                pick=best_fighter,
                                odds=best_odds,
                                stake=bet_amount,
                                model_probability=best_prob,
                                kelly_fraction=selected_fraction
                            ):
                                # Message de succ√®s avec d√©tails
                                st.success(f"Pari enregistr√© avec succ√®s! {bet_amount:.2f}‚Ç¨ sur {best_fighter} @ {best_odds:.2f}")
                                
                                # Ajouter un petit d√©lai pour l'animation
                                time.sleep(0.5)
                                
                                # Afficher une confirmation
                                st.info(f"Vous avez pari√© {bet_amount:.2f}‚Ç¨ sur {best_fighter}. Gain potentiel: {pot_gain:.2f}‚Ç¨ (ROI: {roi_pct:.1f}%)")
                                st.write("Vous pouvez suivre ce pari dans l'onglet 'Gestion de Bankroll'")
                            else:
                                st.error("Erreur lors de l'enregistrement du pari.")
            
            # Analyse des paris (utiliser les deux m√©thodes si disponibles)
            if 'betting' in classic_prediction:
                st.divider()
                st.subheader("üí∞ Analyse des paris")
                st.write("Comparaison des cotes du march√© avec nos probabilit√©s pr√©dites")
                
                # Analyse des paris pour les deux combattants avec un design modernis√©
                col1, col2 = st.columns(2)
                
                # Combattant Rouge
                with col1:
                    st.write(f"### üî¥ {fighter_a['name']}")
                    
                    # Donn√©es de paris
                    betting_classic = classic_prediction['betting']
                    betting_ml = ml_prediction.get('betting') if ml_prediction else None
                    
                    # Cr√©er une table pour les donn√©es du combattant rouge
                    st.write("**Donn√©es de paris:**")
                    red_data = [
                        ["Cote du march√©", f"{betting_classic['odds_red']:.2f}"],
                        ["Probabilit√© implicite", f"{betting_classic['implied_prob_red']:.0%}"],
                        ["Probabilit√© statistique", f"{classic_prediction['red_probability']:.0%}"]
                    ]
                    
                    if betting_ml:
                        red_data.append(["Probabilit√© ML", f"{ml_prediction['red_probability']:.0%}"])
                    
                    red_data.extend([
                        ["Avantage statistique", f"{betting_classic['edge_red']*100:.1f}%"],
                        ["Valeur esp√©r√©e", f"{betting_classic['ev_red']*100:.1f}%"]
                    ])
                    
                    # Afficher les donn√©es sous forme de tableau
                    red_df = pd.DataFrame(red_data, columns=["M√©trique", "Valeur"])
                    st.dataframe(red_df, hide_index=True, use_container_width=True)
                    
                    # Afficher les recommandations avec des composants Streamlit natifs
                    st.write("**Recommandation statistique:**")
                    if betting_classic['recommendation_red'] == "Favorable":
                        st.success("Favorable")
                    elif betting_classic['recommendation_red'] == "Neutre":
                        st.info("Neutre")
                    else:
                        st.error("D√©favorable")
                    
                    if betting_ml:
                        st.write("**Recommandation ML:**")
                        if betting_ml['recommendation_red'] == "Favorable":
                            st.success("Favorable")
                        elif betting_ml['recommendation_red'] == "Neutre":
                            st.info("Neutre")
                        else:
                            st.error("D√©favorable")
                    
                    # Bouton pour parier sur le combattant rouge
                    if st.button(f"Parier sur {fighter_a['name']}", key="bet_on_red_btn", use_container_width=True):
                        # Calculer le montant Kelly pour ce combattant
                        red_kelly = calculate_kelly(
                            ml_prediction['red_probability'] if ml_prediction else classic_prediction['red_probability'],
                            odds_a,
                            app_data["current_bankroll"],
                            kelly_fractions[st.session_state.kelly_strategy]
                        )
                        
                        # Stocker dans la session pour pr√©charger le formulaire
                        st.session_state.temp_bet = {
                            "fighter": fighter_a['name'],
                            "odds": odds_a,
                            "kelly_amount": red_kelly,
                            "probability": ml_prediction['red_probability'] if ml_prediction else classic_prediction['red_probability']
                        }
                        
                        # Afficher le formulaire pour parier
                        show_bet_form(
                            fighter_a['name'], 
                            fighter_b['name'], 
                            fighter_a['name'], 
                            odds_a, 
                            red_kelly,
                            ml_prediction['red_probability'] if ml_prediction else classic_prediction['red_probability'],
                            kelly_fractions[st.session_state.kelly_strategy]
                        )
                
                # Combattant Bleu
                with col2:
                    st.write(f"### üîµ {fighter_b['name']}")
                    
                    # Cr√©er une table pour les donn√©es du combattant bleu
                    st.write("**Donn√©es de paris:**")
                    blue_data = [
                        ["Cote du march√©", f"{betting_classic['odds_blue']:.2f}"],
                        ["Probabilit√© implicite", f"{betting_classic['implied_prob_blue']:.0%}"],
                        ["Probabilit√© statistique", f"{classic_prediction['blue_probability']:.0%}"]
                    ]
                    
                    if betting_ml:
                        blue_data.append(["Probabilit√© ML", f"{ml_prediction['blue_probability']:.0%}"])
                    
                    blue_data.extend([
                        ["Avantage statistique", f"{betting_classic['edge_blue']*100:.1f}%"],
                        ["Valeur esp√©r√©e", f"{betting_classic['ev_blue']*100:.1f}%"]
                    ])
                    
                    # Afficher les donn√©es sous forme de tableau
                    blue_df = pd.DataFrame(blue_data, columns=["M√©trique", "Valeur"])
                    st.dataframe(blue_df, hide_index=True, use_container_width=True)
                    
                    # Afficher les recommandations avec des composants Streamlit natifs
                    st.write("**Recommandation statistique:**")
                    if betting_classic['recommendation_blue'] == "Favorable":
                        st.success("Favorable")
                    elif betting_classic['recommendation_blue'] == "Neutre":
                        st.info("Neutre")
                    else:
                        st.error("D√©favorable")
                    
                    if betting_ml:
                        st.write("**Recommandation ML:**")
                        if betting_ml['recommendation_blue'] == "Favorable":
                            st.success("Favorable")
                        elif betting_ml['recommendation_blue'] == "Neutre":
                            st.info("Neutre")
                        else:
                            st.error("D√©favorable")
                    
                    # Bouton pour parier sur le combattant bleu
                    if st.button(f"Parier sur {fighter_b['name']}", key="bet_on_blue_btn", use_container_width=True):
                        # Calculer le montant Kelly pour ce combattant
                        blue_kelly = calculate_kelly(
                            ml_prediction['blue_probability'] if ml_prediction else classic_prediction['blue_probability'],
                            odds_b,
                            app_data["current_bankroll"],
                            kelly_fractions[st.session_state.kelly_strategy]
                        )
                        
                        # Stocker dans la session pour pr√©charger le formulaire
                        st.session_state.temp_bet = {
                            "fighter": fighter_b['name'],
                            "odds": odds_b,
                            "kelly_amount": blue_kelly,
                            "probability": ml_prediction['blue_probability'] if ml_prediction else classic_prediction['blue_probability']
                        }
                        
                        # Afficher le formulaire pour parier
                        show_bet_form(
                            fighter_a['name'], 
                            fighter_b['name'], 
                            fighter_b['name'], 
                            odds_b, 
                            blue_kelly,
                            ml_prediction['blue_probability'] if ml_prediction else classic_prediction['blue_probability'],
                            kelly_fractions[st.session_state.kelly_strategy]
                        )
                        
            # PARTIE 8: Nouvel onglet avec les statistiques et graphiques
            stats_tabs = st.tabs(["üîç Statistiques", "üìä Graphiques", "üìù Notes"])
            
            # Onglet des statistiques
            with stats_tabs[0]:
                # Afficher les statistiques comparatives
                st.subheader("üìä Statistiques comparatives")
                
                # Cr√©ation du DataFrame des statistiques comparatives
                stats_df = create_stats_comparison_df(fighter_a, fighter_b)
                
                # Appliquer un style conditionnel pour mettre en √©vidence les avantages
                def highlight_advantage(row):
                    styles = [''] * len(row)
                    advantage = row['Avantage']
                    
                    if advantage == fighter_a['name']:
                        styles[1] = 'background-color: rgba(229, 57, 53, 0.2); font-weight: bold;'
                    elif advantage == fighter_b['name']:
                        styles[2] = 'background-color: rgba(30, 136, 229, 0.2); font-weight: bold;'
                    
                    return styles
                
                # Appliquer le style et afficher avec un design plus moderne
                styled_df = stats_df.style.apply(highlight_advantage, axis=1)
                st.dataframe(
                    styled_df, 
                    use_container_width=True, 
                    height=500,
                    hide_index=True,
                )
            
            # Onglet des visualisations
            with stats_tabs[1]:
                st.subheader("üìà Visualisations des performances")
                
                # Disposer les graphiques en deux colonnes
                col1, col2 = st.columns(2)
                
                with col1:
                    # Graphique radar
                    radar_fig = create_radar_chart(fighter_a, fighter_b)
                    st.plotly_chart(radar_fig, use_container_width=True, height=400)
                
                with col2:
                    # Graphique des forces et faiblesses
                    strengths_fig = create_strengths_weaknesses_chart(fighter_a, fighter_b)
                    st.plotly_chart(strengths_fig, use_container_width=True, height=400)
                
                # Style de combat
                style_fig = create_style_analysis_chart(fighter_a, fighter_b)
                st.plotly_chart(style_fig, use_container_width=True)
            
            # Onglet des notes
            with stats_tabs[2]:
                st.subheader("üìù Notes d'analyse")
                
                # Analyse textuelle g√©n√©r√©e
                # D√©terminer les styles de combat
                a_striking = fighter_a['SLpM'] * fighter_a['sig_str_acc']
                a_ground = fighter_a['td_avg'] * fighter_a['td_acc'] + fighter_a['sub_avg']
                a_style = "striker" if a_striking > a_ground * 1.5 else "grappler" if a_ground > a_striking * 1.5 else "√©quilibr√©"
                
                b_striking = fighter_b['SLpM'] * fighter_b['sig_str_acc']
                b_ground = fighter_b['td_avg'] * fighter_b['td_acc'] + fighter_b['sub_avg']
                b_style = "striker" if b_striking > b_ground * 1.5 else "grappler" if b_ground > b_striking * 1.5 else "√©quilibr√©"
                
                # Exp√©rience
                a_exp = fighter_a['wins'] + fighter_a['losses']
                b_exp = fighter_b['wins'] + fighter_b['losses']
                exp_diff = abs(a_exp - b_exp)
                exp_advantage = f"{fighter_a['name']} a {exp_diff} combats de plus" if a_exp > b_exp else f"{fighter_b['name']} a {exp_diff} combats de plus" if b_exp > a_exp else "Les deux combattants ont le m√™me niveau d'exp√©rience"
                
                # Forme r√©cente (√† calculer √† partir du record)
                a_winrate = fighter_a['wins'] / max(a_exp, 1)
                b_winrate = fighter_b['wins'] / max(b_exp, 1)
                
                # Stats physiques
                height_diff = abs(fighter_a['height'] - fighter_b['height'])
                reach_diff = abs(fighter_a['reach'] - fighter_b['reach'])
                
                physical_advantage = ""
                if fighter_a['height'] > fighter_b['height'] and fighter_a['reach'] > fighter_b['reach']:
                    physical_advantage = f"{fighter_a['name']} a un avantage de taille ({height_diff:.1f} cm) et d'allonge ({reach_diff:.1f} cm)"
                elif fighter_b['height'] > fighter_a['height'] and fighter_b['reach'] > fighter_a['reach']:
                    physical_advantage = f"{fighter_b['name']} a un avantage de taille ({height_diff:.1f} cm) et d'allonge ({reach_diff:.1f} cm)"
                else:
                    physical_advantage = "Les avantages physiques sont partag√©s entre les deux combattants"
                
                # Profil des combattants
                st.write("#### Profil des combattants")
                st.write(f"**{fighter_a['name']}** est un combattant de style **{a_style}** avec un taux de victoires de **{a_winrate:.0%}** sur {a_exp} combats.")
                st.write(f"**{fighter_b['name']}** est un combattant de style **{b_style}** avec un taux de victoires de **{b_winrate:.0%}** sur {b_exp} combats.")
                
                # Facteurs cl√©s
                st.write("#### Facteurs cl√©s du combat")
                st.write(f"* **Exp√©rience:** {exp_advantage}.")
                st.write(f"* **Avantage physique:** {physical_advantage}.")
                st.write(f"* **Dynamique du combat:** {fighter_a['name']} donne {fighter_a['SLpM']:.1f} coups par minute contre {fighter_b['SLpM']:.1f} pour {fighter_b['name']}.")
                st.write(f"* **Facteur sol:** {fighter_a['name']} tente {fighter_a['td_avg']:.1f} takedowns par combat contre {fighter_b['td_avg']:.1f} pour {fighter_b['name']}.")
                
                # Points √† surveiller
                st.write("#### Points √† surveiller")
                st.write(f"Ce combat pr√©sente un affrontement de styles {a_style if a_style != b_style else 'similaires'}, o√π {fighter_a['name'] if a_winrate > b_winrate else fighter_b['name']} a l'avantage en termes d'historique de victoires.")
                
                if a_style != b_style:
                    st.write(f"Le vainqueur sera probablement celui qui pourra imposer sa strat√©gie pr√©f√©r√©e: {fighter_a['name']} voudra maintenir le combat {a_style}, tandis que {fighter_b['name']} cherchera √† l'amener vers une dynamique {b_style}.")
                else:
                    st.write("Les deux combattants auront des approches similaires, donc la technique et les adaptations en cours de combat seront d√©terminantes.")
        else:
            # Message d'accueil
            st.info("Bienvenue sur le Pr√©dicteur de Combats UFC! S√©lectionnez deux combattants et cliquez sur 'Pr√©dire le combat' pour obtenir une analyse compl√®te.")
            
            # Message d'information
            st.warning("‚ö†Ô∏è L'ordre des combattants est important! La position des combattants (coin Rouge vs Bleu) peut influencer significativement les pr√©dictions. Traditionnellement, le combattant favori ou mieux class√© est plac√© dans le coin rouge.")



def show_prediction_page():
    """Interface de pr√©diction am√©lior√©e avec une meilleure organisation"""
    # Section titre 
    st.title("üéØ Pr√©dicteur de Combat")
    st.write("S√©lectionnez deux combattants et obtenez des pr√©dictions pr√©cises")
    
    # Layout √† deux colonnes
    main_cols = st.columns([1, 3])
    
    with main_cols[0]:
        # S√©lection des combattants
        st.subheader("S√©lection des combattants")
        
        # Message d'avertissement sur l'importance de l'ordre des combattants
        st.warning("‚ö†Ô∏è Important : L'ordre des combattants (Rouge/Bleu) influence les pr√©dictions. Traditionnellement, le combattant mieux class√© ou favori est plac√© dans le coin rouge.")
        
        # S√©lection du combattant rouge
        st.subheader("üî¥ Combattant Rouge")
        fighter_a_name = st.selectbox(
            "S√©lectionner combattant rouge",
            options=app_data["fighter_names"],
            key="fighter_a_selectbox"
        )
        
        # S√©lection du combattant bleu (en excluant le combattant rouge)
        st.subheader("üîµ Combattant Bleu")
        fighter_b_options = [name for name in app_data["fighter_names"] if name != fighter_a_name]
        fighter_b_name = st.selectbox(
            "S√©lectionner combattant bleu",
            options=fighter_b_options,
            key="fighter_b_selectbox"
        )
        
        # Options de paris
        st.subheader("Options de paris")

        # Mode de saisie des cotes (manuel ou slider)
        cote_input_mode = st.radio(
            "Mode de saisie des cotes",
            options=["Manuel", "Slider"],
            index=0,  # Manuel par d√©faut
            key="cote_input_mode"
        )
        
        if cote_input_mode == "Manuel":
            odds_a = st.number_input("Cote Rouge", min_value=1.01, value=2.0, step=0.01, format="%.2f", key="odds_a_input_manual")
            odds_b = st.number_input("Cote Bleu", min_value=1.01, value=1.8, step=0.01, format="%.2f", key="odds_b_input_manual")
        else:
            odds_a = st.slider("Cote Rouge", min_value=1.01, max_value=10.0, value=2.0, step=0.05, format="%.2f", key="odds_a_input_slider")
            odds_b = st.slider("Cote Bleu", min_value=1.01, max_value=10.0, value=1.8, step=0.05, format="%.2f", key="odds_b_input_slider")
        
        # Strat√©gie Kelly
        st.subheader("üìà Crit√®res Kelly")
        kelly_strategy = st.selectbox(
            "Strat√©gie Kelly",
            options=["Kelly pur", "Kelly/2", "Kelly/3", "Kelly/4", "Kelly/5", "Kelly/10"],
            index=3,  # Kelly/4 par d√©faut
            key="kelly_strategy_select"
        )
        st.session_state.kelly_strategy = kelly_strategy
        
        # Bankroll actuelle
        st.subheader("üíº Bankroll actuelle")
        st.metric(
            "",
            f"{app_data['current_bankroll']:.2f} ‚Ç¨", 
            delta=None
        )
        
        # Bouton de pr√©diction
        predict_btn = st.button(
            "üîÆ Pr√©dire le combat", 
            type="primary", 
            key="predict_btn", 
            use_container_width=True
        )
    
    with main_cols[1]:
        # R√©cup√©rer les statistiques des combattants s√©lectionn√©s
        fighter_a = app_data["fighters_dict"].get(fighter_a_name)
        fighter_b = app_data["fighters_dict"].get(fighter_b_name)
        
        # V√©rifier si on peut faire une pr√©diction
        if predict_btn and fighter_a and fighter_b:
            if fighter_a_name == fighter_b_name:
                st.error("Veuillez s√©lectionner deux combattants diff√©rents.")
            else:
                # Afficher un spinner pendant le calcul
                with st.spinner("Analyse en cours..."):
                    # Faire les pr√©dictions avec les deux m√©thodes
                    classic_prediction, ml_prediction = predict_both_methods(
                        fighter_a, 
                        fighter_b,
                        odds_a=odds_a,
                        odds_b=odds_b,
                        model=app_data["ml_model"],
                        scaler=app_data["scaler"],
                        feature_names=app_data["feature_names"]
                    )
                    
                    # Stocker les r√©sultats dans la session
                    st.session_state.prediction_result = {
                        'fighter_a': fighter_a,
                        'fighter_b': fighter_b,
                        'classic_prediction': classic_prediction,
                        'ml_prediction': ml_prediction,
                        'odds_a': odds_a,
                        'odds_b': odds_b
                    }
        
        # Afficher les r√©sultats de pr√©diction
        if st.session_state.prediction_result:
            result = st.session_state.prediction_result
            fighter_a = result['fighter_a']
            fighter_b = result['fighter_b']
            classic_prediction = result['classic_prediction']
            ml_prediction = result['ml_prediction']
            odds_a = result['odds_a']
            odds_b = result['odds_b']
            
            # Afficher une vue en t√™te-√†-t√™te des combattants
            st.subheader("Combat")
            col1, col2, col3 = st.columns([2, 1, 2])
            with col1:
                st.write(f"### üî¥ {fighter_a['name']}")
                st.write(f"Record: {fighter_a['wins']}-{fighter_a['losses']}")
            with col2:
                st.write("## VS")
            with col3:
                st.write(f"### üîµ {fighter_b['name']}")
                st.write(f"Record: {fighter_b['wins']}-{fighter_b['losses']}")
            
            # Afficher les r√©sultats des deux pr√©dictions
            st.subheader("üîÆ Pr√©dictions du combat")
            
            # Cr√©er le graphique comparatif des probabilit√©s pour les deux m√©thodes en un seul
            if ml_prediction:
                # Cr√©er un DataFrame pour le graphique comparatif
                proba_data = pd.DataFrame({
                    'Combattant': [fighter_a['name'], fighter_b['name']],
                    'Statistique': [classic_prediction['red_probability'], classic_prediction['blue_probability']],
                    'Machine Learning': [ml_prediction['red_probability'], ml_prediction['blue_probability']]
                })
                
                # Graphique modernis√©
                fig = go.Figure()
                
                # Ajouter les barres pour chaque m√©thode avec un style am√©lior√©
                fig.add_trace(go.Bar(
                    x=proba_data['Combattant'],
                    y=proba_data['Statistique'],
                    name='Pr√©diction Statistique',
                    marker_color='#2196F3',
                    text=[f"{proba:.0%}" for proba in proba_data['Statistique']],
                    textposition='auto',
                    hovertemplate='<b>%{x}</b><br>Probabilit√©: %{y:.1%}<extra></extra>'
                ))
                
                fig.add_trace(go.Bar(
                    x=proba_data['Combattant'],
                    y=proba_data['Machine Learning'],
                    name='Pr√©diction ML',
                    marker_color='#4CAF50',
                    text=[f"{proba:.0%}" for proba in proba_data['Machine Learning']],
                    textposition='auto',
                    hovertemplate='<b>%{x}</b><br>Probabilit√©: %{y:.1%}<extra></extra>'
                ))
                
                # Configurer la mise en page
                fig.update_layout(
                    title=None,
                    xaxis_title=None,
                    yaxis_title="Probabilit√© de victoire",
                    yaxis=dict(
                        range=[0, 1],
                        tickformat='.0%',
                        gridcolor='rgba(255,255,255,0.1)',
                        showgrid=True
                    ),
                    xaxis=dict(
                        gridcolor='rgba(255,255,255,0.1)',
                    ),
                    legend_title=None,
                    height=400,
                    barmode='group',
                    bargap=0.30,
                    bargroupgap=0.1,
                    paper_bgcolor='rgba(0,0,0,0)',
                    plot_bgcolor='rgba(0,0,0,0)',
                    font=dict(color='white'),
                    legend=dict(
                        orientation="h",
                        yanchor="bottom",
                        y=1.02,
                        xanchor="center",
                        x=0.5
                    ),
                    margin=dict(t=50, b=50)
                )
                
                st.plotly_chart(fig, use_container_width=True)
            else:
                # Si seulement la m√©thode statistique est disponible
                # Graphique modernis√© pour la m√©thode unique
                fig = go.Figure()
                fig.add_trace(go.Bar(
                    x=[fighter_a['name'], fighter_b['name']],
                    y=[classic_prediction['red_probability'], classic_prediction['blue_probability']],
                    marker_color=['#E53935', '#1E88E5'],
                    text=[f"{classic_prediction['red_probability']:.0%}", f"{classic_prediction['blue_probability']:.0%}"],
                    textposition='auto',
                    hovertemplate='<b>%{x}</b><br>Probabilit√©: %{y:.1%}<extra></extra>'
                ))
                
                fig.update_layout(
                    title=None,
                    xaxis_title=None,
                    yaxis_title="Probabilit√© de victoire",
                    yaxis=dict(
                        range=[0, 1],
                        tickformat='.0%',
                        gridcolor='rgba(255,255,255,0.1)',
                        showgrid=True
                    ),
                    xaxis=dict(
                        gridcolor='rgba(255,255,255,0.1)',
                    ),
                    height=400,
                    paper_bgcolor='rgba(0,0,0,0)',
                    plot_bgcolor='rgba(0,0,0,0)',
                    font=dict(color='white'),
                    margin=dict(t=50, b=50)
                )
                
                st.plotly_chart(fig, use_container_width=True)
            
            # NOUVELLE SECTION: Affichage am√©lior√© des pr√©dictions
            st.subheader("üìä R√©sultats des pr√©dictions")
            
            # Utiliser un layout alternatif pour √©viter le nidification de colonnes
            pred_cols = st.columns(2 if ml_prediction else 1)
            
            # Pr√©diction Statistique (premi√®re colonne)
            with pred_cols[0]:
                st.subheader("Pr√©diction Statistique")
                
                # Vainqueur pr√©dit avec mise en √©vidence am√©lior√©e
                winner_name = classic_prediction['winner_name']
                is_red_winner = classic_prediction['prediction'] == 'Red'
                
                # AM√âLIORATION: Vainqueur pr√©dit en TR√àS GRAND
                winner_color = "#E53935" if is_red_winner else "#1E88E5"
                st.markdown("### Vainqueur pr√©dit:")
                
                # Utiliser Markdown pour afficher le vainqueur en tr√®s grand et en couleur
                st.markdown(f"<h1 style='color: {winner_color}; font-size: 36px; text-align: center;'>{'üî¥' if is_red_winner else 'üîµ'} {winner_name}</h1>", unsafe_allow_html=True)
                
                # Les probabilit√©s pour chaque combattant
                red_prob = classic_prediction['red_probability']
                blue_prob = classic_prediction['blue_probability']
                
                # Afficher les m√©triques avec les valeurs originales
                st.metric(f"üî¥ {fighter_a['name']}", f"{red_prob:.0%}")
                st.metric(f"üîµ {fighter_b['name']}", f"{blue_prob:.0%}")
                
                # AM√âLIORATION: Toujours afficher une barre de progression significative
                if red_prob < 0 or red_prob > 1 or blue_prob < 0 or blue_prob > 1:
                    # Message expliquant l'adaptation mais plus concis
                    st.caption(f"Note: Probabilit√©s originales: {red_prob:.0%} vs {blue_prob:.0%}")
                    
                    # Adaptation de la visualisation pour probabilit√©s extr√™mes
                    if is_red_winner:
                        # Vainqueur rouge - montrer une barre √† 80% (dominance claire mais pas totale)
                        progress_value = 0.8
                    else:
                        # Vainqueur bleu - montrer une barre √† 20% (dominance claire du bleu)
                        progress_value = 0.2
                else:
                    # Probabilit√©s normales, utilisation directe
                    progress_value = red_prob
                
                # Toujours afficher la barre de progression
                st.progress(progress_value)
                
                # Afficher la confiance
                confidence = classic_prediction['confidence']
                if confidence == "√âlev√©":
                    st.success(f"Confiance: {confidence}")
                else:
                    st.warning(f"Confiance: {confidence}")
            
            # Pr√©diction ML (deuxi√®me colonne, si disponible)
            if ml_prediction:
                with pred_cols[1]:
                    st.subheader("Pr√©diction Machine Learning")
                    
                    # Vainqueur pr√©dit avec mise en √©vidence am√©lior√©e
                    winner_name_ml = ml_prediction['winner_name']
                    is_red_winner_ml = ml_prediction['prediction'] == 'Red'
                    
                    # AM√âLIORATION: Vainqueur pr√©dit en TR√àS GRAND
                    winner_color_ml = "#E53935" if is_red_winner_ml else "#1E88E5"
                    st.markdown("### Vainqueur pr√©dit:")
                    
                    # Utiliser Markdown pour afficher le vainqueur en tr√®s grand et en couleur
                    st.markdown(f"<h1 style='color: {winner_color_ml}; font-size: 36px; text-align: center;'>{'üî¥' if is_red_winner_ml else 'üîµ'} {winner_name_ml}</h1>", unsafe_allow_html=True)
                    
                    # Les probabilit√©s pour chaque combattant
                    red_prob_ml = ml_prediction['red_probability']
                    blue_prob_ml = ml_prediction['blue_probability']
                    
                    # Afficher les m√©triques avec les valeurs originales
                    st.metric(f"üî¥ {fighter_a['name']}", f"{red_prob_ml:.0%}")
                    st.metric(f"üîµ {fighter_b['name']}", f"{blue_prob_ml:.0%}")
                    
                    # AM√âLIORATION: Toujours afficher une barre de progression significative
                    if red_prob_ml < 0 or red_prob_ml > 1 or blue_prob_ml < 0 or blue_prob_ml > 1:
                        # Message expliquant l'adaptation mais plus concis
                        st.caption(f"Note: Probabilit√©s originales: {red_prob_ml:.0%} vs {blue_prob_ml:.0%}")
                        
                        # Adaptation de la visualisation pour probabilit√©s extr√™mes
                        if is_red_winner_ml:
                            # Vainqueur rouge - montrer une barre √† 80% (dominance claire mais pas totale)
                            progress_value_ml = 0.8
                        else:
                            # Vainqueur bleu - montrer une barre √† 20% (dominance claire du bleu)
                            progress_value_ml = 0.2
                    else:
                        # Probabilit√©s normales, utilisation directe
                        progress_value_ml = red_prob_ml
                    
                    # Toujours afficher la barre de progression
                    st.progress(progress_value_ml)
                    
                    # Afficher la confiance
                    confidence_ml = ml_prediction['confidence']
                    if confidence_ml == "√âlev√©":
                        st.success(f"Confiance: {confidence_ml}")
                    else:
                        st.warning(f"Confiance: {confidence_ml}")
            
            # Message de convergence/divergence si les deux m√©thodes sont disponibles
            if ml_prediction:
                same_prediction = classic_prediction['prediction'] == ml_prediction['prediction']
                if same_prediction:
                    st.success("‚úÖ Les deux m√©thodes pr√©disent le m√™me vainqueur!")
                else:
                    st.warning("‚ö†Ô∏è Les m√©thodes pr√©disent des vainqueurs diff√©rents!")
                
            # PARTIE 7: Analyse Kelly et recommandations de paris
            if ml_prediction:
                st.divider()
                st.subheader("üìä Analyse Kelly et recommandations de paris")
                
                # Obtenir la fraction Kelly s√©lectionn√©e
                kelly_fractions = {
                    "Kelly pur": 1,
                    "Kelly/2": 2,
                    "Kelly/3": 3, 
                    "Kelly/4": 4,
                    "Kelly/5": 5,
                    "Kelly/10": 10
                }
                selected_fraction = kelly_fractions[st.session_state.kelly_strategy]
                
                # D√©termine le combattant qui a la plus forte valeur attendue
                if ml_prediction['prediction'] == 'Red':
                    best_fighter = fighter_a['name']
                    best_odds = odds_a
                    best_prob = ml_prediction['red_probability']
                else:
                    best_fighter = fighter_b['name']
                    best_odds = odds_b
                    best_prob = ml_prediction['blue_probability']
                
                # Ajustement pour √©viter les erreurs si probabilit√© hors limites
                best_prob = max(0.01, min(0.99, best_prob))
                
                # Calculer les recommandations Kelly pour le combattant favori selon le ML
                kelly_amount = calculate_kelly(best_prob, best_odds, app_data["current_bankroll"], selected_fraction)
                
                # Section Kelly modernis√©e avec composants Streamlit natifs
                st.write("### Recommandation de mise avec la m√©thode " + st.session_state.kelly_strategy)
                st.write("Pour maximiser votre ROI sur le long terme, la m√©thode Kelly recommande:")
                
                # Cr√©er un DataFrame au lieu d'une table HTML
                kelly_data = pd.DataFrame({
                    "Combattant": [best_fighter],
                    "Probabilit√© ML": [f"{best_prob:.0%}"],
                    "Cote": [f"{best_odds:.2f}"],
                    "Mise recommand√©e": [f"{kelly_amount:.2f} ‚Ç¨"],
                    "% de bankroll": [f"{(kelly_amount/app_data['current_bankroll']*100):.1f}%"],
                    "Gain potentiel": [f"{kelly_amount * (best_odds-1):.2f} ‚Ç¨"]
                })
                
                # Afficher le DataFrame avec style
                st.dataframe(kelly_data, use_container_width=True, hide_index=True)
                
                st.caption("Le crit√®re de Kelly d√©termine la mise optimale en fonction de votre avantage et de votre bankroll totale.")
                
                # Section pour placer un pari modernis√©e
                st.subheader(f"Placer un pari sur {best_fighter}")
                
                # Colonnes pour les informations du pari
                bet_cols = st.columns(2)
                
                with bet_cols[0]:
                    # Nom de l'√©v√©nement
                    event_name = st.text_input("Nom de l'√©v√©nement", value="UFC Fight Night", key="event_name_input")
                    
                    # Date de l'√©v√©nement
                    event_date = st.date_input("Date de l'√©v√©nement", value=datetime.datetime.now(), key="event_date_input")
                
                with bet_cols[1]:
                    # Montant √† miser
                    bet_amount = st.number_input(
                        "Montant √† miser (‚Ç¨)",
                        min_value=0.0,
                        max_value=float(app_data["current_bankroll"]),
                        value=float(kelly_amount),
                        step=5.0,
                        format="%.2f",
                        key="bet_amount_input"
                    )
                    
                    # Utiliser la mise Kelly recommand√©e
                    use_kelly = st.checkbox("Utiliser la mise Kelly recommand√©e", value=True, key="use_kelly_checkbox")
                    if use_kelly:
                        bet_amount = kelly_amount
                
                # Afficher les d√©tails du pari avec un design attractif
                pot_gain = bet_amount * (best_odds-1)
                roi_pct = (pot_gain / bet_amount) * 100 if bet_amount > 0 else 0
                
                # Cr√©er 3 colonnes pour les m√©triques
                bet_metrics_cols = st.columns(3)
                with bet_metrics_cols[0]:
                    st.metric("Mise", f"{bet_amount:.2f}‚Ç¨")
                with bet_metrics_cols[1]:
                    st.metric("Gain potentiel", f"{pot_gain:.2f}‚Ç¨")
                with bet_metrics_cols[2]:
                    st.metric("ROI", f"{roi_pct:.1f}%")
                
                # Bouton pour placer le pari
                if st.button("üí∞ Placer ce pari", type="primary", key="place_bet_btn", use_container_width=True):
                    if bet_amount > app_data["current_bankroll"]:
                        st.error(f"Montant du pari ({bet_amount:.2f}‚Ç¨) sup√©rieur √† votre bankroll actuelle ({app_data['current_bankroll']:.2f}‚Ç¨)")
                    elif bet_amount <= 0:
                        st.error("Le montant du pari doit √™tre sup√©rieur √† 0‚Ç¨")
                    else:
                        # Animation de chargement
                        with st.spinner("Enregistrement du pari..."):
                            # Ajouter le pari √† l'historique
                            if add_manual_bet(
                                event_name=event_name,
                                event_date=event_date,
                                fighter_red=fighter_a['name'],
                                fighter_blue=fighter_b['name'],
                                pick=best_fighter,
                                odds=best_odds,
                                stake=bet_amount,
                                model_probability=best_prob,
                                kelly_fraction=selected_fraction
                            ):
                                # Message de succ√®s avec d√©tails
                                st.success(f"Pari enregistr√© avec succ√®s! {bet_amount:.2f}‚Ç¨ sur {best_fighter} @ {best_odds:.2f}")
                                
                                # Ajouter un petit d√©lai pour l'animation
                                time.sleep(0.5)
                                
                                # Afficher une confirmation
                                st.info(f"Vous avez pari√© {bet_amount:.2f}‚Ç¨ sur {best_fighter}. Gain potentiel: {pot_gain:.2f}‚Ç¨ (ROI: {roi_pct:.1f}%)")
                                st.write("Vous pouvez suivre ce pari dans l'onglet 'Gestion de Bankroll'")
                            else:
                                st.error("Erreur lors de l'enregistrement du pari.")
            
            # Analyse des paris (utiliser les deux m√©thodes si disponibles)
            if 'betting' in classic_prediction:
                st.divider()
                st.subheader("üí∞ Analyse des paris")
                st.write("Comparaison des cotes du march√© avec nos probabilit√©s pr√©dites")
                
                # Analyse des paris pour les deux combattants avec un design modernis√©
                col1, col2 = st.columns(2)
                
                # Combattant Rouge
                with col1:
                    st.write(f"### üî¥ {fighter_a['name']}")
                    
                    # Donn√©es de paris
                    betting_classic = classic_prediction['betting']
                    betting_ml = ml_prediction.get('betting') if ml_prediction else None
                    
                    # Cr√©er une table pour les donn√©es du combattant rouge
                    st.write("**Donn√©es de paris:**")
                    red_data = [
                        ["Cote du march√©", f"{betting_classic['odds_red']:.2f}"],
                        ["Probabilit√© implicite", f"{betting_classic['implied_prob_red']:.0%}"],
                        ["Probabilit√© statistique", f"{classic_prediction['red_probability']:.0%}"]
                    ]
                    
                    if betting_ml:
                        red_data.append(["Probabilit√© ML", f"{ml_prediction['red_probability']:.0%}"])
                    
                    red_data.extend([
                        ["Avantage statistique", f"{betting_classic['edge_red']*100:.1f}%"],
                        ["Valeur esp√©r√©e", f"{betting_classic['ev_red']*100:.1f}%"]
                    ])
                    
                    # Afficher les donn√©es sous forme de tableau
                    red_df = pd.DataFrame(red_data, columns=["M√©trique", "Valeur"])
                    st.dataframe(red_df, hide_index=True, use_container_width=True)
                    
                    # Afficher les recommandations avec des composants Streamlit natifs
                    st.write("**Recommandation statistique:**")
                    if betting_classic['recommendation_red'] == "Favorable":
                        st.success("Favorable")
                    elif betting_classic['recommendation_red'] == "Neutre":
                        st.info("Neutre")
                    else:
                        st.error("D√©favorable")
                    
                    if betting_ml:
                        st.write("**Recommandation ML:**")
                        if betting_ml['recommendation_red'] == "Favorable":
                            st.success("Favorable")
                        elif betting_ml['recommendation_red'] == "Neutre":
                            st.info("Neutre")
                        else:
                            st.error("D√©favorable")
                    
                    # Bouton pour parier sur le combattant rouge
                    if st.button(f"Parier sur {fighter_a['name']}", key="bet_on_red_btn", use_container_width=True):
                        # Calculer le montant Kelly pour ce combattant
                        red_prob_for_kelly = max(0.01, min(0.99, ml_prediction['red_probability'] if ml_prediction else classic_prediction['red_probability']))
                        
                        red_kelly = calculate_kelly(
                            red_prob_for_kelly,
                            odds_a,
                            app_data["current_bankroll"],
                            kelly_fractions[st.session_state.kelly_strategy]
                        )
                        
                        # Stocker dans la session pour pr√©charger le formulaire
                        st.session_state.temp_bet = {
                            "fighter": fighter_a['name'],
                            "odds": odds_a,
                            "kelly_amount": red_kelly,
                            "probability": red_prob_for_kelly
                        }
                        
                        # Afficher le formulaire pour parier
                        show_bet_form(
                            fighter_a['name'], 
                            fighter_b['name'], 
                            fighter_a['name'], 
                            odds_a, 
                            red_kelly,
                            red_prob_for_kelly,
                            kelly_fractions[st.session_state.kelly_strategy]
                        )
                
                # Combattant Bleu
                with col2:
                    st.write(f"### üîµ {fighter_b['name']}")
                    
                    # Cr√©er une table pour les donn√©es du combattant bleu
                    st.write("**Donn√©es de paris:**")
                    blue_data = [
                        ["Cote du march√©", f"{betting_classic['odds_blue']:.2f}"],
                        ["Probabilit√© implicite", f"{betting_classic['implied_prob_blue']:.0%}"],
                        ["Probabilit√© statistique", f"{classic_prediction['blue_probability']:.0%}"]
                    ]
                    
                    if betting_ml:
                        blue_data.append(["Probabilit√© ML", f"{ml_prediction['blue_probability']:.0%}"])
                    
                    blue_data.extend([
                        ["Avantage statistique", f"{betting_classic['edge_blue']*100:.1f}%"],
                        ["Valeur esp√©r√©e", f"{betting_classic['ev_blue']*100:.1f}%"]
                    ])
                    
                    # Afficher les donn√©es sous forme de tableau
                    blue_df = pd.DataFrame(blue_data, columns=["M√©trique", "Valeur"])
                    st.dataframe(blue_df, hide_index=True, use_container_width=True)
                    
                    # Afficher les recommandations avec des composants Streamlit natifs
                    st.write("**Recommandation statistique:**")
                    if betting_classic['recommendation_blue'] == "Favorable":
                        st.success("Favorable")
                    elif betting_classic['recommendation_blue'] == "Neutre":
                        st.info("Neutre")
                    else:
                        st.error("D√©favorable")
                    
                    if betting_ml:
                        st.write("**Recommandation ML:**")
                        if betting_ml['recommendation_blue'] == "Favorable":
                            st.success("Favorable")
                        elif betting_ml['recommendation_blue'] == "Neutre":
                            st.info("Neutre")
                        else:
                            st.error("D√©favorable")
                    
                    # Bouton pour parier sur le combattant bleu
                    if st.button(f"Parier sur {fighter_b['name']}", key="bet_on_blue_btn", use_container_width=True):
                        # Calculer le montant Kelly pour ce combattant
                        blue_prob_for_kelly = max(0.01, min(0.99, ml_prediction['blue_probability'] if ml_prediction else classic_prediction['blue_probability']))
                        
                        blue_kelly = calculate_kelly(
                            blue_prob_for_kelly,
                            odds_b,
                            app_data["current_bankroll"],
                            kelly_fractions[st.session_state.kelly_strategy]
                        )
                        
                        # Stocker dans la session pour pr√©charger le formulaire
                        st.session_state.temp_bet = {
                            "fighter": fighter_b['name'],
                            "odds": odds_b,
                            "kelly_amount": blue_kelly,
                            "probability": blue_prob_for_kelly
                        }
                        
                        # Afficher le formulaire pour parier
                        show_bet_form(
                            fighter_a['name'], 
                            fighter_b['name'], 
                            fighter_b['name'], 
                            odds_b, 
                            blue_kelly,
                            blue_prob_for_kelly,
                            kelly_fractions[st.session_state.kelly_strategy]
                        )
                        
            # PARTIE 8: Nouvel onglet avec les statistiques et graphiques
            stats_tabs = st.tabs(["üîç Statistiques", "üìä Graphiques", "üìù Notes"])
            
            # Onglet des statistiques
            with stats_tabs[0]:
                # Afficher les statistiques comparatives
                st.subheader("üìä Statistiques comparatives")
                
                # Cr√©ation du DataFrame des statistiques comparatives
                stats_df = create_stats_comparison_df(fighter_a, fighter_b)
                
                # Appliquer un style conditionnel pour mettre en √©vidence les avantages
                def highlight_advantage(row):
                    styles = [''] * len(row)
                    advantage = row['Avantage']
                    
                    if advantage == fighter_a['name']:
                        styles[1] = 'background-color: rgba(229, 57, 53, 0.2); font-weight: bold;'
                    elif advantage == fighter_b['name']:
                        styles[2] = 'background-color: rgba(30, 136, 229, 0.2); font-weight: bold;'
                    
                    return styles
                
                # Appliquer le style et afficher avec un design plus moderne
                styled_df = stats_df.style.apply(highlight_advantage, axis=1)
                st.dataframe(
                    styled_df, 
                    use_container_width=True, 
                    height=500,
                    hide_index=True,
                )
            
            # Onglet des visualisations
            with stats_tabs[1]:
                st.subheader("üìà Visualisations des performances")
                
                # Disposer les graphiques en deux colonnes
                col1, col2 = st.columns(2)
                
                with col1:
                    # Graphique radar
                    radar_fig = create_radar_chart(fighter_a, fighter_b)
                    st.plotly_chart(radar_fig, use_container_width=True, height=400)
                
                with col2:
                    # Graphique des forces et faiblesses
                    strengths_fig = create_strengths_weaknesses_chart(fighter_a, fighter_b)
                    st.plotly_chart(strengths_fig, use_container_width=True, height=400)
                
                # Style de combat
                style_fig = create_style_analysis_chart(fighter_a, fighter_b)
                st.plotly_chart(style_fig, use_container_width=True)
            
            # Onglet des notes
            with stats_tabs[2]:
                st.subheader("üìù Notes d'analyse")
                
                # Analyse textuelle g√©n√©r√©e
                # D√©terminer les styles de combat
                a_striking = fighter_a['SLpM'] * fighter_a['sig_str_acc']
                a_ground = fighter_a['td_avg'] * fighter_a['td_acc'] + fighter_a['sub_avg']
                a_style = "striker" if a_striking > a_ground * 1.5 else "grappler" if a_ground > a_striking * 1.5 else "√©quilibr√©"
                
                b_striking = fighter_b['SLpM'] * fighter_b['sig_str_acc']
                b_ground = fighter_b['td_avg'] * fighter_b['td_acc'] + fighter_b['sub_avg']
                b_style = "striker" if b_striking > b_ground * 1.5 else "grappler" if b_ground > b_striking * 1.5 else "√©quilibr√©"
                
                # Exp√©rience
                a_exp = fighter_a['wins'] + fighter_a['losses']
                b_exp = fighter_b['wins'] + fighter_b['losses']
                exp_diff = abs(a_exp - b_exp)
                exp_advantage = f"{fighter_a['name']} a {exp_diff} combats de plus" if a_exp > b_exp else f"{fighter_b['name']} a {exp_diff} combats de plus" if b_exp > a_exp else "Les deux combattants ont le m√™me niveau d'exp√©rience"
                
                # Forme r√©cente (√† calculer √† partir du record)
                a_winrate = fighter_a['wins'] / max(a_exp, 1)
                b_winrate = fighter_b['wins'] / max(b_exp, 1)
                
                # Stats physiques
                height_diff = abs(fighter_a['height'] - fighter_b['height'])
                reach_diff = abs(fighter_a['reach'] - fighter_b['reach'])
                
                physical_advantage = ""
                if fighter_a['height'] > fighter_b['height'] and fighter_a['reach'] > fighter_b['reach']:
                    physical_advantage = f"{fighter_a['name']} a un avantage de taille ({height_diff:.1f} cm) et d'allonge ({reach_diff:.1f} cm)"
                elif fighter_b['height'] > fighter_a['height'] and fighter_b['reach'] > fighter_a['reach']:
                    physical_advantage = f"{fighter_b['name']} a un avantage de taille ({height_diff:.1f} cm) et d'allonge ({reach_diff:.1f} cm)"
                else:
                    physical_advantage = "Les avantages physiques sont partag√©s entre les deux combattants"
                
                # Profil des combattants
                st.write("#### Profil des combattants")
                st.write(f"**{fighter_a['name']}** est un combattant de style **{a_style}** avec un taux de victoires de **{a_winrate:.0%}** sur {a_exp} combats.")
                st.write(f"**{fighter_b['name']}** est un combattant de style **{b_style}** avec un taux de victoires de **{b_winrate:.0%}** sur {b_exp} combats.")
                
                # Facteurs cl√©s
                st.write("#### Facteurs cl√©s du combat")
                st.write(f"* **Exp√©rience:** {exp_advantage}.")
                st.write(f"* **Avantage physique:** {physical_advantage}.")
                st.write(f"* **Dynamique du combat:** {fighter_a['name']} donne {fighter_a['SLpM']:.1f} coups par minute contre {fighter_b['SLpM']:.1f} pour {fighter_b['name']}.")
                st.write(f"* **Facteur sol:** {fighter_a['name']} tente {fighter_a['td_avg']:.1f} takedowns par combat contre {fighter_b['td_avg']:.1f} pour {fighter_b['name']}.")
                
                # Points √† surveiller
                st.write("#### Points √† surveiller")
                st.write(f"Ce combat pr√©sente un affrontement de styles {a_style if a_style != b_style else 'similaires'}, o√π {fighter_a['name'] if a_winrate > b_winrate else fighter_b['name']} a l'avantage en termes d'historique de victoires.")
                
                if a_style != b_style:
                    st.write(f"Le vainqueur sera probablement celui qui pourra imposer sa strat√©gie pr√©f√©r√©e: {fighter_a['name']} voudra maintenir le combat {a_style}, tandis que {fighter_b['name']} cherchera √† l'amener vers une dynamique {b_style}.")
                else:
                    st.write("Les deux combattants auront des approches similaires, donc la technique et les adaptations en cours de combat seront d√©terminantes.")
        else:
            # Message d'accueil
            st.info("Bienvenue sur le Pr√©dicteur de Combats UFC! S√©lectionnez deux combattants et cliquez sur 'Pr√©dire le combat' pour obtenir une analyse compl√®te.")
            
            # Message d'information
            st.warning("‚ö†Ô∏è L'ordre des combattants est important! La position des combattants (coin Rouge vs Bleu) peut influencer significativement les pr√©dictions. Traditionnellement, le combattant favori ou mieux class√© est plac√© dans le coin rouge.")



def show_bet_form(fighter_red, fighter_blue, pick, odds, kelly_amount, probability, kelly_fraction):
    """Affiche un formulaire modernis√© pour placer un pari"""
    # AM√âLIORATION UI: Box de placement de paris am√©lior√©e
    st.markdown(f"""
    <div class="bet-placement-box section-fade-in">
        <h3 class="bet-placement-title">Placer un pari sur {pick}</h3>
        <p>Compl√©tez les informations ci-dessous pour enregistrer votre pari</p>
    </div>
    """, unsafe_allow_html=True)
    
    # AM√âLIORATION UI: Organisation en deux colonnes
    bet_cols = st.columns(2)
    
    with bet_cols[0]:
        # Nom de l'√©v√©nement
        event_name = st.text_input("Nom de l'√©v√©nement", value="UFC Fight Night", key="bet_event_name")
        
        # Date de l'√©v√©nement
        event_date = st.date_input("Date de l'√©v√©nement", value=datetime.datetime.now(), key="bet_event_date")
    
    with bet_cols[1]:
        # Mode de saisie pour le montant √† miser
        bet_input_mode = st.radio(
            "Mode de saisie du montant",
            options=["Manuel", "Slider"],
            index=0,  # Manuel par d√©faut
            key="bet_input_mode"
        )
        
        if bet_input_mode == "Manuel":
            # Montant √† miser - saisie manuelle
            bet_amount = st.number_input(
                "Montant √† miser (‚Ç¨)",
                min_value=0.0,
                max_value=float(app_data["current_bankroll"]),
                value=float(kelly_amount),
                step=5.0,
                format="%.2f",
                key="place_bet_amount_manual"
            )
        else:
            # Montant √† miser avec slider pour une meilleure UX
            bet_amount = st.slider(
                "Montant √† miser (‚Ç¨)",
                min_value=0.0,
                max_value=float(app_data["current_bankroll"]),
                value=float(kelly_amount),
                step=5.0,
                format="%.2f",
                key="place_bet_amount_slider"
            )
        
        # Utiliser la mise Kelly recommand√©e
        use_kelly = st.checkbox("Utiliser la mise Kelly recommand√©e", value=True, key="place_use_kelly")
        if use_kelly:
            bet_amount = kelly_amount
    
    # AM√âLIORATION UI: D√©tails du pari avec des m√©triques visuelles
    pot_gain = bet_amount * (odds-1)
    roi_pct = (pot_gain / bet_amount) * 100 if bet_amount > 0 else 0
    
    # Afficher les m√©triques en 3 colonnes
    metrics_cols = st.columns(3)
    with metrics_cols[0]:
        st.metric("Mise", f"{bet_amount:.2f}‚Ç¨")
    with metrics_cols[1]:
        st.metric("Gain potentiel", f"{pot_gain:.2f}‚Ç¨")
    with metrics_cols[2]:
        st.metric("ROI", f"{roi_pct:.1f}%")
    
    # AM√âLIORATION UI: R√©sum√© du pari dans un card
    st.markdown(f"""
    <div class="card" style="margin: 15px 0; background: linear-gradient(145deg, rgba(13, 110, 253, 0.05) 0%, rgba(13, 110, 253, 0.1) 100%); border-left: 3px solid #0d6efd;">
        <div style="text-align: center; margin-bottom: 10px;">
            <h4 style="margin: 0; color: #0d6efd;">R√©sum√© du pari</h4>
        </div>
        <div style="display: flex; justify-content: space-between; margin: 10px 0;">
            <div>Combat</div>
            <div style="font-weight: 600;">{fighter_red} vs {fighter_blue}</div>
        </div>
        <div style="display: flex; justify-content: space-between; margin: 10px 0;">
            <div>Pari sur</div>
            <div style="font-weight: 600; color: {('#E53935' if pick == fighter_red else '#1E88E5')};">{pick}</div>
        </div>
        <div style="display: flex; justify-content: space-between; margin: 10px 0;">
            <div>Cote</div>
            <div style="font-weight: 600;">{odds:.2f}</div>
        </div>
        <div style="display: flex; justify-content: space-between; margin: 10px 0;">
            <div>Probabilit√© estim√©e</div>
            <div style="font-weight: 600;">{probability:.0%}</div>
        </div>
        <div style="display: flex; justify-content: space-between; margin: 10px 0;">
            <div>Crit√®re Kelly</div>
            <div style="font-weight: 600;">Kelly/{kelly_fraction}</div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Bouton pour placer le pari avec style am√©lior√©
    if st.button("üí∞ Confirmer ce pari", type="primary", key="confirm_bet_btn", use_container_width=True):
        if bet_amount > app_data["current_bankroll"]:
            # AM√âLIORATION UI: Message d'erreur am√©lior√©
            st.error(f"‚ö†Ô∏è Montant du pari ({bet_amount:.2f}‚Ç¨) sup√©rieur √† votre bankroll actuelle ({app_data['current_bankroll']:.2f}‚Ç¨)")
        elif bet_amount <= 0:
            st.error("‚ö†Ô∏è Le montant du pari doit √™tre sup√©rieur √† 0‚Ç¨")
        else:
            # Animation de chargement
            with st.spinner("Enregistrement du pari..."):
                # Ajouter le pari √† l'historique
                if add_manual_bet(
                    event_name=event_name,
                    event_date=event_date,
                    fighter_red=fighter_red,
                    fighter_blue=fighter_blue,
                    pick=pick,
                    odds=odds,
                    stake=bet_amount,
                    model_probability=probability,
                    kelly_fraction=kelly_fraction
                ):
                    # Message de succ√®s avec animation
                    st.success(f"‚úÖ Pari enregistr√© avec succ√®s! {bet_amount:.2f}‚Ç¨ sur {pick} @ {odds:.2f}")
                    
                    # AM√âLIORATION UI: Afficher un r√©capitulatif attrayant
                    st.markdown(f"""
                    <div class="card section-fade-in" style="background: linear-gradient(145deg, rgba(76, 175, 80, 0.1) 0%, rgba(56, 142, 60, 0.1) 100%); 
                                                             border: 1px solid rgba(76, 175, 80, 0.3);">
                        <div style="text-align: center;">
                            <div style="font-size: 3rem; margin-bottom: 10px;">‚úÖ</div>
                            <h3 style="margin-bottom: 15px; color: #4CAF50;">Pari enregistr√© avec succ√®s</h3>
                            <div style="font-weight: 600; font-size: 1.2rem; margin-bottom: 15px;">
                                {event_name} - {event_date}
                            </div>
                            <div style="font-weight: 600; font-size: 1.1rem;">{pick} @ {odds:.2f}</div>
                            <div style="display: flex; justify-content: space-between; margin: 15px 0; color: rgba(255,255,255,0.8);">
                                <div>Mise: <b>{bet_amount:.2f}‚Ç¨</b></div>
                                <div>Gain potentiel: <b>{pot_gain:.2f}‚Ç¨</b></div>
                                <div>ROI: <b>{roi_pct:.1f}%</b></div>
                            </div>
                            <div style="margin-top: 10px; font-size: 0.9rem; color: rgba(255,255,255,0.6);">
                                Vous pouvez suivre ce pari dans l'onglet "Gestion de Bankroll"
                            </div>
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    st.error("‚ùå Erreur lors de l'enregistrement du pari.")

# PARTIE 9 

def show_betting_strategy_section(event_url, event_name, fights, predictions_data, current_bankroll=300):
    """Affiche la section de strat√©gie de paris bas√©e sur les pr√©dictions existantes avec UI am√©lior√©e"""
    
    # V√©rifier si on a d√©j√† fait des recommandations
    event_key = f"recommendations_{event_url}"
    has_existing_recommendations = event_key in st.session_state.betting_recommendations
    
    # V√©rifier si on a un dictionnaire global des cotes
    if 'odds_dicts' not in st.session_state:
        st.session_state.odds_dicts = {}

    # R√©cup√©rer ou cr√©er le dictionnaire des cotes pour cet √©v√©nement
    if event_url not in st.session_state.odds_dicts:
        st.session_state.odds_dicts[event_url] = {}
    
    # AM√âLIORATION UI: Titre de section plus attrayant
    st.markdown("""
    <div class="divider"></div>
    <div class="section-fade-in" style="text-align:center; margin: 25px 0;">
        <h2>üí∞ Strat√©gie de paris optimis√©e</h2>
        <p style="color: #aaa;">Utilisez l'intelligence artificielle pour maximiser vos gains</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Si on a des paris sauvegard√©s pour cet √©v√©nement, afficher un message
    if event_url in st.session_state.saved_bet_events:
        # AM√âLIORATION UI: Message de succ√®s plus visuel
        st.markdown(f"""
        <div class="card" style="background: linear-gradient(145deg, rgba(76, 175, 80, 0.1) 0%, rgba(56, 142, 60, 0.1) 100%);
                             border: 1px solid rgba(76, 175, 80, 0.3); margin-bottom: 20px; text-align: center;">
            <div style="font-size: 2rem; margin-bottom: 10px;">‚úÖ</div>
            <h3 style="color: #4CAF50; margin-bottom: 10px;">Paris enregistr√©s avec succ√®s</h3>
            <p style="margin-bottom: 0;">Vos {st.session_state.saved_bet_events[event_url]} paris pour cet √©v√©nement ont √©t√© ajout√©s √† votre suivi.</p>
        </div>
        """, unsafe_allow_html=True)
    
    # AM√âLIORATION UI: Interface de strat√©gie modernis√©e
    st.markdown("""
    <div class="card">
        <h3 style="margin-top: 0;">Configurez votre strat√©gie de paris</h3>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        total_budget = st.number_input(
            "Budget total (‚Ç¨)",
            min_value=10.0,
            max_value=float(current_bankroll),
            value=min(300.0, float(current_bankroll)),
            step=10.0,
            format="%.2f",
            key=f"total_budget_{event_url}"
        )
    
    with col2:
        kelly_strategy = st.selectbox(
            "Strat√©gie Kelly",
            options=["Kelly complet", "Demi-Kelly", "Quart-Kelly"],
            index=1,  # Demi-Kelly par d√©faut (plus prudent)
            key=f"kelly_strategy_{event_url}"
        )
        
        # D√©terminer le diviseur Kelly en fonction de la strat√©gie
        if kelly_strategy == "Kelly complet":
            kelly_divisor = 1
        elif kelly_strategy == "Demi-Kelly":
            kelly_divisor = 2
        else:  # "Quart-Kelly"
            kelly_divisor = 4
    
    # AM√âLIORATION UI: Section pour les cotes am√©lior√©e
    st.markdown("""
    <div class="card" style="margin-top: 15px;">
        <h3 style="margin-top: 0;">Entrez les cotes propos√©es par les bookmakers</h3>
        <p style="color: #aaa; margin-bottom: 15px;">Ces cotes seront utilis√©es pour calculer la valeur de chaque pari</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Initialiser ou r√©cup√©rer le dictionnaire pour stocker les cotes entr√©es
    if f"odds_dict_{event_url}" not in st.session_state:
        st.session_state[f"odds_dict_{event_url}"] = st.session_state.odds_dicts.get(event_url, {})
    
    # Calculer le nombre de combats bettables
    bettable_fights = []
    for fight in fights:
        red_fighter_name = fight['red_fighter']
        blue_fighter_name = fight['blue_fighter']
        fight_key = f"{red_fighter_name}_vs_{blue_fighter_name}"
        
        # V√©rifier si une pr√©diction existe pour ce combat
        prediction_data = predictions_data.get(fight_key, None)
        if not prediction_data or prediction_data.get('status') != 'success':
            continue
            
        # R√©cup√©rer le r√©sultat ML ou classique
        ml_result = prediction_data.get('ml_result', None)
        classic_result = prediction_data.get('classic_result', None)
        
        # Pr√©f√©rer le r√©sultat ML s'il existe
        result = ml_result if ml_result else classic_result
        if not result:
            continue
            
        # Cr√©er une ligne pour chaque combat bettable
        winner = "Red" if result['red_probability'] > result['blue_probability'] else "Blue"
        winner_name = red_fighter_name if winner == "Red" else blue_fighter_name
        winner_prob = max(result['red_probability'], result['blue_probability'])
        
        # Ajouter aux combats pour parier
        bettable_fights.append({
            'fight_key': fight_key,
            'red_fighter': red_fighter_name,
            'blue_fighter': blue_fighter_name,
            'winner': winner,
            'winner_name': winner_name,
            'probability': winner_prob
        })
    
    # AM√âLIORATION UI: Mode de saisie des cotes (manuel vs slider)
    odds_input_mode = st.radio(
        "Mode de saisie des cotes",
        options=["Manuel", "Slider"],
        index=0,  # Manuel par d√©faut
        key=f"odds_input_mode_{event_url}"
    )
    
    # AM√âLIORATION UI: Afficher les combats en grille responsive
    if bettable_fights:
        # Cr√©er des rang√©es de 2 combats chacune
        for i in range(0, len(bettable_fights), 2):
            row_fights = bettable_fights[i:i+2]
            cols = st.columns(len(row_fights))
            
            for j, fight in enumerate(row_fights):
                with cols[j]:
                    fight_key = fight['fight_key']
                    # AM√âLIORATION UI: Card de combat modernis√©e
                    st.markdown(f"""
                    <div class="fight-card-improved">
                        <div class="fighters-banner">
                            <div class="fighter-name-red">{fight['red_fighter']}</div>
                            <div class="vs-badge">VS</div>
                            <div class="fighter-name-blue">{fight['blue_fighter']}</div>
                        </div>
                        <div style="text-align: center; margin-bottom: 10px;">
                            <span>Vainqueur pr√©dit: </span>
                            <span style="font-weight: 600; color: {('#E53935' if fight['winner'] == 'Red' else '#1E88E5')};">
                                {fight['winner_name']}
                            </span>
                            <span> ({fight['probability']:.0%})</span>
                        </div>
                    """, unsafe_allow_html=True)
                    
                    # Champ pour entrer la cote du bookmaker
                    odds_key = f"odds_{fight_key}"
                    
                    # Initialiser la valeur si premi√®re utilisation
                    if odds_key not in st.session_state[f"odds_dict_{event_url}"]:
                        st.session_state[f"odds_dict_{event_url}"][odds_key] = 2.0
                    
                    # Selon le mode de saisie choisi
                    if odds_input_mode == "Manuel":
                        # Saisie manuelle de la cote
                        odds = st.number_input(
                            "Cote",
                            min_value=1.01,
                            value=st.session_state[f"odds_dict_{event_url}"][odds_key],
                            step=0.01,
                            format="%.2f",
                            key=f"manual_{odds_key}"
                        )
                    else:
                        # Saisie avec slider
                        odds = st.slider(
                            "Cote",
                            min_value=1.01,
                            max_value=10.0,
                            value=st.session_state[f"odds_dict_{event_url}"][odds_key],
                            step=0.05,
                            format="%.2f",
                            key=f"slider_{odds_key}"
                        )
                    
                    # CORRECTION: Mettre √† jour √† la fois dans le combat et dans le dictionnaire
                    fight['odds'] = odds
                    st.session_state[f"odds_dict_{event_url}"][odds_key] = odds
                    
                    # Sauvegarder aussi dans le dictionnaire global
                    st.session_state.odds_dicts[event_url] = st.session_state[f"odds_dict_{event_url}"]
                    
                    # Fermeture de la div
                    st.markdown("</div>", unsafe_allow_html=True)
    else:
        st.info("Aucun combat avec pr√©diction n'est disponible. Veuillez d'abord g√©n√©rer des pr√©dictions.")
    
    # CORRECTION: Recalcul de la strat√©gie avec un flag d'√©tat
    recalculate_btn = st.button("üìä Recalculer la strat√©gie de paris", key=f"recalculate_strategy_{event_url}")
    
    # Quand le bouton de recalcul est cliqu√©, d√©finir un flag
    if recalculate_btn:
        st.session_state[f"recalculate_{event_url}"] = True
        generate_strategy = True
    else:
        generate_strategy = False

    # R√©cup√©rer les recommandations existantes ou g√©n√©rer de nouvelles
    if has_existing_recommendations and not (generate_strategy or st.session_state.get(f"recalculate_{event_url}", False)):
        filtered_fights = st.session_state.betting_recommendations[event_key]
        # AM√âLIORATION UI: Titre de section am√©lior√©
        st.markdown("""
        <div class="divider"></div>
        <div class="section-fade-in" style="text-align:center; margin: 25px 0;">
            <h2>üí∞ Recommandations de paris</h2>
            <p style="color: #aaa;">Combats identifi√©s comme offrant une valeur positive</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Afficher les recommandations sauvegard√©es
        if filtered_fights:
            # AM√âLIORATION UI: Tableau des recommandations plus moderne
            recommendation_data = []
            for fight in filtered_fights:
                recommendation_data.append({
                    "Combat": f"{fight['red_fighter']} vs {fight['blue_fighter']}",
                    "Pari sur": fight['winner_name'],
                    "Probabilit√©": f"{fight['probability']:.0%}",
                    "Cote": f"{fight['odds']:.2f}",
                    "Value": f"{fight['edge']*100:.1f}%",
                    "Rendement": f"{fight['value']:.2f}",  
                    "Montant": f"{fight['stake']:.2f} ‚Ç¨",
                    "Gain potentiel": f"{fight['stake'] * (fight['odds']-1):.2f} ‚Ç¨"
                })
                
            df = pd.DataFrame(recommendation_data)
            
            # AM√âLIORATION UI: Dataframe avec formatage am√©lior√©
            st.dataframe(
                df,
                use_container_width=True,
                column_config={
                    "Combat": st.column_config.TextColumn("Combat"),
                    "Pari sur": st.column_config.TextColumn("Pari sur"),
                    "Probabilit√©": st.column_config.TextColumn("Probabilit√©"),
                    "Cote": st.column_config.TextColumn("Cote"),
                    "Value": st.column_config.TextColumn("Value"),
                    "Rendement": st.column_config.TextColumn("Rendement"),
                    "Montant": st.column_config.TextColumn("Montant"),
                    "Gain potentiel": st.column_config.TextColumn("Gain potentiel")
                },
                hide_index=True
            )
            
            # AM√âLIORATION UI: R√©sum√© de la strat√©gie dans une card moderne
            total_stake = sum(fight['stake'] for fight in filtered_fights)
            total_potential_profit = sum(fight['stake'] * (fight['odds']-1) for fight in filtered_fights)
            
            # Afficher les m√©triques en 3 colonnes
            summary_cols = st.columns(3)
            with summary_cols[0]:
                st.metric("Budget total", f"{total_budget:.2f}‚Ç¨")
            with summary_cols[1]:
                st.metric("Montant mis√©", f"{total_stake:.2f}‚Ç¨", f"{total_stake/total_budget*100:.1f}%")
            with summary_cols[2]:
                st.metric("Gain potentiel", f"{total_potential_profit:.2f}‚Ç¨", f"{total_potential_profit/total_stake*100:.1f}%")
            
            # R√©sum√© d√©taill√©
            st.markdown(f"""
            <div class="strategy-summary">
                <h4 style="margin-top: 0;">R√©sum√© de la strat√©gie</h4>
                <ul>
                    <li>Strat√©gie Kelly utilis√©e: <b>{kelly_strategy}</b></li>
                    <li>Nombre de paris recommand√©s: <b>{len(filtered_fights)}</b></li>
                    <li>Utilisation du budget: <b>{total_stake/total_budget*100:.1f}%</b></li>
                    <li>ROI potentiel: <b>{total_potential_profit/total_stake*100:.1f}%</b></li>
                </ul>
            </div>
            """, unsafe_allow_html=True)
            
            # Option pour enregistrer les paris seulement si pas d√©j√† sauvegard√©s
            if event_url not in st.session_state.saved_bet_events:
                if st.button("üíæ Enregistrer ces paris dans mon suivi", type="primary", key=f"save_all_bets_{event_url}", use_container_width=True):
                    # Animation de chargement
                    with st.spinner("Enregistrement des paris..."):
                        # Cette partie s'ex√©cute quand on clique sur le bouton
                        try:
                            successful_bets = 0
                            for fight in filtered_fights:
                                # Ajouter le pari √† l'historique
                                result = add_manual_bet(
                                    event_name=event_name,
                                    event_date=datetime.datetime.now(),
                                    fighter_red=fight['red_fighter'],
                                    fighter_blue=fight['blue_fighter'],
                                    pick=fight['winner_name'],
                                    odds=fight['odds'],
                                    stake=fight['stake'],
                                    model_probability=fight['probability'],
                                    kelly_fraction=kelly_divisor
                                )
                                if result:
                                    successful_bets += 1
                            
                            # Sauvegarder l'√©tat dans la session pour le prochain chargement
                            st.session_state.saved_bet_events[event_url] = successful_bets
                            
                            # Forcer un message qui appara√Ætra au prochain rechargement
                            if successful_bets == len(filtered_fights):
                                # Message de succ√®s avec animation
                                st.success(f"‚úÖ Tous les paris ({successful_bets}) ont √©t√© enregistr√©s avec succ√®s!")
                                
                                # AM√âLIORATION UI: Afficher un r√©capitulatif attrayant
                                st.markdown(f"""
                                <div class="card section-fade-in" style="background: linear-gradient(145deg, rgba(76, 175, 80, 0.1) 0%, rgba(56, 142, 60, 0.1) 100%); 
                                                                         border: 1px solid rgba(76, 175, 80, 0.3); text-align: center;">
                                    <div style="font-size: 3rem; margin-bottom: 10px;">‚úÖ</div>
                                    <h3 style="margin-bottom: 15px; color: #4CAF50;">Tous les paris enregistr√©s</h3>
                                    <div style="font-weight: 600; font-size: 1.2rem; margin-bottom: 15px;">
                                        {successful_bets} paris ajout√©s pour {event_name}
                                    </div>
                                    <div style="display: flex; justify-content: space-between; margin: 15px 0; color: rgba(255,255,255,0.8);">
                                        <div>Mise totale: <b>{total_stake:.2f}‚Ç¨</b></div>
                                        <div>Gain potentiel: <b>{total_potential_profit:.2f}‚Ç¨</b></div>
                                        <div>ROI: <b>{total_potential_profit/total_stake*100:.1f}%</b></div>
                                    </div>
                                    <div style="margin-top: 10px; font-size: 0.9rem; color: rgba(255,255,255,0.6);">
                                        Vous pouvez suivre ces paris dans l'onglet "Gestion de Bankroll"
                                    </div>
                                </div>
                                """, unsafe_allow_html=True)
                            elif successful_bets > 0:
                                st.warning(f"‚ö†Ô∏è {successful_bets}/{len(filtered_fights)} paris ont √©t√© enregistr√©s. Certains paris n'ont pas pu √™tre enregistr√©s.")
                            else:
                                st.error("‚ùå Aucun pari n'a pu √™tre enregistr√©.")
                        except Exception as e:
                            st.error(f"‚ùå Erreur lors de l'enregistrement des paris: {e}")
        else:
            # AM√âLIORATION UI: Message d'avertissement plus visuel
            st.markdown("""
            <div class="card" style="background: linear-gradient(145deg, rgba(255, 193, 7, 0.1) 0%, rgba(255, 160, 0, 0.1) 100%);
                                     border: 1px solid rgba(255, 193, 7, 0.3); text-align: center; padding: 20px;">
                <div style="font-size: 2rem; margin-bottom: 10px;">‚ö†Ô∏è</div>
                <h3 style="color: #FFC107; margin-bottom: 10px;">Aucun combat int√©ressant</h3>
                <p style="margin-bottom: 0;">Aucun combat ne correspond aux crit√®res de value betting (confiance ‚â• 65% et value positive).</p>
            </div>
            """, unsafe_allow_html=True)
    else:
        # CORRECTION: Si on a cliqu√© sur recalculer, effacer le flag pour le prochain chargement
        if st.session_state.get(f"recalculate_{event_url}", False):
            st.session_state[f"recalculate_{event_url}"] = False
            
        # Bouton pour g√©n√©rer/r√©g√©n√©rer la strat√©gie
        generate_btn = st.button("üìä G√©n√©rer la strat√©gie de paris", type="primary", key=f"generate_strategy_{event_url}", use_container_width=True)
        
        if generate_btn or generate_strategy:
            # Animation de chargement
            with st.spinner("Analyse des opportunit√©s de paris..."):
                # Filtrer les combats int√©ressants
                filtered_fights = []
                
                # CORRECTION: S'assurer que les cotes sont correctement appliqu√©es aux combats
                for fight in bettable_fights:
                    fight_key = fight['fight_key']
                    odds_key = f"odds_{fight_key}"
                    
                    # R√©cup√©rer la cote depuis le dictionnaire de session
                    if odds_key in st.session_state[f"odds_dict_{event_url}"]:
                        fight['odds'] = st.session_state[f"odds_dict_{event_url}"][odds_key]
                    else:
                        # Valeur par d√©faut si non d√©finie (ne devrait pas arriver)
                        fight['odds'] = 2.0
                        st.session_state[f"odds_dict_{event_url}"][odds_key] = 2.0
                        
                    # V√©rifier la confiance du mod√®le
                    if fight['probability'] < 0.65:
                        continue
                        
                    # V√©rifier le value betting
                    implicit_prob = 1 / fight['odds']
                    if implicit_prob >= fight['probability']:
                        continue
                    
                    value = fight['probability'] * fight['odds']
                    if value < 1.15:
                        continue
                        
                    # Calculer la fraction Kelly
                    p = fight['probability']
                    q = 1 - p
                    b = fight['odds'] - 1
                    kelly = (p * b - q) / b
                    
                    # Appliquer le diviseur Kelly
                    fractional_kelly = kelly / kelly_divisor
                    
                    # Ajouter aux paris recommand√©s
                    if fractional_kelly > 0:
                        filtered_fights.append({
                            **fight,
                            'kelly': kelly,
                            'fractional_kelly': fractional_kelly,
                            'edge': p - implicit_prob,
                            'value': value
                        })
                
                # Sauvegarder les recommandations dans la session state
                st.session_state.betting_recommendations[event_key] = filtered_fights
            
            # AM√âLIORATION UI: Titre de section am√©lior√©
            st.markdown("""
            <div class="divider"></div>
            <div class="section-fade-in" style="text-align:center; margin: 25px 0;">
                <h2>üí∞ Recommandations de paris</h2>
                <p style="color: #aaa;">Combats identifi√©s comme offrant une valeur positive</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Afficher les r√©sultats
            if not filtered_fights:
                # AM√âLIORATION UI: Message d'avertissement plus visuel
                st.markdown("""
                <div class="card" style="background: linear-gradient(145deg, rgba(255, 193, 7, 0.1) 0%, rgba(255, 160, 0, 0.1) 100%);
                                         border: 1px solid rgba(255, 193, 7, 0.3); text-align: center; padding: 20px;">
                    <div style="font-size: 2rem; margin-bottom: 10px;">‚ö†Ô∏è</div>
                    <h3 style="color: #FFC107; margin-bottom: 10px;">Aucun combat int√©ressant</h3>
                    <p style="margin-bottom: 0;">Aucun combat ne correspond aux crit√®res de value betting (confiance ‚â• 65% et value positive).</p>
                </div>
                """, unsafe_allow_html=True)
                
                # Afficher des informations de d√©bogage sur les combats √©valu√©s
                debug_info = st.expander("üîç D√©tails des combats √©valu√©s", expanded=False)
                with debug_info:
                    for fight in bettable_fights:
                        odds_key = f"odds_{fight['fight_key']}"
                        odds_value = st.session_state[f"odds_dict_{event_url}"].get(odds_key, "Non d√©finie")
                        implicit_prob = 1 / float(odds_value) if isinstance(odds_value, (int, float)) and odds_value > 0 else "N/A"
                        edge = fight['probability'] - implicit_prob if isinstance(implicit_prob, float) else "N/A"
                        
                        st.markdown(f"""
                        <div style="margin-bottom: 10px; padding: 10px; background: rgba(255,255,255,0.05); border-radius: 8px;">
                            <div><b>{fight['red_fighter']} vs {fight['blue_fighter']}</b></div>
                            <div>Vainqueur pr√©dit: <b>{fight['winner_name']}</b> ({fight['probability']:.0%})</div>
                            <div>Cote: <b>{odds_value}</b> (Probabilit√© implicite: {implicit_prob if isinstance(implicit_prob, float) else implicit_prob})</div>
                            <div>Edge: <b>{edge if isinstance(edge, float) else edge}</b></div>
                            <div>Raison: {
                                "Confiance < 65%" if fight['probability'] < 0.65 
                                else "Cote trop basse (probabilit√© implicite trop √©lev√©e)" if isinstance(implicit_prob, float) and implicit_prob >= fight['probability']
                                else "Value insuffisante" if isinstance(implicit_prob, float) and fight['probability'] * float(odds_value) < 1.15
                                else "Raison inconnue"
                            }</div>
                        </div>
                        """, unsafe_allow_html=True)
            else:
                # Calculer la somme totale des fractions Kelly
                total_kelly = sum(fight['fractional_kelly'] for fight in filtered_fights)
                
                # CORRECTION: Ajouter une v√©rification pour √©viter la division par z√©ro
                if total_kelly <= 0:
                    st.warning("Impossible de calculer les mises : la somme des fractions Kelly est nulle ou n√©gative.")
                    for fight in filtered_fights:
                        fight['stake'] = 0
                else:
                    # Calculer les montants √† miser
                    for fight in filtered_fights:
                        # R√©partir le budget proportionnellement
                        fight['stake'] = total_budget * (fight['fractional_kelly'] / total_kelly)
                        
                        # CORRECTION: Arrondir les mises pour plus de clart√©
                        fight['stake'] = round(fight['stake'], 2)
                
                # AM√âLIORATION UI: Afficher les recommandations dans un tableau moderne
                recommendation_data = []
                for fight in filtered_fights:
                    recommendation_data.append({
                        "Combat": f"{fight['red_fighter']} vs {fight['blue_fighter']}",
                        "Pari sur": fight['winner_name'],
                        "Probabilit√©": f"{fight['probability']:.0%}",
                        "Cote": f"{fight['odds']:.2f}",
                        "Value": f"{fight['edge']*100:.1f}%",
                        "Rendement": f"{fight['value']:.2f}",  
                        "Montant": f"{fight['stake']:.2f} ‚Ç¨",
                        "Gain potentiel": f"{fight['stake'] * (fight['odds']-1):.2f} ‚Ç¨"
                    })
                
                if recommendation_data:
                    df = pd.DataFrame(recommendation_data)
                    
                    # AM√âLIORATION UI: Dataframe avec formatage am√©lior√©
                    st.dataframe(
                        df,
                        use_container_width=True,
                        column_config={
                            "Combat": st.column_config.TextColumn("Combat"),
                            "Pari sur": st.column_config.TextColumn("Pari sur"),
                            "Probabilit√©": st.column_config.TextColumn("Probabilit√©"),
                            "Cote": st.column_config.TextColumn("Cote"),
                            "Value": st.column_config.TextColumn("Value"),
                            "Rendement": st.column_config.TextColumn("Rendement"),
                            "Montant": st.column_config.TextColumn("Montant"),
                            "Gain potentiel": st.column_config.TextColumn("Gain potentiel")
                        },
                        hide_index=True
                    )
                    
                    # AM√âLIORATION UI: R√©sum√© de la strat√©gie avec des m√©triques
                    total_stake = sum(fight['stake'] for fight in filtered_fights)
                    total_potential_profit = sum(fight['stake'] * (fight['odds']-1) for fight in filtered_fights)
                    
                    # Afficher les m√©triques en 3 colonnes
                    summary_cols = st.columns(3)
                    with summary_cols[0]:
                        st.metric("Budget total", f"{total_budget:.2f}‚Ç¨")
                    with summary_cols[1]:
                        st.metric("Montant mis√©", f"{total_stake:.2f}‚Ç¨", f"{total_stake/total_budget*100:.1f}%")
                    with summary_cols[2]:
                        st.metric("Gain potentiel", f"{total_potential_profit:.2f}‚Ç¨", f"{total_potential_profit/total_stake*100:.1f}%")
                    
                    # R√©sum√© d√©taill√©
                    st.markdown(f"""
                    <div class="strategy-summary">
                        <h4 style="margin-top: 0;">R√©sum√© de la strat√©gie</h4>
                        <ul>
                            <li>Strat√©gie Kelly utilis√©e: <b>{kelly_strategy}</b></li>
                            <li>Nombre de paris recommand√©s: <b>{len(filtered_fights)}</b></li>
                            <li>Utilisation du budget: <b>{total_stake/total_budget*100:.1f}%</b></li>
                            <li>ROI potentiel: <b>{total_potential_profit/total_stake*100:.1f}%</b></li>
                        </ul>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # Option pour enregistrer les paris
                    if event_url not in st.session_state.saved_bet_events:
                        if st.button("üíæ Enregistrer ces paris dans mon suivi", type="primary", key=f"save_all_bets_{event_url}", use_container_width=True):
                            # Animation de chargement
                            with st.spinner("Enregistrement des paris..."):
                                try:
                                    successful_bets = 0
                                    for fight in filtered_fights:
                                        # Ajouter le pari √† l'historique
                                        result = add_manual_bet(
                                            event_name=event_name,
                                            event_date=datetime.datetime.now(),
                                            fighter_red=fight['red_fighter'],
                                            fighter_blue=fight['blue_fighter'],
                                            pick=fight['winner_name'],
                                            odds=fight['odds'],
                                            stake=fight['stake'],
                                            model_probability=fight['probability'],
                                            kelly_fraction=kelly_divisor
                                        )
                                        if result:
                                            successful_bets += 1
                                    
                                    # Sauvegarder l'√©tat dans la session pour le prochain chargement
                                    st.session_state.saved_bet_events[event_url] = successful_bets
                                    
                                    # Forcer un message qui appara√Ætra au prochain rechargement
                                    if successful_bets == len(filtered_fights):
                                        # Message de succ√®s avec animation
                                        st.success(f"‚úÖ Tous les paris ({successful_bets}) ont √©t√© enregistr√©s avec succ√®s!")
                                        
                                        # AM√âLIORATION UI: Afficher un r√©capitulatif attrayant
                                        st.markdown(f"""
                                        <div class="card section-fade-in" style="background: linear-gradient(145deg, rgba(76, 175, 80, 0.1) 0%, rgba(56, 142, 60, 0.1) 100%); 
                                                                                 border: 1px solid rgba(76, 175, 80, 0.3); text-align: center;">
                                            <div style="font-size: 3rem; margin-bottom: 10px;">‚úÖ</div>
                                            <h3 style="margin-bottom: 15px; color: #4CAF50;">Tous les paris enregistr√©s</h3>
                                            <div style="font-weight: 600; font-size: 1.2rem; margin-bottom: 15px;">
                                                {successful_bets} paris ajout√©s pour {event_name}
                                            </div>
                                            <div style="display: flex; justify-content: space-between; margin: 15px 0; color: rgba(255,255,255,0.8);">
                                                <div>Mise totale: <b>{total_stake:.2f}‚Ç¨</b></div>
                                                <div>Gain potentiel: <b>{total_potential_profit:.2f}‚Ç¨</b></div>
                                                <div>ROI: <b>{total_potential_profit/total_stake*100:.1f}%</b></div>
                                            </div>
                                            <div style="margin-top: 10px; font-size: 0.9rem; color: rgba(255,255,255,0.6);">
                                                Vous pouvez suivre ces paris dans l'onglet "Gestion de Bankroll"
                                            </div>
                                        </div>
                                        """, unsafe_allow_html=True)
                                    elif successful_bets > 0:
                                        st.warning(f"‚ö†Ô∏è {successful_bets}/{len(filtered_fights)} paris ont √©t√© enregistr√©s. Certains paris n'ont pas pu √™tre enregistr√©s.")
                                    else:
                                        st.error("‚ùå Aucun pari n'a pu √™tre enregistr√©.")
                                except Exception as e:
                                    st.error(f"‚ùå Erreur lors de l'enregistrement des paris: {e}")
    
    # Fonction de d√©bogage
    def debug_betting_strategy(event_url, bettable_fights, filtered_fights):
        """Fonction de d√©bogage pour la strat√©gie de paris"""
        
        debug_info = st.expander("üìù Informations de d√©bogage (d√©veloppeur)", expanded=False)
        
        with debug_info:
            st.write("### √âtat du dictionnaire des cotes")
            st.write(st.session_state.get(f"odds_dict_{event_url}", {}))
            
            st.write("### Combats bettables")
            for fight in bettable_fights:
                fight_key = fight['fight_key']
                odds_key = f"odds_{fight_key}"
                odds_value = st.session_state.get(f"odds_dict_{event_url}", {}).get(odds_key, "Non d√©finie")
                
                st.write(f"- {fight['red_fighter']} vs {fight['blue_fighter']}: Prob={fight['probability']:.2f}, Cote={odds_value}")
            
            st.write("### Combats filtr√©s pour paris")
            for fight in filtered_fights:
                st.write(f"- {fight['red_fighter']} vs {fight['blue_fighter']}: Prob={fight['probability']:.2f}, Cote={fight['odds']}, Kelly={fight.get('fractional_kelly', 0):.4f}, Mise={fight.get('stake', 0):.2f}‚Ç¨")
    
    # # Ajouter le d√©bogage pour les d√©veloppeurs
    # if st.checkbox("Afficher le d√©bogage (d√©veloppeur)", value=False, key=f"debug_{event_url}"):
    #     debug_betting_strategy(event_url, bettable_fights, filtered_fights)
        

def show_upcoming_events_page():
    """Affiche la page des √©v√©nements √† venir avec UI am√©lior√©e"""
    # AM√âLIORATION UI: Titre de page simple
    st.title("üóìÔ∏è √âv√©nements UFC √† venir")
    st.write("Consultez et analysez les prochains combats de l'UFC")
    
    # AM√âLIORATION UI: Bouton de r√©cup√©ration plus visible et explicite
    col1, col2 = st.columns([1, 2])
    with col1:
        if st.button("üîç R√©cup√©rer les √©v√©nements", key="load_events_btn", type="primary", use_container_width=True):
            # AM√âLIORATION UI: Animation de chargement
            with st.spinner("R√©cup√©ration des √©v√©nements en cours..."):
                events_result = get_upcoming_events(max_events=3)
                st.session_state.upcoming_events = events_result['events'] if events_result['status'] == 'success' else []
                st.session_state.upcoming_events_timestamp = datetime.datetime.now()
                
                # Initialiser le dictionnaire des combats s'il n'existe pas d√©j√†
                if 'upcoming_fights' not in st.session_state:
                    st.session_state.upcoming_fights = {}
                
                # Initialiser les pr√©dictions s'il n'existe pas d√©j√†
                if 'fight_predictions' not in st.session_state:
                    st.session_state.fight_predictions = {}
                
                # Message de r√©ussite ou d'erreur selon le r√©sultat
                if events_result['status'] == 'success':
                    # Message de succ√®s
                    st.success(f"‚úÖ {len(st.session_state.upcoming_events)} √©v√©nements r√©cup√©r√©s avec succ√®s!")
                else:
                    # Message d'erreur plus informatif
                    st.error(f"‚ùå Impossible de r√©cup√©rer les √©v√©nements: {events_result['message']}")
    
    with col2:
        # Afficher la date de derni√®re mise √† jour
        if st.session_state.get('upcoming_events_timestamp'):
            last_update = st.session_state.upcoming_events_timestamp
            time_diff = (datetime.datetime.now() - last_update).total_seconds() / 60
            
            # Formater le message selon le temps √©coul√©
            if time_diff < 60:
                time_msg = f"il y a {int(time_diff)} minutes"
            else:
                time_msg = f"il y a {int(time_diff/60)} heures"
            
            st.caption(f"Derni√®re mise √† jour: {time_msg}")
    
    # Afficher les √©v√©nements s'ils existent
    if st.session_state.get('upcoming_events'):
        # Bouton de rafra√Æchissement
        refresh_col, _ = st.columns([1, 3])
        with refresh_col:
            if st.button("üîÑ Rafra√Æchir les √©v√©nements", key="refresh_events_btn", use_container_width=True):
                with st.spinner("Mise √† jour des √©v√©nements..."):
                    events_result = get_upcoming_events(max_events=3)
                    st.session_state.upcoming_events = events_result['events'] if events_result['status'] == 'success' else []
                    st.session_state.upcoming_events_timestamp = datetime.datetime.now()
                st.success("‚úÖ Liste des √©v√©nements mise √† jour!")
        
        # Onglets avec noms d'√©v√©nements
        event_names = [event['name'] for event in st.session_state.upcoming_events]
        event_tabs = st.tabs(event_names)
        
        # Afficher chaque √©v√©nement dans son propre onglet
        for i, (event, event_tab) in enumerate(zip(st.session_state.upcoming_events, event_tabs)):
            event_name = event['name']
            event_url = event['url']
            
            with event_tab:
                # Titre de l'√©v√©nement
                st.subheader(f"ü•ä {event_name}")
                
                # V√©rifier si les combats pour cet √©v√©nement sont d√©j√† charg√©s
                fights = st.session_state.upcoming_fights.get(event_url, [])
                
                # Bouton de chargement pour les combats sp√©cifiques
                if not fights:
                    if st.button(f"üîç Charger les combats pour {event_name}", key=f"load_fights_btn_{i}", use_container_width=True):
                        with st.spinner(f"R√©cup√©ration des combats pour {event_name}..."):
                            fights_result = extract_upcoming_fights(event_url)
                            fights = fights_result['fights']
                            st.session_state.upcoming_fights[event_url] = fights
                            
                            # Message selon le r√©sultat
                            if fights_result['status'] == 'success' and fights:
                                st.success(f"‚úÖ {len(fights)} combats charg√©s avec succ√®s!")
                            elif fights_result['status'] == 'warning':
                                st.warning(f"‚ö†Ô∏è {fights_result['message']}")
                            else:
                                st.error(f"‚ùå {fights_result['message']}")
                
                if not fights:
                    # Message d'information simple
                    st.info(f"Aucun combat charg√©. Cliquez sur le bouton 'Charger les combats pour {event_name}' pour voir les affrontements pr√©vus.")
                else:
                    # Afficher le nombre de combats charg√©s
                    st.success(f"{len(fights)} combats charg√©s")
                    
                    # V√©rifier si les pr√©dictions ont d√©j√† √©t√© g√©n√©r√©es
                    predictions_generated = event_url in st.session_state.fight_predictions
                    
                    # Bouton pour g√©n√©rer les pr√©dictions
                    if not predictions_generated:
                        if st.button(f"üîÆ G√©n√©rer les pr√©dictions", key=f"predict_fights_btn_{i}", type="primary", use_container_width=True):
                            # Animation de chargement
                            with st.spinner(f"G√©n√©ration des pr√©dictions pour {len(fights)} combats..."):
                                # Initialiser le dictionnaire pour cet √©v√©nement
                                st.session_state.fight_predictions[event_url] = {}
                                
                                # Barre de progression
                                progress_bar = st.progress(0)
                                
                                # G√©n√©rer les pr√©dictions pour chaque combat
                                for idx, fight in enumerate(fights):
                                    # Mettre √† jour la barre de progression
                                    progress_bar.progress((idx + 1) / len(fights))
                                    
                                    red_fighter_name = fight['red_fighter']
                                    blue_fighter_name = fight['blue_fighter']
                                    
                                    # Trouver la correspondance dans la base de donn√©es
                                    red_match = find_best_match(red_fighter_name, app_data["fighters_dict"])
                                    blue_match = find_best_match(blue_fighter_name, app_data["fighters_dict"])
                                    
                                    fight_key = f"{red_fighter_name}_vs_{blue_fighter_name}"
                                    
                                    if not red_match or not blue_match:
                                        # Pas de pr√©diction si un combattant n'est pas reconnu
                                        st.session_state.fight_predictions[event_url][fight_key] = {
                                            'status': 'error',
                                            'message': "Donn√©es insuffisantes pour faire une pr√©diction"
                                        }
                                        continue
                                    
                                    # R√©cup√©rer les statistiques des combattants
                                    red_stats = app_data["fighters_dict"][red_match]
                                    blue_stats = app_data["fighters_dict"][blue_match]
                                    
                                    # Faire les pr√©dictions
                                    classic_result = predict_fight_classic(red_stats, blue_stats)
                                    ml_result = None
                                    
                                    if app_data["ml_model"] is not None:
                                        ml_result = predict_with_ml(red_stats, blue_stats, app_data["ml_model"], app_data["scaler"], app_data["feature_names"])
                                        if ml_result is not None:
                                            ml_result['winner_name'] = red_match if ml_result['prediction'] == 'Red' else blue_match
                                    
                                    # Stocker les r√©sultats
                                    st.session_state.fight_predictions[event_url][fight_key] = {
                                        'status': 'success',
                                        'red_match': red_match,
                                        'blue_match': blue_match,
                                        'red_stats': red_stats,
                                        'blue_stats': blue_stats,
                                        'classic_result': classic_result,
                                        'ml_result': ml_result
                                    }
                                
                                # Supprimer la barre de progression
                                progress_bar.empty()
                                
                                # Message de succ√®s
                                st.success(f"‚úÖ Pr√©dictions g√©n√©r√©es pour {len(fights)} combats!")
                                st.session_state[f"show_strategy_{event_url}"] = True
                    
                    # Afficher les combats
                    st.subheader("üîÆ Carte des combats avec pr√©dictions")
                    
                    # Disposer les combats en grille responsive de 2 colonnes
                    for j in range(0, len(fights), 2):
                        cols = st.columns(2 if j + 1 < len(fights) else 1)
                        
                        for k, col in enumerate(cols):
                            if j + k < len(fights):
                                fight = fights[j + k]
                                red_fighter_name = fight['red_fighter']
                                blue_fighter_name = fight['blue_fighter']
                                fight_key = f"{red_fighter_name}_vs_{blue_fighter_name}"
                                
                                with col:
                                    # Cr√©er un cadre pour chaque combat
                                    st.write("---")
                                    # Afficher les noms des combattants
                                    st.write(f"**üî¥ {red_fighter_name}** VS **üîµ {blue_fighter_name}**")
                                    
                                    # V√©rifier si les pr√©dictions ont √©t√© g√©n√©r√©es pour ce combat
                                    prediction_data = st.session_state.fight_predictions.get(event_url, {}).get(fight_key, None)
                                    
                                    if not prediction_data:
                                        # Affichage simplifi√© sans pr√©diction
                                        st.warning("En attente de pr√©diction")
                                        continue
                                    
                                    if prediction_data['status'] == 'error':
                                        # Message d'erreur
                                        st.error(prediction_data['message'])
                                        continue
                                    
                                    # Extraire les donn√©es de pr√©diction
                                    red_match = prediction_data['red_match']
                                    blue_match = prediction_data['blue_match']
                                    red_stats = prediction_data['red_stats']
                                    blue_stats = prediction_data['blue_stats']
                                    classic_result = prediction_data['classic_result']
                                    ml_result = prediction_data['ml_result']
                                    
                                    # Calculer les valeurs pour l'affichage
                                    # R√©sultat classique
                                    red_prob_classic = classic_result['red_probability']
                                    blue_prob_classic = classic_result['blue_probability']
                                    winner_classic = "Red" if red_prob_classic > blue_prob_classic else "Blue"
                                    
                                    # R√©sultat ML (si disponible)
                                    if ml_result:
                                        red_prob_ml = ml_result['red_probability']
                                        blue_prob_ml = ml_result['blue_probability']
                                        winner_ml = "Red" if red_prob_ml > blue_prob_ml else "Blue"
                                        
                                        # Consensus?
                                        consensus = winner_classic == winner_ml
                                        
                                        # Utiliser le ML pour l'affichage principal
                                        winner_color = "red" if winner_ml == "Red" else "blue"
                                        winner_name = red_match if winner_ml == "Red" else blue_match
                                        red_prob = red_prob_ml
                                        blue_prob = blue_prob_ml
                                        confidence = ml_result['confidence']
                                        method = "Machine Learning"
                                    else:
                                        # Utiliser la m√©thode classique si ML n'est pas disponible
                                        winner_color = "red" if winner_classic == "Red" else "blue"
                                        winner_name = red_match if winner_classic == "Red" else blue_match
                                        red_prob = red_prob_classic
                                        blue_prob = blue_prob_classic
                                        confidence = classic_result['confidence']
                                        method = "Statistique"
                                        consensus = True  # Pas de comparaison possible
                                    
                                    # Affichage des probabilit√©s avec une barre de progression Streamlit
                                    st.write("**Probabilit√©s de victoire:**")
                                    col1, col2 = st.columns(2)
                                    with col1:
                                        st.write(f"üî¥ {red_match}: {red_prob:.0%}")
                                    with col2:
                                        st.write(f"üîµ {blue_match}: {blue_prob:.0%}")
                                    
                                    # Utiliser la barre de progression pour montrer les probabilit√©s
                                    st.progress(red_prob)
                                    
                                    # Afficher le vainqueur pr√©dit
                                    st.write("**Vainqueur pr√©dit:**")
                                    st.markdown(f"### {winner_name}")
                                    
                                    # Afficher la m√©thode et la confiance
                                    st.write(f"**M√©thode:** {method}")
                                    confidence_color = "green" if confidence == "√âlev√©" else "orange"
                                    st.markdown(f"**Confiance:** :{confidence_color}[{confidence}]")
                                    
                                    # Si ML est disponible, afficher l'info sur le consensus
                                    if ml_result and not consensus:
                                        st.warning("‚ö†Ô∏è M√©thodes en d√©saccord")
                                    elif ml_result:
                                        st.success("‚úÖ M√©thodes en accord")
                                    
                                    # Ajouter un expander pour les d√©tails du combat
                                    with st.expander("Voir les d√©tails"):
                                        # Cr√©er deux colonnes pour les pr√©dictions
                                        detail_cols = st.columns(2 if ml_result else 1)
                                        
                                        # Afficher la pr√©diction statistique
                                        with detail_cols[0]:
                                            st.write("### Pr√©diction Statistique")
                                            winner_name_classic = classic_result['winner_name']
                                            st.write(f"**Vainqueur pr√©dit:** {winner_name_classic}")
                                            st.write(f"**Probabilit√©s:** {classic_result['red_probability']:.0%} (Rouge) vs {classic_result['blue_probability']:.0%} (Bleu)")
                                            st.write(f"**Confiance:** {classic_result['confidence']}")
                                        
                                        # Afficher la pr√©diction ML si disponible
                                        if ml_result:
                                            with detail_cols[1]:
                                                st.write("### Pr√©diction Machine Learning")
                                                winner_name_ml = ml_result['winner_name']
                                                st.write(f"**Vainqueur pr√©dit:** {winner_name_ml}")
                                                st.write(f"**Probabilit√©s:** {ml_result['red_probability']:.0%} (Rouge) vs {ml_result['blue_probability']:.0%} (Bleu)")
                                                st.write(f"**Confiance:** {ml_result['confidence']}")
                                        
                                        # Statistiques principales seulement
                                        st.write("### Statistiques principales")
                                        
                                        # Extraire les stats les plus importantes
                                        key_stats = [
                                            ('Record', f"{red_stats['wins']}-{red_stats['losses']}", f"{blue_stats['wins']}-{blue_stats['losses']}"),
                                            ('Frappes/min', f"{red_stats['SLpM']:.1f}", f"{blue_stats['SLpM']:.1f}"),
                                            ('Pr√©cision frappes', f"{red_stats['sig_str_acc']:.0%}", f"{blue_stats['sig_str_acc']:.0%}"),
                                            ('Takedowns/match', f"{red_stats['td_avg']:.1f}", f"{blue_stats['td_avg']:.1f}"),
                                            ('D√©fense takedowns', f"{red_stats['td_def']:.0%}", f"{blue_stats['td_def']:.0%}")
                                        ]
                                        
                                        # Cr√©er un DataFrame pour affichage
                                        stats_df = pd.DataFrame(key_stats, columns=['Statistique', red_match, blue_match])
                                        st.dataframe(stats_df, use_container_width=True, hide_index=True)
                                        
                                        # Lien pour plus de d√©tails
                                        st.caption("Utilisez l'onglet Pr√©diction pour une analyse compl√®te")
                    
                    # Ajouter la section de strat√©gie de paris si les pr√©dictions sont g√©n√©r√©es
                    if predictions_generated or st.session_state.get(f"show_strategy_{event_url}", False):
                        # Afficher la section de strat√©gie de paris
                        show_betting_strategy_section(
                            event_url=event_url,
                            event_name=event_name,
                            fights=fights,
                            predictions_data=st.session_state.fight_predictions[event_url],
                            current_bankroll=app_data["current_bankroll"]
                        )
                        
    else:
        # √âtat vide
        st.info("Aucun √©v√©nement charg√©. Utilisez le bouton ci-dessus pour r√©cup√©rer les prochains √©v√©nements UFC.")

# PARTIE 10


def show_bankroll_page():
    """Affiche la page de gestion de bankroll avec une interface am√©lior√©e"""
    # AM√âLIORATION UI: Titre de page avec animation
    st.markdown("""
    <div class="section-fade-in" style="text-align:center; margin-bottom: 25px;">
        <h2>üí∞ Gestion de bankroll et paris</h2>
        <p style="color: #aaa;">Suivez vos performances et g√©rez vos paris</p>
    </div>
    """, unsafe_allow_html=True)
    
    # AM√âLIORATION UI: Affichage de la bankroll actuelle dans une card moderne
    st.markdown(f"""
    <div class="card" style="text-align: center; margin-bottom: 30px;">
        <div style="color: #aaa; margin-bottom: 5px;">Bankroll actuelle</div>
        <div style="font-size: 2.5rem; font-weight: 700;">{app_data['current_bankroll']:.2f} ‚Ç¨</div>
    </div>
    """, unsafe_allow_html=True)
    
    # AM√âLIORATION UI: Tabs modernes pour organiser les fonctionnalit√©s
    bankroll_tabs = st.tabs(["üíº Ajuster la bankroll", "‚ûï Ajouter un pari", "‚öôÔ∏è Param√®tres"])
    
    # Tab 1: Ajuster la bankroll
    with bankroll_tabs[0]:
        st.subheader("Ajuster la bankroll")
        
        # AM√âLIORATION UI: Layout √† deux colonnes
        adjust_cols = st.columns([2, 1, 1])
        
        with adjust_cols[0]:
            adjustment_amount = st.number_input(
                "Montant (‚Ç¨)",
                min_value=0.0,
                step=10.0,
                format="%.2f",
                key="bankroll_adjustment_amount"
            )
        
        with adjust_cols[1]:
            adjustment_type = st.selectbox(
                "Type d'op√©ration",
                options=["D√©p√¥t", "Retrait", "D√©finir montant exact"],
                key="bankroll_adjustment_type"
            )
        
        with adjust_cols[2]:
            adjustment_note = st.text_input(
                "Note (optionnel)",
                value="",
                key="bankroll_adjustment_note"
            )
        
        # AM√âLIORATION UI: Informations contextuelles sur l'ajustement
        if adjustment_type == "D√©p√¥t":
            new_amount = app_data['current_bankroll'] + adjustment_amount
            operation = "+"
            color = "#4CAF50"
        elif adjustment_type == "Retrait":
            new_amount = max(0, app_data['current_bankroll'] - adjustment_amount)
            operation = "-" if adjustment_amount <= app_data['current_bankroll'] else "!"
            color = "#F44336" if adjustment_amount > app_data['current_bankroll'] else "#FFC107"
        else:  # "D√©finir montant exact"
            new_amount = adjustment_amount
            operation = "="
            color = "#1E88E5"
        
        # AM√âLIORATION UI: R√©sum√© de l'op√©ration avant validation
        if adjustment_amount > 0:
            st.markdown(f"""
            <div class="card" style="background: linear-gradient(145deg, rgba({
                '76, 175, 80' if operation == '+' else
                '244, 67, 54' if operation == '!' else
                '255, 193, 7' if operation == '-' else
                '30, 136, 229'
            }, 0.1) 0%, rgba({
                '56, 142, 60' if operation == '+' else
                '211, 47, 47' if operation == '!' else
                '255, 160, 0' if operation == '-' else
                '21, 101, 192'
            }, 0.1) 100%); margin: 15px 0;">
                <div style="display: flex; align-items: center; justify-content: space-between;">
                    <div>
                        <div style="font-weight: 500;">Op√©ration</div>
                        <div style="font-size: 1.2rem; font-weight: 600; color: {color};">
                            {adjustment_type}
                            {f" ({operation} {adjustment_amount:.2f} ‚Ç¨)" if operation != "=" else f" ‚Üí {adjustment_amount:.2f} ‚Ç¨"}
                        </div>
                    </div>
                    <div>
                        <div style="font-weight: 500;">Nouvelle bankroll</div>
                        <div style="font-size: 1.2rem; font-weight: 600;">{new_amount:.2f} ‚Ç¨</div>
                    </div>
                </div>
                {f'<div style="margin-top: 10px; color: #F44336; font-weight: 500;">‚ö†Ô∏è Montant de retrait sup√©rieur √† la bankroll!</div>' if operation == '!' else ''}
            </div>
            """, unsafe_allow_html=True)
        
        # Bouton de validation
        if st.button("Valider l'ajustement", type="primary", key="validate_bankroll_adjust", use_container_width=True):
            # Calculer la nouvelle bankroll
            if adjustment_type == "D√©p√¥t":
                new_bankroll = app_data['current_bankroll'] + adjustment_amount
                action = "deposit"
                if not adjustment_note:
                    adjustment_note = "D√©p√¥t"
            elif adjustment_type == "Retrait":
                if adjustment_amount > app_data['current_bankroll']:
                    st.error(f"‚ö†Ô∏è Montant du retrait ({adjustment_amount:.2f} ‚Ç¨) sup√©rieur √† la bankroll actuelle ({app_data['current_bankroll']:.2f} ‚Ç¨)")
                    new_bankroll = app_data['current_bankroll']
                    action = None
                else:
                    new_bankroll = app_data['current_bankroll'] - adjustment_amount
                    action = "withdraw"
                    if not adjustment_note:
                        adjustment_note = "Retrait"
            else:  # "D√©finir montant exact"
                new_bankroll = adjustment_amount
                action = "update"
                if not adjustment_note:
                    adjustment_note = "Mise √† jour manuelle"
            
            # Mettre √† jour la bankroll si n√©cessaire
            if action and new_bankroll != app_data['current_bankroll']:
                # Animation de chargement
                with st.spinner("Mise √† jour de la bankroll..."):
                    bets_dir = "bets"
                    bankroll_file = os.path.join(bets_dir, "bankroll.csv")
                    
                    # Charger le fichier existant
                    if os.path.exists(bankroll_file):
                        bankroll_df = pd.read_csv(bankroll_file)
                    else:
                        bankroll_df = pd.DataFrame(columns=["date", "amount", "action", "note"])
                    
                    # Ajouter la nouvelle entr√©e
                    new_entry = pd.DataFrame({
                        "date": [datetime.datetime.now().strftime("%Y-%m-%d")],
                        "amount": [new_bankroll],
                        "action": [action],
                        "note": [adjustment_note]
                    })
                    
                    bankroll_df = pd.concat([bankroll_df, new_entry], ignore_index=True)
                    bankroll_df.to_csv(bankroll_file, index=False)
                    
                    # Mettre √† jour app_data
                    app_data['current_bankroll'] = new_bankroll
                
                # AM√âLIORATION UI: Confirmation am√©lior√©e
                st.success(f"‚úÖ Bankroll mise √† jour: {new_bankroll:.2f} ‚Ç¨")
                
                # AM√âLIORATION UI: Card mise √† jour
                st.markdown(f"""
                <div class="card section-fade-in" style="text-align: center; margin: 20px 0; background: linear-gradient(145deg, rgba(76, 175, 80, 0.1) 0%, rgba(56, 142, 60, 0.1) 100%); 
                                                                         border: 1px solid rgba(76, 175, 80, 0.3);">
                    <div style="font-size: 3rem; margin-bottom: 10px;">‚úÖ</div>
                    <h3 style="margin-bottom: 15px; color: #4CAF50;">Bankroll mise √† jour</h3>
                    <div style="font-size: 2rem; font-weight: 700;">{new_bankroll:.2f} ‚Ç¨</div>
                    <div style="margin-top: 10px; color: rgba(255,255,255,0.6);">
                        {adjustment_note}
                    </div>
                </div>
                """, unsafe_allow_html=True)
    
    # Tab 2: Ajouter un pari
    with bankroll_tabs[1]:
        st.subheader("Ajouter un pari manuellement")
        
        # AM√âLIORATION UI: Interface d'ajout de pari r√©organis√©e
        # Ligne 1: Informations sur l'√©v√©nement
        event_cols = st.columns(2)
        with event_cols[0]:
            manual_event_name = st.text_input("Nom de l'√©v√©nement", value="UFC Fight Night", key="manual_event_name")
        with event_cols[1]:
            manual_event_date = st.date_input("Date de l'√©v√©nement", value=datetime.datetime.now(), key="manual_event_date")
        
        # Ligne 2: Informations sur les combattants
        fighter_cols = st.columns(2)
        with fighter_cols[0]:
            manual_fighter_red = st.selectbox("Combattant rouge", options=app_data["fighter_names"], key="manual_fighter_red")
        with fighter_cols[1]:
            # Exclure le combattant rouge des options
            manual_blue_options = [name for name in app_data["fighter_names"] if name != manual_fighter_red]
            manual_fighter_blue = st.selectbox("Combattant bleu", options=manual_blue_options, key="manual_fighter_blue")
        
        # Ligne 3: Informations sur le pari
        bet_cols = st.columns(3)
        with bet_cols[0]:
            manual_pick = st.selectbox("Pari sur", options=[manual_fighter_red, manual_fighter_blue], key="manual_pick")
        
        # Mode de saisie de la cote (manuel vs slider)
        with bet_cols[1]:
            manual_odds_mode = st.radio(
                "Mode de saisie de la cote",
                options=["Manuel", "Slider"],
                index=0,  # Manuel par d√©faut
                key="manual_odds_mode"
            )
            
            if manual_odds_mode == "Manuel":
                manual_odds = st.number_input("Cote", min_value=1.01, value=2.0, step=0.01, format="%.2f", key="manual_odds_manual")
            else:
                manual_odds = st.slider("Cote", min_value=1.01, max_value=10.0, value=2.0, step=0.05, format="%.2f", key="manual_odds_slider")
        
        with bet_cols[2]:
            # Mode de saisie de la mise (manuel vs slider)
            manual_stake_mode = st.radio(
                "Mode de saisie de la mise",
                options=["Manuel", "Slider"],
                index=0,  # Manuel par d√©faut
                key="manual_stake_mode"
            )
            
            if manual_stake_mode == "Manuel":
                manual_stake = st.number_input(
                    "Mise (‚Ç¨)",
                    min_value=0.0, 
                    max_value=float(app_data['current_bankroll']),
                    value=min(50.0, float(app_data['current_bankroll'])),
                    step=5.0,
                    key="manual_stake_manual"
                )
            else:
                # AM√âLIORATION UI: Utiliser un slider pour la mise
                manual_stake = st.slider(
                    "Mise (‚Ç¨)",
                    min_value=0.0, 
                    max_value=float(app_data['current_bankroll']),
                    value=min(50.0, float(app_data['current_bankroll'])),
                    step=5.0,
                    key="manual_stake_slider"
                )
        
        # AM√âLIORATION UI: Calculer et afficher le gain potentiel
        potential_profit = manual_stake * (manual_odds - 1)
        roi_pct = (potential_profit / manual_stake) * 100 if manual_stake > 0 else 0
        
        # Afficher les m√©triques en 3 colonnes
        metrics_cols = st.columns(3)
        with metrics_cols[0]:
            st.metric("Mise", f"{manual_stake:.2f}‚Ç¨")
        with metrics_cols[1]:
            st.metric("Gain potentiel", f"{potential_profit:.2f}‚Ç¨")
        with metrics_cols[2]:
            st.metric("ROI", f"{roi_pct:.1f}%")
        
        # AM√âLIORATION UI: Information sur la bankroll
        st.markdown(f"""
        <div style="margin: 10px 0; font-size: 0.9rem; color: #aaa; text-align: right;">
            <i>% de bankroll: {manual_stake/app_data['current_bankroll']*100:.1f}%</i>
        </div>
        """, unsafe_allow_html=True)
        
        # Bouton pour enregistrer le pari
        if st.button("üíæ Enregistrer le pari", type="primary", key="save_manual_bet_btn", use_container_width=True):
            if manual_stake > app_data['current_bankroll']:
                st.error(f"‚ö†Ô∏è Mise ({manual_stake:.2f} ‚Ç¨) sup√©rieure √† la bankroll actuelle ({app_data['current_bankroll']:.2f} ‚Ç¨)")
            elif manual_stake <= 0:
                st.error("‚ö†Ô∏è La mise doit √™tre sup√©rieure √† 0 ‚Ç¨")
            else:
                # Animation de chargement
                with st.spinner("Enregistrement du pari..."):
                    # Enregistrer le pari
                    if add_manual_bet(
                        event_name=manual_event_name,
                        event_date=manual_event_date,
                        fighter_red=manual_fighter_red,
                        fighter_blue=manual_fighter_blue,
                        pick=manual_pick,
                        odds=manual_odds,
                        stake=manual_stake
                    ):
                        # AM√âLIORATION UI: Confirmation plus visuelle
                        st.success(f"‚úÖ Pari enregistr√© avec succ√®s! Mise de {manual_stake:.2f} ‚Ç¨ sur {manual_pick} @ {manual_odds:.2f}")
                        
                        # AM√âLIORATION UI: Carte de confirmation
                        st.markdown(f"""
                        <div class="card section-fade-in" style="background: linear-gradient(145deg, rgba(76, 175, 80, 0.1) 0%, rgba(56, 142, 60, 0.1) 100%); 
                                                                 border: 1px solid rgba(76, 175, 80, 0.3); text-align: center;">
                            <div style="font-size: 3rem; margin-bottom: 10px;">‚úÖ</div>
                            <h3 style="margin-bottom: 15px; color: #4CAF50;">Pari enregistr√© avec succ√®s</h3>
                            <div style="font-weight: 600; font-size: 1.2rem; margin-bottom: 15px;">
                                {manual_event_name} - {manual_event_date}
                            </div>
                            <div style="font-weight: 600; font-size: 1.1rem;">{manual_pick} @ {manual_odds:.2f}</div>
                            <div style="display: flex; justify-content: space-between; margin: 15px 0; color: rgba(255,255,255,0.8);">
                                <div>Mise: <b>{manual_stake:.2f}‚Ç¨</b></div>
                                <div>Gain potentiel: <b>{potential_profit:.2f}‚Ç¨</b></div>
                                <div>ROI: <b>{roi_pct:.1f}%</b></div>
                            </div>
                        </div>
                        """, unsafe_allow_html=True)
                    else:
                        st.error("‚ùå Erreur lors de l'enregistrement du pari.")
    
    # Tab 3: Param√®tres
    with bankroll_tabs[2]:
        st.subheader("Param√®tres de gestion de bankroll")
        
        # AM√âLIORATION UI: Param√®tres dans une card moderne
        st.markdown("""
        <div class="card">
            <h4 style="margin-top: 0;">Strat√©gie Kelly par d√©faut</h4>
            <p>Choisissez la fraction Kelly √† utiliser par d√©faut pour les recommandations de paris</p>
        </div>
        """, unsafe_allow_html=True)
        
        # S√©lection de la strat√©gie Kelly par d√©faut
        kelly_strategy = st.selectbox(
            "Strat√©gie Kelly par d√©faut",
            options=["Kelly pur", "Kelly/2", "Kelly/3", "Kelly/4", "Kelly/5", "Kelly/10"],
            index=3,  # Kelly/4 par d√©faut
            key="default_kelly_strategy"
        )
        st.session_state.kelly_strategy = kelly_strategy
        
        # AM√âLIORATION UI: Information sur les strat√©gies Kelly
        st.markdown("""
        <div class="info-box">
            <h4 style="margin-top: 0;">üßÆ √Ä propos des strat√©gies Kelly</h4>
            <p><b>Kelly pur</b>: Mise optimale th√©orique, mais peut √™tre risqu√©e</p>
            <p><b>Kelly fractionn√©</b>: Version plus conservatrice (Kelly/2, Kelly/4...) qui r√©duit la variance</p>
            <p>Pour la plupart des parieurs, une strat√©gie Kelly/4 ou Kelly/5 offre un bon √©quilibre entre rendement et gestion du risque.</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Param√®tre de bankroll minimum
        st.markdown("""
        <div class="card" style="margin-top: 20px;">
            <h4 style="margin-top: 0;">Alerte de bankroll minimum</h4>
            <p>D√©finissez une limite en dessous de laquelle vous recevrez des alertes</p>
        </div>
        """, unsafe_allow_html=True)
        
        # S√©lection de la bankroll minimum
        min_bankroll = st.number_input(
            "Bankroll minimum (‚Ç¨)",
            min_value=0.0,
            max_value=float(app_data['current_bankroll']),
            value=float(app_data['current_bankroll']) * 0.5,  # 50% par d√©faut
            step=10.0,
            format="%.2f",
            key="min_bankroll"
        )
        
        # AM√âLIORATION UI: Affichage du statut actuel
        if app_data['current_bankroll'] <= min_bankroll:
            st.markdown("""
            <div style="background-color: rgba(244, 67, 54, 0.1); padding: 10px; border-radius: 8px; margin-top: 10px; border-left: 3px solid #F44336;">
                <b style="color: #F44336;">‚ö†Ô∏è Attention:</b> Votre bankroll actuelle est en dessous ou √©gale √† votre limite d'alerte.
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown("""
            <div style="background-color: rgba(76, 175, 80, 0.1); padding: 10px; border-radius: 8px; margin-top: 10px; border-left: 3px solid #4CAF50;">
                <b style="color: #4CAF50;">‚úÖ Statut:</b> Votre bankroll actuelle est au-dessus de votre limite d'alerte.
            </div>
            """, unsafe_allow_html=True)

def show_history_page():
    """Affiche la page d'historique des paris avec une interface modernis√©e"""
    # AM√âLIORATION UI: Titre de page avec animation
    st.markdown("""
    <div class="section-fade-in" style="text-align:center; margin-bottom: 25px;">
        <h2>üìä Historique des paris et performances</h2>
        <p style="color: #aaa;">Analysez vos r√©sultats et optimisez votre strat√©gie</p>
    </div>
    """, unsafe_allow_html=True)
    
    # V√©rifier si les fichiers existent
    bets_file = os.path.join("bets", "bets.csv")
    bankroll_file = os.path.join("bets", "bankroll.csv")
    has_bets = os.path.exists(bets_file)
    has_bankroll = os.path.exists(bankroll_file)
    
    if has_bets and has_bankroll:
        # Animation de chargement
        with st.spinner("Chargement des donn√©es d'historique..."):
            bets_df = pd.read_csv(bets_file)
            bankroll_df = pd.read_csv(bankroll_file)
        
        # AM√âLIORATION UI: Graph d'√©volution de la bankroll modernis√©
        if not bankroll_df.empty:
            st.subheader("√âvolution de la bankroll")
            
            # AM√âLIORATION UI: Graphique modernis√©
            bankroll_df['date'] = pd.to_datetime(bankroll_df['date'])
            
            fig = px.line(
                bankroll_df, 
                x="date", 
                y="amount",
                title=None,
                labels={"amount": "Bankroll (‚Ç¨)", "date": "Date"}
            )
            
            # Am√©lioration du style du graphique
            fig.update_traces(
                line=dict(width=3, color='#4CAF50'),
                mode='lines+markers',
                marker=dict(size=8, color='#4CAF50')
            )
            
            fig.update_layout(
                paper_bgcolor='rgba(0,0,0,0)',
                plot_bgcolor='rgba(0,0,0,0)',
                font=dict(color='white'),
                xaxis=dict(
                    title="Date",
                    showgrid=True,
                    gridcolor='rgba(255,255,255,0.1)',
                    tickformat='%d %b %Y'
                ),
                yaxis=dict(
                    title="Bankroll (‚Ç¨)",
                    showgrid=True,
                    gridcolor='rgba(255,255,255,0.1)',
                ),
                margin=dict(l=40, r=40, t=40, b=40),
                hovermode='x unified'
            )
            
            # Ajouter des annotations pour les points importants
            if len(bankroll_df) > 1:
                # Point initial
                fig.add_annotation(
                    x=bankroll_df['date'].iloc[0],
                    y=bankroll_df['amount'].iloc[0],
                    text="Initial",
                    showarrow=True,
                    arrowhead=1,
                    ax=0,
                    ay=-40
                )
                
                # Point final
                fig.add_annotation(
                    x=bankroll_df['date'].iloc[-1],
                    y=bankroll_df['amount'].iloc[-1],
                    text="Actuel",
                    showarrow=True,
                    arrowhead=1,
                    ax=0,
                    ay=-40
                )
                
                # Point haut
                max_idx = bankroll_df['amount'].idxmax()
                if max_idx != 0 and max_idx != len(bankroll_df) - 1:
                    fig.add_annotation(
                        x=bankroll_df['date'].iloc[max_idx],
                        y=bankroll_df['amount'].iloc[max_idx],
                        text="Max",
                        showarrow=True,
                        arrowhead=1,
                        ax=0,
                        ay=-40
                    )
                
                # Point bas (apr√®s le d√©but)
                if len(bankroll_df) > 2:
                    min_data = bankroll_df.iloc[1:] 
                    min_idx = min_data['amount'].idxmin()
                    if min_idx != len(bankroll_df) - 1:
                        fig.add_annotation(
                            x=bankroll_df['date'].iloc[min_idx],
                            y=bankroll_df['amount'].iloc[min_idx],
                            text="Min",
                            showarrow=True,
                            arrowhead=1,
                            ax=0,
                            ay=40
                        )
            
            st.plotly_chart(fig, use_container_width=True)
        
        # R√©sum√© des performances
        if not bets_df.empty:
            # Obtenir les statistiques
            betting_stats = get_betting_summary(bets_df)
            
            # AM√âLIORATION UI: Dashboard de m√©triques principales
            st.subheader("Tableau de bord des performances")
            
            # Top row: 4 main metrics
            metrics_row1 = st.columns(4)
            with metrics_row1[0]:
                st.metric("Total des paris", f"{betting_stats['total_bets']}")
            with metrics_row1[1]:
                st.metric("Paris en cours", f"{betting_stats['open_bets']}")
            with metrics_row1[2]:
                st.metric("Victoires/D√©faites", f"{betting_stats['wins']}/{betting_stats['losses']}")
            with metrics_row1[3]:
                st.metric(
                    "Taux de r√©ussite", 
                    f"{betting_stats['win_rate']:.1f}%",
                    delta=None
                )
            
            # Second row: Financial metrics
            metrics_row2 = st.columns(4)
            with metrics_row2[0]:
                st.metric(
                    "Total mis√©", 
                    f"{betting_stats['total_staked']:.2f} ‚Ç¨",
                    delta=None
                )
            with metrics_row2[1]:
                st.metric(
                    "Profit total", 
                    f"{betting_stats['total_profit']:.2f} ‚Ç¨",
                    delta=f"{betting_stats['roi']:.1f}%" if betting_stats['total_profit'] != 0 else None,
                    delta_color="normal"
                )
            with metrics_row2[2]:
                avg_stake = betting_stats['total_staked'] / max(betting_stats['total_bets'], 1)
                st.metric("Mise moyenne", f"{avg_stake:.2f} ‚Ç¨")
            with metrics_row2[3]:
                avg_odds = betting_stats['avg_odds']
                st.metric("Cote moyenne", f"{avg_odds:.2f}")
            
            # AM√âLIORATION UI: Carte de streaks
            streak_cols = st.columns(2)
            with streak_cols[0]:
                # Streak actuelle
                streak_type = betting_stats['current_streak_type']
                streak_count = betting_stats['current_streak']
                
                if streak_count > 0:
                    streak_color = "#4CAF50" if streak_type == "win" else "#F44336"
                    streak_text = "victoires" if streak_type == "win" else "d√©faites"
                    
                    st.markdown(f"""
                    <div class="card" style="background: linear-gradient(145deg, rgba({
                        '76, 175, 80' if streak_type == 'win' else '244, 67, 54'
                    }, 0.1) 0%, rgba({
                        '56, 142, 60' if streak_type == 'win' else '211, 47, 47'
                    }, 0.1) 100%); text-align: center;">
                        <div style="color: #aaa; margin-bottom: 5px;">S√©rie actuelle</div>
                        <div style="font-size: 2rem; font-weight: 700; color: {streak_color};">{streak_count} {streak_text}</div>
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    st.markdown("""
                    <div class="card" style="text-align: center;">
                        <div style="color: #aaa; margin-bottom: 5px;">S√©rie actuelle</div>
                        <div style="font-size: 1.2rem; font-weight: 500;">Aucune s√©rie en cours</div>
                    </div>
                    """, unsafe_allow_html=True)
            
            with streak_cols[1]:
                # Meilleure s√©rie
                best_streak = betting_stats['longest_win_streak']
                
                if best_streak > 0:
                    st.markdown(f"""
                    <div class="card" style="background: linear-gradient(145deg, rgba(76, 175, 80, 0.1) 0%, rgba(56, 142, 60, 0.1) 100%); text-align: center;">
                        <div style="color: #aaa; margin-bottom: 5px;">Meilleure s√©rie</div>
                        <div style="font-size: 2rem; font-weight: 700; color: #4CAF50;">{best_streak} victoires</div>
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    st.markdown("""
                    <div class="card" style="text-align: center;">
                        <div style="color: #aaa; margin-bottom: 5px;">Meilleure s√©rie</div>
                        <div style="font-size: 1.2rem; font-weight: 500;">Aucune s√©rie enregistr√©e</div>
                    </div>
                    """, unsafe_allow_html=True)
            
            # AM√âLIORATION UI: Utiliser des onglets pour organiser les paris
            bet_subtabs = st.tabs(["üé≤ Paris en cours", "üìú Historique des paris", "‚úèÔ∏è Modifier/Supprimer"])
            
            # Section des paris en cours
            with bet_subtabs[0]:
                st.subheader("Paris en cours")
                open_bets = bets_df[bets_df["status"] == "open"]
                if not open_bets.empty:
                    # AM√âLIORATION UI: Formater le DataFrame pour un affichage modernis√©
                    display_open_bets = open_bets.copy()
                    display_open_bets['gain_potentiel'] = display_open_bets.apply(lambda row: row['stake'] * (row['odds'] - 1), axis=1)
                    
                    # S√©lectionner et renommer les colonnes
                    display_open_bets = display_open_bets[["bet_id", "event_name", "event_date", "fighter_red", "fighter_blue", "pick", "odds", "stake", "gain_potentiel"]]
                    display_open_bets.columns = ["ID", "√âv√©nement", "Date", "Rouge", "Bleu", "Pari sur", "Cote", "Mise (‚Ç¨)", "Gain potentiel (‚Ç¨)"]
                    
                    # AM√âLIORATION UI: Dataframe avec formatage am√©lior√©
                    st.dataframe(
                        display_open_bets,
                        use_container_width=True,
                        column_config={
                            "ID": st.column_config.NumberColumn("ID", format="%d"),
                            "√âv√©nement": st.column_config.TextColumn("√âv√©nement"),
                            "Date": st.column_config.DateColumn("Date", format="DD/MM/YYYY"),
                            "Rouge": st.column_config.TextColumn("Rouge"),
                            "Bleu": st.column_config.TextColumn("Bleu"),
                            "Pari sur": st.column_config.TextColumn("Pari sur"),
                            "Cote": st.column_config.NumberColumn("Cote", format="%.2f"),
                            "Mise (‚Ç¨)": st.column_config.NumberColumn("Mise (‚Ç¨)", format="%.2f"),
                            "Gain potentiel (‚Ç¨)": st.column_config.NumberColumn("Gain potentiel (‚Ç¨)", format="%.2f")
                        },
                        hide_index=True
                    )
                    
                    # AM√âLIORATION UI: R√©sum√© des paris en cours
                    total_stake = display_open_bets["Mise (‚Ç¨)"].sum()
                    total_potential = display_open_bets["Gain potentiel (‚Ç¨)"].sum()
                    avg_odds = display_open_bets["Cote"].mean()
                    
                    st.markdown(f"""
                    <div class="card" style="margin-top: 15px; background: linear-gradient(145deg, rgba(30, 136, 229, 0.1) 0%, rgba(21, 101, 192, 0.1) 100%);
                                         border-left: 3px solid #1E88E5;">
                        <h4 style="margin-top: 0; color: #1E88E5;">R√©sum√© des paris en cours</h4>
                        <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px;">
                            <div>
                                <div style="color: #aaa; font-size: 0.9rem;">Total mis√©</div>
                                <div style="font-size: 1.1rem; font-weight: 600;">{total_stake:.2f} ‚Ç¨</div>
                            </div>
                            <div>
                                <div style="color: #aaa; font-size: 0.9rem;">Gain potentiel</div>
                                <div style="font-size: 1.1rem; font-weight: 600;">{total_potential:.2f} ‚Ç¨</div>
                            </div>
                            <div>
                                <div style="color: #aaa; font-size: 0.9rem;">Cote moyenne</div>
                                <div style="font-size: 1.1rem; font-weight: 600;">{avg_odds:.2f}</div>
                            </div>
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    # AM√âLIORATION UI: Message d'√©tat vide stylis√©
                    st.markdown("""
                    <div class="card" style="text-align: center; padding: 30px 20px;">
                        <div style="font-size: 3rem; margin-bottom: 15px;">üé≤</div>
                        <h3 style="margin-bottom: 15px;">Aucun pari en cours</h3>
                        <p>Utilisez l'onglet "Pr√©diction" ou "√âv√©nements √† venir" pour placer de nouveaux paris.</p>
                    </div>
                    """, unsafe_allow_html=True)
            
            # Section historique des paris
            with bet_subtabs[1]:
                st.subheader("Historique des paris")
                closed_bets = bets_df[bets_df["status"] == "closed"]
                if not closed_bets.empty:
                    # AM√âLIORATION UI: Formater le DataFrame pour l'affichage avec des ic√¥nes
                    display_closed_bets = closed_bets.copy()
                    
                    # Ajouter une colonne pour formater le r√©sultat avec des ic√¥nes
                    def format_result(result):
                        if result == "win":
                            return "‚úÖ Victoire"
                        elif result == "loss":
                            return "‚ùå D√©faite"
                        elif result == "void":
                            return "‚ö™ Annul√©"
                        else:
                            return result
                    
                    display_closed_bets['formatted_result'] = display_closed_bets['result'].apply(format_result)
                    
# S√©lectionner et renommer les colonnes
                    display_closed_bets = display_closed_bets[["bet_id", "event_name", "event_date", "fighter_red", "fighter_blue", "pick", "odds", "stake", "formatted_result", "profit", "roi"]]
                    display_closed_bets.columns = ["ID", "√âv√©nement", "Date", "Rouge", "Bleu", "Pari sur", "Cote", "Mise (‚Ç¨)", "R√©sultat", "Profit (‚Ç¨)", "ROI (%)"]
                    
                    # AM√âLIORATION UI: Option de filtrage
                    filter_col1, filter_col2 = st.columns(2)
                    
                    with filter_col1:
                        result_filter = st.multiselect(
                            "Filtrer par r√©sultat",
                            options=["‚úÖ Victoire", "‚ùå D√©faite", "‚ö™ Annul√©"],
                            default=["‚úÖ Victoire", "‚ùå D√©faite", "‚ö™ Annul√©"],
                            key="result_filter"
                        )
                    
                    with filter_col2:
                        sort_by = st.selectbox(
                            "Trier par",
                            options=["Date (r√©cent ‚Üí ancien)", "Date (ancien ‚Üí r√©cent)", "ROI (√©lev√© ‚Üí bas)", "Profit (√©lev√© ‚Üí bas)"],
                            index=0,
                            key="sort_by"
                        )
                    
                    # Appliquer les filtres
                    if result_filter:
                        display_closed_bets = display_closed_bets[display_closed_bets["R√©sultat"].isin(result_filter)]
                    
                    # Appliquer le tri
                    if sort_by == "Date (r√©cent ‚Üí ancien)":
                        display_closed_bets = display_closed_bets.sort_values("Date", ascending=False)
                    elif sort_by == "Date (ancien ‚Üí r√©cent)":
                        display_closed_bets = display_closed_bets.sort_values("Date", ascending=True)
                    elif sort_by == "ROI (√©lev√© ‚Üí bas)":
                        display_closed_bets = display_closed_bets.sort_values("ROI (%)", ascending=False)
                    elif sort_by == "Profit (√©lev√© ‚Üí bas)":
                        display_closed_bets = display_closed_bets.sort_values("Profit (‚Ç¨)", ascending=False)
                    
                    # Afficher le tableau
                    st.dataframe(
                        display_closed_bets,
                        use_container_width=True,
                        column_config={
                            "ID": st.column_config.NumberColumn("ID", format="%d"),
                            "√âv√©nement": st.column_config.TextColumn("√âv√©nement"),
                            "Date": st.column_config.DateColumn("Date", format="DD/MM/YYYY"),
                            "Rouge": st.column_config.TextColumn("Rouge"),
                            "Bleu": st.column_config.TextColumn("Bleu"),
                            "Pari sur": st.column_config.TextColumn("Pari sur"),
                            "Cote": st.column_config.NumberColumn("Cote", format="%.2f"),
                            "Mise (‚Ç¨)": st.column_config.NumberColumn("Mise (‚Ç¨)", format="%.2f"),
                            "R√©sultat": st.column_config.TextColumn("R√©sultat"),
                            "Profit (‚Ç¨)": st.column_config.NumberColumn("Profit (‚Ç¨)", format="%.2f"),
                            "ROI (%)": st.column_config.NumberColumn("ROI (%)", format="%.1f")
                        },
                        hide_index=True
                    )
                    
                    # AM√âLIORATION UI: Graphiques d'analyse
                    st.subheader("Analyse des r√©sultats")
                    
                    analysis_tabs = st.tabs(["üìä R√©partition", "üìà Performance", "üîç D√©tails"])
                    
                    # Onglet R√©partition
                    with analysis_tabs[0]:
                        chart_cols = st.columns(2)
                        
                        with chart_cols[0]:
                            # R√©partition des r√©sultats en pie chart
                            result_counts = closed_bets["result"].value_counts().reset_index()
                            result_counts.columns = ["result", "count"]
                            
                            # Remplacer les valeurs pour l'affichage
                            result_counts["result"] = result_counts["result"].replace({
                                "win": "Victoire",
                                "loss": "D√©faite",
                                "void": "Annul√©"
                            })
                            
                            fig_results = px.pie(
                                result_counts, 
                                values="count", 
                                names="result",
                                title="R√©partition des r√©sultats",
                                color="result",
                                color_discrete_map={
                                    "Victoire": "#4CAF50",
                                    "D√©faite": "#F44336",
                                    "Annul√©": "#9E9E9E"
                                }
                            )
                            
                            fig_results.update_layout(
                                paper_bgcolor='rgba(0,0,0,0)',
                                plot_bgcolor='rgba(0,0,0,0)',
                                font=dict(color='white'),
                                margin=dict(l=20, r=20, t=30, b=20),
                                legend=dict(orientation="h", y=-0.1)
                            )
                            
                            st.plotly_chart(fig_results, use_container_width=True)
                        
                        with chart_cols[1]:
                            # R√©partition des mises et profits
                            # Cr√©er un DataFrame r√©sum√©
                            summary_df = pd.DataFrame({
                                "Cat√©gorie": ["Mises", "Profits", "Pertes"],
                                "Montant": [
                                    closed_bets["stake"].sum(),
                                    closed_bets[closed_bets["profit"] > 0]["profit"].sum(),
                                    abs(closed_bets[closed_bets["profit"] < 0]["profit"].sum())
                                ]
                            })
                            
                            fig_finances = px.bar(
                                summary_df,
                                x="Cat√©gorie",
                                y="Montant",
                                title="R√©partition financi√®re",
                                color="Cat√©gorie",
                                color_discrete_map={
                                    "Mises": "#1E88E5",
                                    "Profits": "#4CAF50",
                                    "Pertes": "#F44336"
                                }
                            )
                            
                            fig_finances.update_layout(
                                paper_bgcolor='rgba(0,0,0,0)',
                                plot_bgcolor='rgba(0,0,0,0)',
                                font=dict(color='white'),
                                margin=dict(l=20, r=20, t=30, b=20),
                                showlegend=False,
                                xaxis=dict(
                                    title=None,
                                    showgrid=False
                                ),
                                yaxis=dict(
                                    title="Montant (‚Ç¨)",
                                    showgrid=True,
                                    gridcolor='rgba(255,255,255,0.1)'
                                )
                            )
                            
                            st.plotly_chart(fig_finances, use_container_width=True)
                    
                    # FIX: Correction du code pour l'onglet Performance (avec profit_cumul)
                    with analysis_tabs[1]:
                        # Convertir la date pour le graphique
                        perf_df = display_closed_bets.copy()  # Utiliser display_closed_bets au lieu de closed_bets
                        perf_df["Date"] = pd.to_datetime(perf_df["Date"])
                        perf_df = perf_df.sort_values("Date")
                        
                        # Calculer le profit cumulatif
                        perf_df["profit_cumul"] = perf_df["Profit (‚Ç¨)"].cumsum()
                        
                        # Cr√©er le graphique d'√©volution du profit
                        fig_profit = px.line(
                            perf_df,
                            x="Date",
                            y="profit_cumul",
                            title="√âvolution du profit cumul√©",
                            markers=True
                        )
                        
                        fig_profit.update_traces(
                            line=dict(width=3, color='#4CAF50'),
                            marker=dict(size=8, color='#4CAF50')
                        )
                        
                        fig_profit.update_layout(
                            paper_bgcolor='rgba(0,0,0,0)',
                            plot_bgcolor='rgba(0,0,0,0)',
                            font=dict(color='white'),
                            margin=dict(l=20, r=20, t=30, b=20),
                            xaxis=dict(
                                title="Date",
                                showgrid=True,
                                gridcolor='rgba(255,255,255,0.1)'
                            ),
                            yaxis=dict(
                                title="Profit cumul√© (‚Ç¨)",
                                showgrid=True,
                                gridcolor='rgba(255,255,255,0.1)'
                            )
                        )
                        
                        # Ajouter une ligne horizontale √† z√©ro
                        fig_profit.add_shape(
                            type="line",
                            x0=perf_df["Date"].min(),
                            x1=perf_df["Date"].max(),
                            y0=0,
                            y1=0,
                            line=dict(color="rgba(255,255,255,0.3)", width=1, dash="dash")
                        )
                        
                        st.plotly_chart(fig_profit, use_container_width=True)
                        
                        # Graphique ROI par cote
                        roi_by_odds = px.scatter(
                            display_closed_bets,
                            x="Cote",
                            y="ROI (%)",
                            title="ROI par rapport √† la cote",
                            color="R√©sultat",
                            color_discrete_map={
                                "‚úÖ Victoire": "#4CAF50",
                                "‚ùå D√©faite": "#F44336",
                                "‚ö™ Annul√©": "#9E9E9E"
                            },
                            hover_data=["√âv√©nement", "Pari sur", "Mise (‚Ç¨)"]
                        )
                        
                        roi_by_odds.update_layout(
                            paper_bgcolor='rgba(0,0,0,0)',
                            plot_bgcolor='rgba(0,0,0,0)',
                            font=dict(color='white'),
                            margin=dict(l=20, r=20, t=30, b=20),
                            xaxis=dict(
                                title="Cote",
                                showgrid=True,
                                gridcolor='rgba(255,255,255,0.1)'
                            ),
                            yaxis=dict(
                                title="ROI (%)",
                                showgrid=True,
                                gridcolor='rgba(255,255,255,0.1)'
                            )
                        )
                        
                        # Ajouter une ligne horizontale √† z√©ro
                        roi_by_odds.add_shape(
                            type="line",
                            x0=display_closed_bets["Cote"].min(),
                            x1=display_closed_bets["Cote"].max(),
                            y0=0,
                            y1=0,
                            line=dict(color="rgba(255,255,255,0.3)", width=1, dash="dash")
                        )
                        
                        st.plotly_chart(roi_by_odds, use_container_width=True)
                    
                    # Onglet D√©tails
                    with analysis_tabs[2]:
                        # M√©trique par mois
                        if not display_closed_bets.empty and "Date" in display_closed_bets.columns:
                            # Convertir la date au format datetime si ce n'est pas d√©j√† fait
                            display_closed_bets["Date"] = pd.to_datetime(display_closed_bets["Date"])
                            display_closed_bets["Mois"] = display_closed_bets["Date"].dt.strftime("%Y-%m")
                            
                            monthly_stats = display_closed_bets.groupby("Mois").agg({
                                "ID": "count",
                                "Profit (‚Ç¨)": "sum",
                                "Mise (‚Ç¨)": "sum"
                            }).reset_index()
                            
                            # Calculer le ROI mensuel
                            monthly_stats["ROI (%)"] = monthly_stats["Profit (‚Ç¨)"] / monthly_stats["Mise (‚Ç¨)"] * 100
                            monthly_stats.columns = ["Mois", "Nombre de paris", "Profit (‚Ç¨)", "Total mis√© (‚Ç¨)", "ROI (%)"]
                            
                            st.subheader("Performance par mois")
                            
                            st.dataframe(
                                monthly_stats,
                                use_container_width=True,
                                column_config={
                                    "Mois": st.column_config.TextColumn("Mois"),
                                    "Nombre de paris": st.column_config.NumberColumn("Nombre de paris", format="%d"),
                                    "Profit (‚Ç¨)": st.column_config.NumberColumn("Profit (‚Ç¨)", format="%.2f"),
                                    "Total mis√© (‚Ç¨)": st.column_config.NumberColumn("Total mis√© (‚Ç¨)", format="%.2f"),
                                    "ROI (%)": st.column_config.NumberColumn("ROI (%)", format="%.1f")
                                },
                                hide_index=True
                            )
                            
                            # Graphique d'√©volution mensuelle
                            fig_monthly = px.bar(
                                monthly_stats,
                                x="Mois",
                                y="Profit (‚Ç¨)",
                                title="Profit mensuel",
                                color="ROI (%)",
                                color_continuous_scale=["#F44336", "#FFEB3B", "#4CAF50"],
                                text="ROI (%)"
                            )
                            
                            fig_monthly.update_layout(
                                paper_bgcolor='rgba(0,0,0,0)',
                                plot_bgcolor='rgba(0,0,0,0)',
                                font=dict(color='white'),
                                margin=dict(l=20, r=20, t=30, b=20),
                                xaxis=dict(
                                    title=None,
                                    showgrid=False
                                ),
                                yaxis=dict(
                                    title="Profit (‚Ç¨)",
                                    showgrid=True,
                                    gridcolor='rgba(255,255,255,0.1)'
                                )
                            )
                            
                            fig_monthly.update_traces(
                                texttemplate="%{text:.1f}%",
                                textposition="outside"
                            )
                            
                            st.plotly_chart(fig_monthly, use_container_width=True)
                else:
                    # AM√âLIORATION UI: Message d'√©tat vide stylis√©
                    st.markdown("""
                    <div class="card" style="text-align: center; padding: 30px 20px;">
                        <div style="font-size: 3rem; margin-bottom: 15px;">üìú</div>
                        <h3 style="margin-bottom: 15px;">Aucun pari dans l'historique</h3>
                        <p>Commencez √† parier pour voir appara√Ætre votre historique ici.</p>
                    </div>
                    """, unsafe_allow_html=True)
            
            # Section de gestion des paris
            with bet_subtabs[2]:
                st.subheader("G√©rer les paris")
                
                # AM√âLIORATION UI: Interface √† deux colonnes
                manage_columns = st.columns(2)
                
                # Colonne pour mettre √† jour les paris
                with manage_columns[0]:
                    st.markdown("""
                    <div class="card">
                        <h3 style="margin-top: 0;">Mettre √† jour un pari</h3>
                        <p>Entrez le r√©sultat d'un pari en cours</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # S√©lectionner un pari √† mettre √† jour
                    open_bets = bets_df[bets_df["status"] == "open"]
                    open_bet_ids = open_bets["bet_id"].tolist() if not open_bets.empty else []
                    
                    if open_bet_ids:
                        update_bet_id = st.selectbox(
                            "Choisir un pari √† mettre √† jour:",
                            options=open_bet_ids,
                            format_func=lambda x: f"#{x} - {open_bets[open_bets['bet_id'] == x]['event_name'].values[0]} ({open_bets[open_bets['bet_id'] == x]['pick'].values[0]})",
                            key="update_bet_select"
                        )
                        
                        # R√©cup√©rer les informations du pari
                        selected_bet = open_bets[open_bets["bet_id"] == update_bet_id].iloc[0]
                        
                        # AM√âLIORATION UI: Affichage am√©lior√© des d√©tails du pari
                        st.markdown(f"""
                        <div class="card" style="background: linear-gradient(145deg, rgba(30, 136, 229, 0.1) 0%, rgba(21, 101, 192, 0.1) 100%);">
                            <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                                <div style="font-weight: 500;">Pari #{update_bet_id}</div>
                                <div style="font-weight: 500;">{selected_bet['event_name']}</div>
                            </div>
                            <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                                <div>Pick</div>
                                <div style="font-weight: 600;">{selected_bet['pick']}</div>
                            </div>
                            <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                                <div>Cote</div>
                                <div style="font-weight: 600;">{selected_bet['odds']}</div>
                            </div>
                            <div style="display: flex; justify-content: space-between;">
                                <div>Mise</div>
                                <div style="font-weight: 600;">{selected_bet['stake']}‚Ç¨</div>
                            </div>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        # S√©lectionner le r√©sultat avec une interface visuelle am√©lior√©e
                        st.markdown("### S√©lectionner le r√©sultat")
                        result_cols = st.columns(3)
                        
                        with result_cols[0]:
                            win_clicked = st.button(
                                "‚úÖ Victoire", 
                                key="win_result_btn",
                                use_container_width=True,
                                type="primary"
                            )
                        
                        with result_cols[1]:
                            loss_clicked = st.button(
                                "‚ùå D√©faite", 
                                key="loss_result_btn",
                                use_container_width=True
                            )
                        
                        with result_cols[2]:
                            void_clicked = st.button(
                                "‚ö™ Annul√©", 
                                key="void_result_btn",
                                use_container_width=True
                            )
                        
                        # Traitement des clics
                        if win_clicked or loss_clicked or void_clicked:
                            result = "win" if win_clicked else "loss" if loss_clicked else "void"
                            
                            # Animation de chargement
                            with st.spinner(f"Mise √† jour du pari #{update_bet_id}..."):
                                # Mettre √† jour le pari
                                new_bankroll = update_bet_result(update_bet_id, result, app_data['current_bankroll'])
                                
                                # Mettre √† jour la bankroll dans app_data
                                app_data['current_bankroll'] = new_bankroll
                                
                                # AM√âLIORATION UI: Message de confirmation dynamique
                                result_icon = "‚úÖ" if result == "win" else "‚ùå" if result == "loss" else "‚ö™"
                                result_text = "Victoire" if result == "win" else "D√©faite" if result == "loss" else "Annul√©"
                                result_color = "#4CAF50" if result == "win" else "#F44336" if result == "loss" else "#9E9E9E"
                                
                                # Calcul du profit
                                if result == "win":
                                    profit = selected_bet['stake'] * (selected_bet['odds'] - 1)
                                    msg = f"Gain de {profit:.2f}‚Ç¨"
                                elif result == "loss":
                                    profit = -selected_bet['stake']
                                    msg = f"Perte de {abs(profit):.2f}‚Ç¨"
                                else:
                                    profit = 0
                                    msg = "Mise rembours√©e"
                                
                                # AM√âLIORATION UI: Carte de confirmation
                                st.markdown(f"""
                                <div class="card section-fade-in" style="background: linear-gradient(145deg, rgba({
                                    '76, 175, 80' if result == 'win' else
                                    '244, 67, 54' if result == 'loss' else
                                    '158, 158, 158'
                                }, 0.1) 0%, rgba({
                                    '56, 142, 60' if result == 'win' else
                                    '211, 47, 47' if result == 'loss' else
                                    '117, 117, 117'
                                }, 0.1) 100%); text-align: center;">
                                    <div style="font-size: 3rem; margin-bottom: 10px;">{result_icon}</div>
                                    <h3 style="margin-bottom: 15px; color: {result_color};">{result_text}</h3>
                                    <div style="font-weight: 600; font-size: 1.2rem; margin-bottom: 15px;">
                                        {selected_bet['pick']} @ {selected_bet['odds']}
                                    </div>
                                    <div style="font-weight: 500; font-size: 1.1rem;">
                                        {msg}
                                    </div>
                                    <div style="margin-top: 15px; font-size: 1rem;">
                                        Nouvelle bankroll: <b>{new_bankroll:.2f}‚Ç¨</b>
                                    </div>
                                </div>
                                """, unsafe_allow_html=True)
                    else:
                        st.info("Aucun pari en cours √† mettre √† jour.")
                
                # Colonne pour supprimer les paris
                with manage_columns[1]:
                    st.markdown("""
                    <div class="card">
                        <h3 style="margin-top: 0;">Supprimer un pari</h3>
                        <p>Supprimer un pari en cours (avant d'en conna√Ætre le r√©sultat)</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # S√©lectionner un pari √† supprimer (seulement les paris ouverts)
                    open_bets = bets_df[bets_df["status"] == "open"]
                    open_bet_ids = open_bets["bet_id"].tolist() if not open_bets.empty else []
                    
                    if open_bet_ids:
                        delete_bet_id = st.selectbox(
                            "Choisir un pari √† supprimer:",
                            options=open_bet_ids,
                            format_func=lambda x: f"#{x} - {open_bets[open_bets['bet_id'] == x]['event_name'].values[0]} ({open_bets[open_bets['bet_id'] == x]['pick'].values[0]})",
                            key="delete_bet_select"
                        )
                        
                        # R√©cup√©rer les informations du pari
                        selected_bet = open_bets[open_bets["bet_id"] == delete_bet_id].iloc[0]
                        
                        # AM√âLIORATION UI: Affichage am√©lior√© des d√©tails du pari
                        st.markdown(f"""
                        <div class="card" style="background: linear-gradient(145deg, rgba(244, 67, 54, 0.1) 0%, rgba(211, 47, 47, 0.1) 100%);">
                            <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                                <div style="font-weight: 500;">Pari #{delete_bet_id}</div>
                                <div style="font-weight: 500;">{selected_bet['event_name']}</div>
                            </div>
                            <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                                <div>Pick</div>
                                <div style="font-weight: 600;">{selected_bet['pick']}</div>
                            </div>
                            <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                                <div>Cote</div>
                                <div style="font-weight: 600;">{selected_bet['odds']}</div>
                            </div>
                            <div style="display: flex; justify-content: space-between;">
                                <div>Mise</div>
                                <div style="font-weight: 600;">{selected_bet['stake']}‚Ç¨</div>
                            </div>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        # AM√âLIORATION UI: Message d'avertissement
                        st.markdown("""
                        <div style="background-color: rgba(244, 67, 54, 0.1); padding: 10px; border-radius: 8px; margin: 15px 0; border-left: 3px solid #F44336;">
                            <b style="color: #F44336;">‚ö†Ô∏è Attention:</b> La suppression est d√©finitive et ne peut pas √™tre annul√©e.
                        </div>
                        """, unsafe_allow_html=True)
                        
                        # Confirmation avant suppression
                        confirm_delete = st.checkbox("Je confirme vouloir supprimer ce pari", key="confirm_delete")
                        
                        if confirm_delete:
                            # Bouton pour supprimer
                            if st.button("üóëÔ∏è Supprimer le pari", type="primary", key="delete_bet_btn", use_container_width=True):
                                # Animation de chargement
                                with st.spinner(f"Suppression du pari #{delete_bet_id}..."):
                                    # Supprimer le pari
                                    if delete_bet(delete_bet_id):
                                        # AM√âLIORATION UI: Message de confirmation
                                        st.success(f"‚úÖ Pari #{delete_bet_id} supprim√© avec succ√®s!")
                                        
                                        # AM√âLIORATION UI: Carte de confirmation
                                        st.markdown(f"""
                                        <div class="card section-fade-in" style="text-align: center; margin: 15px 0;">
                                            <div style="font-size: 3rem; margin-bottom: 10px;">üóëÔ∏è</div>
                                            <h3 style="margin-bottom: 15px;">Pari supprim√©</h3>
                                            <div style="color: #aaa;">
                                                Le pari a √©t√© d√©finitivement retir√© de votre historique.
                                            </div>
                                        </div>
                                        """, unsafe_allow_html=True)
                                    else:
                                        st.error("‚ùå Erreur lors de la suppression du pari.")
                        else:
                            # Bouton d√©sactiv√©
                            st.markdown("""
                            <div style="opacity: 0.5; pointer-events: none; margin-top: 15px;">
                                <button style="width: 100%; padding: 8px 0; background-color: #F44336; color: white; border: none; border-radius: 4px; cursor: not-allowed;">
                                    üóëÔ∏è Supprimer le pari
                                </button>
                            </div>
                            <div style="text-align: center; font-size: 0.9rem; color: #aaa; margin-top: 5px;">
                                Cochez la case de confirmation pour activer le bouton
                            </div>
                            """, unsafe_allow_html=True)
                    else:
                        st.info("Aucun pari √† supprimer.")
        else:
            # AM√âLIORATION UI: Message d'information pour √©tat vide
            st.markdown("""
            <div class="card" style="text-align: center; padding: 40px 20px;">
                <div style="font-size: 6rem; margin-bottom: 20px;">üìä</div>
                <h2 style="margin-bottom: 15px;">Aucune donn√©e d'historique</h2>
                <p style="margin-bottom: 30px;">Placez votre premier pari pour commencer √† suivre vos performances.</p>
                <div style="opacity: 0.6; font-style: italic;">
                    Utilisez les onglets <b>Pr√©diction</b> ou <b>√âv√©nements √† venir</b> pour placer vos paris.
                </div>
            </div>
            """, unsafe_allow_html=True)
    
    # T√©l√©chargement des donn√©es
    if has_bets and has_bankroll and os.path.exists(bets_file) and os.path.exists(bankroll_file):
        st.markdown("---")
        st.subheader("Exporter les donn√©es")
        
        download_cols = st.columns(2)
        
        with download_cols[0]:
            if os.path.exists(bets_file):
                with open(bets_file, 'rb') as f:
                    st.download_button(
                        label="üì• T√©l√©charger les paris (CSV)",
                        data=f,
                        file_name='ufc_bets_history.csv',
                        mime='text/csv',
                        key="download_bets_btn",
                        use_container_width=True
                    )
        
        with download_cols[1]:
            if os.path.exists(bankroll_file):
                with open(bankroll_file, 'rb') as f:
                    st.download_button(
                        label="üì• T√©l√©charger l'historique bankroll (CSV)",
                        data=f,
                        file_name='ufc_bankroll_history.csv',
                        mime='text/csv',
                        key="download_bankroll_btn",
                        use_container_width=True
                    )
# Lancer l'application
if __name__ == "__main__":
    main()
    
